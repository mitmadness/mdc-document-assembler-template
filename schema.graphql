type AccessPoint {
  _id: MongoID!
  areSavesPubliclyAvailableById: Boolean!
  authorizedCatalogIds: [MongoID]!
  authorizedCatalogs(
    """Filter by fields"""
    filter: FilterFindManyCatalogFolderInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyCatalogFolderInput
  ): [CatalogFolder!]!

  """
  Be aware that not everyone is allowed to access brand informations. If you want public theming data, use brandColors instead.
  """
  brand: Brand!

  """
  Since relation `brand` is not available for everyone, this one allows access to colors
  """
  brandColors: BrandColors!
  brandId: MongoID!

  """
  Since relation `brand` is not available for everyone, this one allows access to harmless data
  """
  brandPublicInfo: BrandPublicInfo
  ecotaxePriceTableId: MongoID
  name: String!
  parametersScrapper: BrandParametersScrapper
  parametersScrapperId: MongoID
  parametersTunnel: BrandParametersTunnel!
  parametersTunnelId: MongoID!
  priceTable: PriceTable
  priceTableId: MongoID
  supportButton: AccessPointSupportButton!
}

"""A connection to a list of items."""
type AccessPointConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [AccessPointEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AccessPointEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: AccessPoint!
}

"""List of items with pagination."""
type AccessPointPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [AccessPoint!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type AccessPointSupportButton {
  icon: EnumAccessPointSupportButtonIcon
  tooltip(locale: String): String!
  tooltipTranslations: Translations!
  type: EnumAccessPointSupportButtonType!
  value: String
}

input AccessPointSupportButtonInput {
  icon: EnumAccessPointSupportButtonIcon
  tooltipTranslations: Translations
  type: EnumAccessPointSupportButtonType!
  value: String
}

union AnyJob = DocumentAssemblerManifestQueueJob | DocumentAssemblerQueueJob | HealthCheckQueueJob | PuppeteerPdfQueueJob

type Applet {
  _id: MongoID!
  encoding: EnumAppletEncoding!
  indexedDbResetVersion: String!
  intVersion: Float!
  readableVersion: String!
  redirectedVersion: String
  url: String!
  version: String!
}

"""A connection to a list of items."""
type AppletConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [AppletEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AppletEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Applet!
}

"""List of items with pagination."""
type AppletPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Applet!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type BarcodeCollection {
  _id: MongoID!
  barcodeReferences: [BarcodeCollectionReference!]!
  brand: Brand!
  brandId: MongoID!
  createdAt: Date
  createdById: MongoID
  name: String
  updatedAt: Date
  updatedById: MongoID
}

input BarcodeCollectionBarcodeReferencesInput {
  _id: MongoID
  ean: String!
  id: String!
}

"""A connection to a list of items."""
type BarcodeCollectionConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [BarcodeCollectionEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type BarcodeCollectionEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: BarcodeCollection!
}

"""List of items with pagination."""
type BarcodeCollectionPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [BarcodeCollection!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type BarcodeCollectionReference {
  _id: MongoID
  ean: String!
  id: String!
}

type Brand {
  _id: MongoID!
  accessPoints(
    """Filter by fields"""
    filter: FilterFindManyAccessPointInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyAccessPointInput
  ): [AccessPoint!]!
  anonymousSaves(
    """Filter by fields"""
    filter: FilterFindManySaveInput
    limit: Int = 1000
    skip: Int
    sort: [SortFindManySaveInput!]
  ): [Save!]!
  barcodeCollections(
    """Filter by fields"""
    filter: FilterFindManyBarcodeCollectionInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyBarcodeCollectionInput
  ): [BarcodeCollection!]!
  brandParametersPricing(
    """Filter by fields"""
    filter: FilterFindManyBrandParametersPricingInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyBrandParametersPricingInput
  ): [BrandParametersPricing!]!
  brandParametersScrapper(
    """Filter by fields"""
    filter: FilterFindManyBrandParametersScrapperInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyBrandParametersScrapperInput
  ): [BrandParametersScrapper!]!
  brandParametersTunnel(
    """Filter by fields"""
    filter: FilterFindManyBrandParametersTunnelInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyBrandParametersTunnelInput
  ): [BrandParametersTunnel!]!

  """
  Gets whether the viewer can reach the given role in the brand. It's a shortcut over getting the same information from memberships/ownMembership. Use this rather than memberships, if that's the only information you need.
  """
  canReachRole(role: String!): Boolean!
  cloudStorageBytesUsage: BrandCloudStorageBytesUsage!
  colors: BrandColors!
  createdAt: Date
  items(
    """Filter by fields"""
    filter: FilterFindManyItemInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyItemInput
  ): [Item!]!
  memberships: [BrandMembership!]!
  name: String!

  """
  If logged in and member of the brand, returns the membership of the user in that brand, null if the user is not logged in or not member of that brand
  """
  ownMembership: BrandMembership
  palettes(
    """Filter by fields"""
    filter: FilterFindManyPaletteInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPaletteInput
  ): [Palette!]!
  promoterWebsiteConfiguration: BrandPromoterWebsiteConfiguration!
  salesRecords(
    """Filter by fields"""
    filter: FilterFindManySalesRecordInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManySalesRecordInput
  ): [SalesRecord!]!
  satelliteConfiguration: BrandSatelliteConfiguration
  shareCode: String!
  slug: String!
  updatedAt: Date
  user(
    """Filter by fields"""
    filter: FilterFindOneUserInput

    """Only return users that can reach the given role."""
    reachableRole: String
    skip: Int
    sort: SortFindOneUserInput
  ): User
  users(
    """Filter by fields"""
    filter: FilterFindManyUserInput
    limit: Int = 1000

    """Only return users that can reach the given role."""
    reachableRole: String
    skip: Int
    sort: SortFindManyUserInput
  ): [User!]!
}

type BrandCloudStorageBytesUsage {
  items: Int!
  saves: Int!
  total: Int!
}

type BrandColors {
  dataProtection: String!
  legalNotice: String!
  loadingScreenBackground: String!
  loadingScreenLogoPicture: String!
  loadingScreenProgressBarBackground: String!
  loadingScreenProgressBarBorder: String!
  loadingScreenProgressBarContent: String!
  loadingScreenText: String!
  meshes: BrandColorsMeshes!
  planElement: BrandColorsPlanElement!
  primary: String!
  questHeaderBackground: String!
  questHeaderBody: String!
  questHeaderTitle: String!
  secondary: String!
  stepperBackground: String!
  stepperContent: String!
  stepperText: String!
  tertiary: String!
}

input BrandColorsInput {
  dataProtection: String
  legalNotice: String
  loadingScreenBackground: String
  loadingScreenLogoPicture: String
  loadingScreenProgressBarBackground: String
  loadingScreenProgressBarBorder: String
  loadingScreenProgressBarContent: String
  loadingScreenText: String
  meshes: BrandColorsMeshesInput
  planElement: BrandColorsPlanElementInput
  primary: String
  questHeaderBackground: String
  questHeaderBody: String
  questHeaderTitle: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

type BrandColorsMeshes {
  wallCut: String!
}

input BrandColorsMeshesInput {
  wallCut: String
}

type BrandColorsPlanElement {
  floor: String!
  wall: String!
  window: String!
}

input BrandColorsPlanElementInput {
  floor: String
  wall: String
  window: String
}

"""A connection to a list of items."""
type BrandConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [BrandEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type BrandEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Brand!
}

type BrandEntryPointTrafficByEntryPoint {
  entryPoint: String!
  hitsByDay: [BrandEntryPointTrafficHitsByDay!]!
}

type BrandEntryPointTrafficHitsByDay {
  date: Date!
  hits: Int!
}

type BrandEntryPointTrafficInferenceOutput {
  seriesByEntryPoint: [BrandEntryPointTrafficByEntryPoint!]!
}

input BrandEntryPointTrafficInferenceParams {
  brandId: String
  from: Date
  to: Date
}

type BrandMembership {
  _id: MongoID
  addedAt: Date
  addedBy: User
  addedById: MongoID

  """Allows to know if some given role is reachable by the user."""
  canReachRole(role: String!): Boolean!
  metadata: JSON
  reachableRoles: [String!]!
  roles: [String!]!
  user: User!
  userId: MongoID!
}

"""List of items with pagination."""
type BrandPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Brand!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type BrandParametersPricing {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  enabled: Boolean
  useArticleCode: Boolean
  useEAN: Boolean
}

type BrandParametersScrapper {
  _id: MongoID!
  allowAnonymousSave: Boolean!
  brand: Brand!
  brandId: MongoID!
  enabled: Boolean!
  export: Boolean!
  geometry: Boolean!
  name: String
  objects: Boolean!
  postManualSaveTriggerSteps: [BrandParametersScrapperPostManualSaveTriggerSteps!]!
  screenshots: Boolean!
  steps: [BrandParametersScrapperSteps!]!
  watermark: BrandParametersScrapperWatermark!
}

"""A connection to a list of items."""
type BrandParametersScrapperConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [BrandParametersScrapperEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type BrandParametersScrapperEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: BrandParametersScrapper!
}

"""List of items with pagination."""
type BrandParametersScrapperPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [BrandParametersScrapper!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type BrandParametersScrapperPostManualSaveTriggerSteps {
  _id: MongoID
  triggerPopup: BrandParametersScrapperPostManualSaveTriggerStepsTriggerPopup
  type: EnumBrandParametersScrapperPostManualSaveTriggerStepsType
}

input BrandParametersScrapperPostManualSaveTriggerStepsInput {
  _id: MongoID
  triggerPopup: BrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput
  type: EnumBrandParametersScrapperPostManualSaveTriggerStepsType
}

type BrandParametersScrapperPostManualSaveTriggerStepsTriggerPopup {
  _id: MongoID
  buttonType: EnumBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupButtonType
  text(locale: String): String!
  textTranslations: Translations!
  title(locale: String): String!
  titleTranslations: Translations!
  yesNoButtons: BrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtons
}

input BrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput {
  _id: MongoID
  buttonType: EnumBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupButtonType
  textTranslations: Translations
  titleTranslations: Translations
  yesNoButtons: BrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput
}

type BrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtons {
  stateProperty: String
}

input BrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput {
  stateProperty: String
}

type BrandParametersScrapperSteps {
  _id: MongoID
  filter: BrandParametersScrapperStepsFilter
  map: BrandParametersScrapperStepsMap
  stepType: EnumBrandParametersScrapperStepsStepType
  stepVerb: String
  tap: BrandParametersScrapperStepsTap
  verbFilter: EnumBrandParametersScrapperStepsVerbFilter
  verbMap: EnumBrandParametersScrapperStepsVerbMap
  verbTap: EnumBrandParametersScrapperStepsVerbTap
}

type BrandParametersScrapperStepsFilter {
  expression: String
}

input BrandParametersScrapperStepsFilterInput {
  expression: String
}

input BrandParametersScrapperStepsInput {
  _id: MongoID
  filter: BrandParametersScrapperStepsFilterInput
  map: BrandParametersScrapperStepsMapInput
  stepType: EnumBrandParametersScrapperStepsStepType
  stepVerb: String
  tap: BrandParametersScrapperStepsTapInput
  verbFilter: EnumBrandParametersScrapperStepsVerbFilter
  verbMap: EnumBrandParametersScrapperStepsVerbMap
  verbTap: EnumBrandParametersScrapperStepsVerbTap
}

type BrandParametersScrapperStepsMap {
  kitchenPricer: BrandParametersScrapperStepsMapKitchenPricer
  payloadGenerator: BrandParametersScrapperStepsMapPayloadGenerator
  pdfReportGenerator: BrandParametersScrapperStepsMapPdfReportGenerator
  plinthCalculator: BrandParametersScrapperStepsMapPlinthCalculator
  reportGenerator: BrandParametersScrapperStepsMapReportGenerator
  terracePricer: BrandParametersScrapperStepsMapTerracePricer
}

input BrandParametersScrapperStepsMapInput {
  kitchenPricer: BrandParametersScrapperStepsMapKitchenPricerInput
  payloadGenerator: BrandParametersScrapperStepsMapPayloadGeneratorInput
  pdfReportGenerator: BrandParametersScrapperStepsMapPdfReportGeneratorInput
  plinthCalculator: BrandParametersScrapperStepsMapPlinthCalculatorInput
  reportGenerator: BrandParametersScrapperStepsMapReportGeneratorInput
  terracePricer: BrandParametersScrapperStepsMapTerracePricerInput
}

type BrandParametersScrapperStepsMapKitchenPricer {
  apiToken: String
  apiUrl: String
  barcodeCollectionId: MongoID
  projectBaseUrl: String
}

input BrandParametersScrapperStepsMapKitchenPricerInput {
  apiToken: String
  apiUrl: String
  barcodeCollectionId: MongoID
  projectBaseUrl: String
}

type BrandParametersScrapperStepsMapPayloadGenerator {
  addSaveName: Boolean!
  addUpdateToken: Boolean!
  dynamicParameterForTunnelStateInformation: String!
  tunnelStateKeys: [String!]!
}

input BrandParametersScrapperStepsMapPayloadGeneratorInput {
  addSaveName: Boolean
  addUpdateToken: Boolean
  dynamicParameterForTunnelStateInformation: String
  tunnelStateKeys: [String!]
}

type BrandParametersScrapperStepsMapPdfReportGenerator {
  payloadType: EnumBrandParametersScrapperStepsMapPdfReportGeneratorPayloadType
}

input BrandParametersScrapperStepsMapPdfReportGeneratorInput {
  payloadType: EnumBrandParametersScrapperStepsMapPdfReportGeneratorPayloadType
}

type BrandParametersScrapperStepsMapPlinthCalculator {
  bigPlinthId: MongoID
  littlePlinthId: MongoID
}

input BrandParametersScrapperStepsMapPlinthCalculatorInput {
  bigPlinthId: MongoID
  littlePlinthId: MongoID
}

type BrandParametersScrapperStepsMapReportGenerator {
  chunksManifest: [InputDocumentChunkManifest!]
  documentName: String
  htmlTemplate: String
  mode: EnumBrandParametersScrapperStepsMapReportGeneratorMode!
}

input BrandParametersScrapperStepsMapReportGeneratorInput {
  chunksManifest: [InputDocumentChunkManifestInput!]
  documentName: String
  htmlTemplate: String
  mode: EnumBrandParametersScrapperStepsMapReportGeneratorMode!
}

type BrandParametersScrapperStepsMapTerracePricer {
  itemsCatalogId: MongoID
}

input BrandParametersScrapperStepsMapTerracePricerInput {
  itemsCatalogId: MongoID
}

type BrandParametersScrapperStepsTap {
  outputToApi: BrandParametersScrapperStepsTapOutputToApi
  sendEmail: BrandParametersScrapperStepsTapSendEmail
}

input BrandParametersScrapperStepsTapInput {
  outputToApi: BrandParametersScrapperStepsTapOutputToApiInput
  sendEmail: BrandParametersScrapperStepsTapSendEmailInput
}

type BrandParametersScrapperStepsTapOutputToApi {
  apiToken: String
  apiUrl: String
  signPayload: Boolean
}

input BrandParametersScrapperStepsTapOutputToApiInput {
  apiToken: String
  apiUrl: String
  signPayload: Boolean
}

type BrandParametersScrapperStepsTapSendEmail {
  attachmentName: String
  dynamicParameterEmailAdress: String
  emailSourceType: EnumBrandParametersScrapperStepsTapSendEmailEmailSourceType
  sendReportAsAttachment: Boolean
  staticEmailAdress: String
  subject: String
  template: String
}

input BrandParametersScrapperStepsTapSendEmailInput {
  attachmentName: String
  dynamicParameterEmailAdress: String
  emailSourceType: EnumBrandParametersScrapperStepsTapSendEmailEmailSourceType
  sendReportAsAttachment: Boolean
  staticEmailAdress: String
  subject: String
  template: String
}

type BrandParametersScrapperWatermark {
  alpha: Float!
  color: String!
  enabled: Boolean!
  picture: String!
  repetition: Float!
}

input BrandParametersScrapperWatermarkInput {
  alpha: Float
  color: String
  enabled: Boolean
  picture: String
  repetition: Float
}

type BrandParametersTunnel {
  _id: MongoID!
  apertureParameters: BrandParametersTunnelApertureParameters!
  brand: Brand!
  brandId: MongoID
  cache: BrandParametersTunnelCache!
  colorsParameters: BrandParametersTunnelColorsParameters!
  customLinkButton: BrandParametersTunnelCustomLinkButton
  defaultCameraParameters: BrandParametersTunnelDefaultCameraParameters!
  defaultCoatingParameters: BrandParametersTunnelDefaultCoatingParameters!
  defaultDayTime: Float
  defaultSnapDistance: Float!
  disableHeaderShadow: Boolean
  displayCartItemNumber: Boolean!
  displayCustomisationTagFurnitureOptions: Boolean!
  displayFurnitureSubstitutesOptions: Boolean!
  displaySaveName: Boolean!
  displayStepsHeader: Boolean
  enabled: Boolean!
  globalOptions: [String!]!
  includeAllBrandItemsInCache: Boolean!
  initialStepIfLoadingSave: Float
  isReloadFromLocalStorageEnabled: Boolean!
  logoLinkOnClick: String
  logoPictureReference: String
  name: String!
  persistentVariables: [BrandParametersTunnelPersistentVariables!]!
  preload: Boolean!
  savePanelParameters: BrandParametersTunnelSavePanelParameters!
  steps: [BrandParametersTunnelStep!]!
  wallParameters: BrandParametersTunnelWallParameters!
}

type BrandParametersTunnelApertureParameters {
  doorClassicDefaultItem: String
  doorEntryDefaultItem: String
  doorEntrySidelightDefaultItem: String
  doorExteriorCustomisationItemsGroupId: String
  doorInteriorCustomisationItemsGroupId: String
  doubleDoorDefaultItem: String
  doubleDoorlikeWindowDefaultItem: String
  doubleSwingDoorDefaultItem: String
  doubleWindowDefaultItem: String
  garageDoorDefaultItem: String
  simpleDoorlikeWindowDefaultItem: String
  slitWindowDefaultItem: String
  tripleDoorlikeWindowDefaultItem: String
  tripleWindowDefaultItem: String
  windowCustomisationItemsGroupId: String
  windowDefaultItem: String
}

input BrandParametersTunnelApertureParametersInput {
  doorClassicDefaultItem: String
  doorEntryDefaultItem: String
  doorEntrySidelightDefaultItem: String
  doorExteriorCustomisationItemsGroupId: String
  doorInteriorCustomisationItemsGroupId: String
  doubleDoorDefaultItem: String
  doubleDoorlikeWindowDefaultItem: String
  doubleSwingDoorDefaultItem: String
  doubleWindowDefaultItem: String
  garageDoorDefaultItem: String
  simpleDoorlikeWindowDefaultItem: String
  slitWindowDefaultItem: String
  tripleDoorlikeWindowDefaultItem: String
  tripleWindowDefaultItem: String
  windowCustomisationItemsGroupId: String
  windowDefaultItem: String
}

type BrandParametersTunnelCache {
  catalogFolderIds: [MongoID!]!
  catalogFolders: [CatalogFolder!]!
  itemIds: [MongoID!]!
  items: [Item!]!
  itemsGroupIds: [MongoID!]!
  itemsGroups: [ItemsGroup!]!
  pictureIds: [MongoID!]!
  pictures: [Picture!]!
}

type BrandParametersTunnelColorsParameters {
  nameHelpAtlas: String
  nameOptionsAtlas: String
  nameToolsAtlas: String
  primary: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

input BrandParametersTunnelColorsParametersInput {
  nameHelpAtlas: String
  nameOptionsAtlas: String
  nameToolsAtlas: String
  primary: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

type BrandParametersTunnelCustomLinkButton {
  link: String
  name: String
}

input BrandParametersTunnelCustomLinkButtonInput {
  link: String
  name: String
}

type BrandParametersTunnelDefaultCameraParameters {
  visitCameraParameters: BrandParametersTunnelDefaultCameraParametersVisitCameraParameters!
}

input BrandParametersTunnelDefaultCameraParametersInput {
  visitCameraParameters: BrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput
}

type BrandParametersTunnelDefaultCameraParametersVisitCameraParameters {
  defaultVisitFieldOfView: Float!
}

input BrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput {
  defaultVisitFieldOfView: Float
}

type BrandParametersTunnelDefaultCoatingParameters {
  defaultExteriorFlooringId: MongoID
  defaultGardenFlooringId: MongoID
  defaultInteriorFlooringId: MongoID
}

input BrandParametersTunnelDefaultCoatingParametersInput {
  defaultExteriorFlooringId: MongoID
  defaultGardenFlooringId: MongoID
  defaultInteriorFlooringId: MongoID
}

type BrandParametersTunnelPersistentVariables {
  config: JSON
  name: String
}

input BrandParametersTunnelPersistentVariablesInput {
  config: JSON
  name: String
}

type BrandParametersTunnelSavePanelParameters {
  isCustomerModuleEnabled: Boolean
  isExportButtonEnabled: Boolean
}

input BrandParametersTunnelSavePanelParametersInput {
  isCustomerModuleEnabled: Boolean
  isExportButtonEnabled: Boolean
}

type BrandParametersTunnelStep {
  _id: MongoID
  analytics: BrandParametersTunnelStepsAnalytics
  config: JSON
  description: String
  htmlTemplate: String
  isShownInStepper: Boolean
  module: EnumBrandParametersTunnelStepsModule!
  name: String
  publicName(locale: String): String!
  publicNameTranslations: Translations!
  resetTunnelOnActivation: Boolean
}

input BrandParametersTunnelStepInput {
  _id: MongoID
  analytics: BrandParametersTunnelStepsAnalyticsInput
  config: JSON
  description: String
  htmlTemplate: String
  isShownInStepper: Boolean
  module: EnumBrandParametersTunnelStepsModule!
  name: String
  publicNameTranslations: Translations
  resetTunnelOnActivation: Boolean
}

type BrandParametersTunnelStepsAnalytics {
  choiceReducer: BrandParametersTunnelStepsAnalyticsChoiceReducer
}

type BrandParametersTunnelStepsAnalyticsChoiceReducer {
  isEnabled: Boolean
  stateProperties: [String]
}

input BrandParametersTunnelStepsAnalyticsChoiceReducerInput {
  isEnabled: Boolean
  stateProperties: [String]
}

input BrandParametersTunnelStepsAnalyticsInput {
  choiceReducer: BrandParametersTunnelStepsAnalyticsChoiceReducerInput
}

type BrandParametersTunnelWallParameters {
  doorLintelLevel: Float
  exteriorCeilingLintelHeight: Float
  exteriorWallThickness: BrandParametersTunnelWallParametersExteriorWallThickness
  floorHeight: Float
  groundFloorLevel: Float
  innerHeight: Float
  interiorCeilingLintelHeight: Float
  interiorWallThickness: BrandParametersTunnelWallParametersInteriorWallThickness
  optionsPanelWallConfig: BrandParametersTunnelWallParametersOptionsPanelWallConfig
  windowLintelLevel: Float
  windowSillLevel: Float
}

type BrandParametersTunnelWallParametersExteriorWallThickness {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

input BrandParametersTunnelWallParametersExteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

input BrandParametersTunnelWallParametersInput {
  doorLintelLevel: Float
  exteriorCeilingLintelHeight: Float
  exteriorWallThickness: BrandParametersTunnelWallParametersExteriorWallThicknessInput
  floorHeight: Float
  groundFloorLevel: Float
  innerHeight: Float
  interiorCeilingLintelHeight: Float
  interiorWallThickness: BrandParametersTunnelWallParametersInteriorWallThicknessInput
  optionsPanelWallConfig: BrandParametersTunnelWallParametersOptionsPanelWallConfigInput
  windowLintelLevel: Float
  windowSillLevel: Float
}

type BrandParametersTunnelWallParametersInteriorWallThickness {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

input BrandParametersTunnelWallParametersInteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

type BrandParametersTunnelWallParametersOptionsPanelWallConfig {
  displayOnlyWallType: Boolean
  displayWallHeightExteriorFloor: Boolean
  displayWallHeightInteriorFloor: Boolean
  displayWallThicknessDropdown: Boolean
  displayWallThicknessInput: Boolean
  usePartitionLabelForInteriorWall: Boolean
}

input BrandParametersTunnelWallParametersOptionsPanelWallConfigInput {
  displayOnlyWallType: Boolean
  displayWallHeightExteriorFloor: Boolean
  displayWallHeightInteriorFloor: Boolean
  displayWallThicknessDropdown: Boolean
  displayWallThicknessInput: Boolean
  usePartitionLabelForInteriorWall: Boolean
}

type BrandPromoterWebsiteConfiguration {
  acquirerValidateUnitAccessPointId: MongoID
  metadataConfiguration: BrandPromoterWebsiteConfigurationMetadataConfiguration!
  operatorTypeAccessPointId: MongoID
  promoterValidateTypeAccessPointId: MongoID
  unitTypeSaveModelId: MongoID
}

input BrandPromoterWebsiteConfigurationInput {
  acquirerValidateUnitAccessPointId: MongoID
  metadataConfiguration: BrandPromoterWebsiteConfigurationMetadataConfigurationInput
  operatorTypeAccessPointId: MongoID
  promoterValidateTypeAccessPointId: MongoID
  unitTypeSaveModelId: MongoID
}

type BrandPromoterWebsiteConfigurationMetadataConfiguration {
  apartmentUnitMetadata: [BrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadata!]!
  apartmentUnitTypeIdMetadataKey: String
  apartmentUnitTypeMetadata: [BrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadata!]!
  programMetadata: [BrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadata!]!
}

type BrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadata {
  _id: MongoID
  label: String!
  shouldDisplayInEnumerationTool: Boolean!
  shouldDisplayInIndexTable: Boolean!
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataType!
}

input BrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput {
  _id: MongoID
  label: String!
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataType
}

type BrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadata {
  _id: MongoID
  label: String!
  shouldDisplayInEnumerationTool: Boolean!
  shouldDisplayInIndexTable: Boolean!
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataType!
}

input BrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput {
  _id: MongoID
  label: String!
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataType
}

input BrandPromoterWebsiteConfigurationMetadataConfigurationInput {
  apartmentUnitMetadata: [BrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput!]
  apartmentUnitTypeIdMetadataKey: String
  apartmentUnitTypeMetadata: [BrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput!]
  programMetadata: [BrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput!]
}

type BrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadata {
  _id: MongoID
  label: String!
  shouldDisplayInIndexTable: Boolean!
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataType!
}

input BrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput {
  _id: MongoID
  label: String!
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataType
}

type BrandPublicInfo {
  _id: MongoID!
  colors: BrandColors
  name: String!
}

type BrandSatelliteConfiguration {
  satelliteUrl: String
}

input BrandSatelliteConfigurationInput {
  satelliteUrl: String
}

type BrandUniqueVisitorsByEntryPoint {
  entryPoint: String!
  visitors: Int!
}

type BrandUniqueVisitorsInferenceOutput {
  visitorsByEntryPoint: [BrandUniqueVisitorsByEntryPoint!]!
}

input BrandUniqueVisitorsInferenceParams {
  brandId: String
  from: Date
  to: Date
}

input BrandUsersAddRecord {
  """
  The email of the user.
  If the user already is a registered myDecoCloud user, their account will be reused.
  """
  email: String!

  """Additionnal data for the user to store customer related information."""
  metadata: Metadata

  """
  The full name of the user.
  If the user already has a myDecoCloud account, the previous name will be kept and this value discarded.
  """
  name: String!

  """
  The list of roles that the user will get in your brand (through their membership).
  By default no role is set.
  """
  roles: [String!]! = []
}

type BrandUsersLoginPayload {
  token: String!
}

type BrandUsersMergePayload {
  membership: BrandMembership!
  updatedDocuments: [BrandUsersMergePayloadUpdatedDocument!]!
  user: User!
}

type BrandUsersMergePayloadUpdatedDocument {
  id: MongoID!
  name: String!
  type: String!
}

input BrandUsersUpdateRecord {
  email: String
  name: String
}

type CatalogFolder {
  _id: MongoID!
  associatedEcotaxePriceTableId: MongoID
  associatedPriceTableId: MongoID
  brand: Brand!
  brandId: MongoID!
  children(
    """Filter by fields"""
    filter: FilterFindManyCatalogFolderInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyCatalogFolderInput
  ): [CatalogFolder!]!
  createdAt: Date
  createdBy: User
  createdById: MongoID
  iconId: Int

  """Access to the items directly in this catalog folder"""
  items: [Item!]!
  metadata: [CatalogFolderMetadata]
  name: String!
  parent: CatalogFolder
  parentId: MongoID
  public: Boolean
  publicName(locale: String): String!
  publicNameTranslations: Translations!
  published: Boolean
  root: CatalogFolder
  rootId: MongoID
  sharedWith(
    """Filter by fields"""
    filter: FilterFindManyBrandInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyBrandInput
  ): [Brand!]!
  sharedWithIds: [MongoID!]!
  thumbnailId: String
  thumbnailUrl: String
  tiles: [CatalogFolderTile!]!
  tilesBackgroundColor: String
  tilesColumnAmount: Float
  tilesColumnGap: Float
  tilesColumnSizes: [Float]
  tilesRowGap: Float
  tilesRowSizes: [Float]
  type: EnumCatalogFolderType
  updatedAt: Date
  virtual: Boolean
}

type CatalogFolderMetadata {
  _id: MongoID
  key: String
  value: String
}

input CatalogFolderMetadataInput {
  _id: MongoID
  key: String
  value: String
}

type CatalogFolderTile {
  _id: MongoID
  advancedText(locale: String): String!
  advancedTextTranslations: Translations!
  backgroundColor: String
  backgroundOpacity: Float
  borderRadius: Float
  catalogFolder: CatalogFolder
  catalogFolderId: MongoID
  catalogSourceId: MongoID
  descriptionTextSize: Float
  folder: MongoID
  hasShadow: Boolean
  height: Float
  horizontalTextAlignement: EnumCatalogFolderTilesHorizontalTextAlignement
  imageId: String
  imagePlacement: CatalogFolderTilesImagePlacement
  imageUrl: String
  isImagePlacementFree: Boolean
  isShownOnDesktop: Boolean
  isShownOnMobile: Boolean
  item: Item
  itemId: MongoID
  itemsGroup: MongoID
  mask: Boolean
  maskColor: String
  maskOpacity: Float
  metadata: [CatalogFolderTileMetadata!]!
  posX: Float
  posY: Float

  """
  Get the lowest and highest price available for the tile if it's an item tile
  """
  priceInfo: TilePriceInfo
  save: Save
  saveId: MongoID
  saveSelectedInTunnelStateVariable: String
  stylePreset: StylePreset
  stylePresetId: MongoID
  textColor: String
  textDescription(locale: String): String!
  textDescriptionTranslations: Translations!
  textPadding: CatalogFolderTilesTextPadding
  textTitle(locale: String): String!
  textTitleTranslations: Translations!
  titleTextColor: String
  titleTextSize: Float
  tooltip(locale: String): String!
  tooltipTranslations: Translations!
  type: EnumCatalogFolderTilesType
  useAdvancedText: Boolean
  verticalTextAlignement: EnumCatalogFolderTilesVerticalTextAlignement
  width: Float
}

type CatalogFolderTileMetadata {
  _id: MongoID
  key: String
  value: String
}

type CatalogFolderTilesImagePlacement {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

input CatalogFolderTilesImagePlacementInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

input CatalogFolderTilesInput {
  _id: MongoID
  advancedTextTranslations: Translations
  backgroundColor: String
  backgroundOpacity: Float
  borderRadius: Float
  catalogSourceId: MongoID
  construction: MongoID
  descriptionTextSize: Float
  folder: MongoID
  hasShadow: Boolean
  height: Float
  horizontalTextAlignement: EnumCatalogFolderTilesHorizontalTextAlignement
  imageId: String
  imagePlacement: CatalogFolderTilesImagePlacementInput
  imageUrl: String
  isImagePlacementFree: Boolean
  isShownOnDesktop: Boolean
  isShownOnMobile: Boolean
  item: MongoID
  itemsGroup: MongoID
  mask: Boolean
  maskColor: String
  maskOpacity: Float
  metadata: [CatalogFolderTilesMetadataInput]
  posX: Float
  posY: Float
  saveSelectedInTunnelStateVariable: String
  stylePresetId: MongoID
  textColor: String
  textDescriptionTranslations: Translations
  textPadding: CatalogFolderTilesTextPaddingInput
  textTitleTranslations: Translations
  titleTextColor: String
  titleTextSize: Float
  tooltipTranslations: Translations
  type: EnumCatalogFolderTilesType
  useAdvancedText: Boolean
  verticalTextAlignement: EnumCatalogFolderTilesVerticalTextAlignement
  width: Float
}

input CatalogFolderTilesMetadataInput {
  _id: MongoID
  key: String
  value: String
}

type CatalogFolderTilesTextPadding {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

input CatalogFolderTilesTextPaddingInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

type Category {
  _id: MongoID!
  name: JSON
  parent: Category
  parentId: MongoID
}

type ContactInformation {
  _id: MongoID!
  date: Date!
  email: String!
  fullname: String!
  interlocutor: String!
  message: String!
  phone: String
  state: EnumContactInformationState!
}

"""List of items with pagination."""
type ContactInformationPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [ContactInformation!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

""""""
input CreateOneAccessPointInput {
  areSavesPubliclyAvailableById: Boolean
  authorizedCatalogIds: [MongoID]
  brandId: MongoID!
  ecotaxePriceTableId: MongoID
  name: String!
  parametersScrapperId: MongoID
  parametersTunnelId: MongoID!
  priceTableId: MongoID
  supportButton: AccessPointSupportButtonInput
}

type CreateOneAccessPointPayload {
  """Created document"""
  record: AccessPoint

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneAppletInput {
  encoding: EnumAppletEncoding
  indexedDbResetVersion: String
  redirectedVersion: String
  version: String!
}

type CreateOneAppletPayload {
  """Created document"""
  record: Applet

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneBarcodeCollectionInput {
  barcodeReferences: [BarcodeCollectionBarcodeReferencesInput!]
  createdAt: Date
  createdById: MongoID
  name: String
  updatedAt: Date
  updatedById: MongoID
}

type CreateOneBarcodeCollectionPayload {
  """Created document"""
  record: BarcodeCollection

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneBrandInput {
  colors: BrandColorsInput
  createdAt: Date
  name: String!
  promoterWebsiteConfiguration: BrandPromoterWebsiteConfigurationInput
  satelliteConfiguration: BrandSatelliteConfigurationInput
  shareCode: String
  slug: String
  updatedAt: Date
}

""""""
input CreateOneBrandParametersPricingInput {
  brandId: MongoID!
  enabled: Boolean
  useArticleCode: Boolean
  useEAN: Boolean
}

type CreateOneBrandParametersPricingPayload {
  """Created document"""
  record: BrandParametersPricing

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneBrandParametersScrapperInput {
  allowAnonymousSave: Boolean
  brandId: MongoID!
  enabled: Boolean
  export: Boolean
  geometry: Boolean
  name: String
  objects: Boolean
  postManualSaveTriggerSteps: [BrandParametersScrapperPostManualSaveTriggerStepsInput!]
  screenshots: Boolean
  steps: [BrandParametersScrapperStepsInput!]
  watermark: BrandParametersScrapperWatermarkInput
}

type CreateOneBrandParametersScrapperPayload {
  """Created document"""
  record: BrandParametersScrapper

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneBrandParametersTunnelInput {
  apertureParameters: BrandParametersTunnelApertureParametersInput
  brandId: MongoID
  colorsParameters: BrandParametersTunnelColorsParametersInput
  customLinkButton: BrandParametersTunnelCustomLinkButtonInput
  defaultCameraParameters: BrandParametersTunnelDefaultCameraParametersInput
  defaultCoatingParameters: BrandParametersTunnelDefaultCoatingParametersInput
  defaultDayTime: Float
  defaultSnapDistance: Float
  disableHeaderShadow: Boolean
  displayCartItemNumber: Boolean
  displayCustomisationTagFurnitureOptions: Boolean
  displayFurnitureSubstitutesOptions: Boolean
  displaySaveName: Boolean
  displayStepsHeader: Boolean
  enabled: Boolean
  globalOptions: [String!]
  includeAllBrandItemsInCache: Boolean
  initialStepIfLoadingSave: Float
  isReloadFromLocalStorageEnabled: Boolean
  logoLinkOnClick: String
  logoPictureReference: String
  name: String!
  persistentVariables: [BrandParametersTunnelPersistentVariablesInput!]
  preload: Boolean
  savePanelParameters: BrandParametersTunnelSavePanelParametersInput
  steps: [BrandParametersTunnelStepInput!]
  wallParameters: BrandParametersTunnelWallParametersInput
}

type CreateOneBrandParametersTunnelPayload {
  """Created document"""
  record: BrandParametersTunnel

  """Document ID"""
  recordId: MongoID
}

type CreateOneBrandPayload {
  """Created document"""
  record: Brand

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneCatalogFolderInput {
  associatedEcotaxePriceTableId: MongoID
  associatedPriceTableId: MongoID
  brand: MongoID!
  createdAt: Date
  iconId: Int
  metadata: [CatalogFolderMetadataInput]
  name: String!
  parent: MongoID
  public: Boolean
  publicNameTranslations: Translations
  published: Boolean
  rootId: MongoID
  sharedWithIds: [MongoID]
  thumbnailId: String
  thumbnailUrl: String
  tiles: [CatalogFolderTilesInput]
  tilesBackgroundColor: String
  tilesColumnAmount: Float
  tilesColumnGap: Float
  tilesColumnSizes: [Float]
  tilesRowGap: Float
  tilesRowSizes: [Float]
  type: EnumCatalogFolderType
  updatedAt: Date
  virtual: Boolean
}

type CreateOneCatalogFolderPayload {
  """Created document"""
  record: CatalogFolder

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneCustomerInput {
  address: String
  brandId: MongoID!
  city: String
  createdAt: Date
  createdById: MongoID!
  email: String
  firstname: String!
  firstnameAdditional: String
  gender: String!
  genderAdditional: String
  mobilePhone: String
  phone: String
  surname: String!
  surnameAdditional: String
  updatedAt: Date
  zipCode: String
}

type CreateOneCustomerPayload {
  """Created document"""
  record: Customer

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneItemInput {
  articleCode: String
  brandId: MongoID!
  buildingWingInfos: String
  canBeCutAlongHeight: Boolean
  canBeCutAlongLength: Boolean
  canBeCutAlongWidth: Boolean
  canBeDroppedOnZones: [EnumItemCanBeDroppedOnZones!]
  categoriesIds: [MongoID!]
  compositeInfos: String
  consideredAsDroppableZones: [EnumItemConsideredAsDroppableZones!]
  createdAt: Date
  createdById: MongoID
  customisationByItemsGroupId: MongoID
  customisationCoverPlanes: [ItemCustomisationCoverPlanesInput!]
  customisationMaterials: [ItemCustomisationMaterialsInput!]
  customisationSubObjects: [ItemCustomisationSubObjectsInput!]
  customisationSymbolicRepresentation: ItemCustomisationSymbolicRepresentationInput
  deleted: Boolean
  ean: String
  factSheet: ItemFactSheetInput
  guardrailInformations: ItemGuardrailInformationsInput
  metadata: [ItemMetadataInput!]
  minimumPricedDimensions: ItemMinimumPricedDimensionsInput
  modelUrl: String
  name: String!
  outputAssets: ItemOutputAssetsInput
  physicalHeight: String
  physicalLength: String
  physicalWidth: String
  pillarInformations: ItemPillarInformationsInput
  priceCoefExclusion: Boolean
  priceGeneration: EnumItemPriceGeneration
  priceUnit: EnumItemPriceUnit
  publicNameTranslations: Translations
  roofInformations: ItemRoofInformationsInput
  scrapperTag: String
  slug: String
  stairsInformations: ItemStairsInformationsInput
  tags: [String!]
  thumbnailUrl: String
  tooltip3DTranslations: Translations
  type: EnumItemType
  updatedAt: Date
  updatedById: MongoID
  vegetationInformations: ItemVegetationInformationsInput
  wallInformations: ItemWallInformationsInput
}

type CreateOneItemPayload {
  """Created document"""
  record: Item

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneItemsGroupInput {
  brandId: MongoID!
  choiceIsMandatory: Boolean!
  generated: Boolean
  itemsIds: [MongoID!]!
  name: String!
  option: ItemsGroupOptionInput
  publicNameTranslations: Translations
  shouldBeOpenInGUI: Boolean
  thumbnailPictureName: String
  type: EnumItemsGroupType!
}

type CreateOneItemsGroupPayload {
  """Created document"""
  record: ItemsGroup

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOnePaletteInput {
  brandId: MongoID!
  colors: [PaletteColorsInput]
  name: String!
  type: EnumPaletteType!
}

type CreateOnePalettePayload {
  """Created document"""
  record: Palette

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOnePictureInput {
  brandId: MongoID!
  name: String!
  size: Float!
  url: String!
}

type CreateOnePicturePayload {
  """Created document"""
  record: Picture

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOnePlannedMaintenanceInput {
  durationHours: Float!
  reasonTranslations: Translations
  startDate: Date!
}

type CreateOnePlannedMaintenancePayload {
  """Created document"""
  record: PlannedMaintenance

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOnePriceTableInput {
  brandId: MongoID!
  currencyName: String
  displayEan: Boolean
  globalDiscount: Float
  moniker: String
  multiplyingCoefficient: Float
  name: String
  prices: [PriceTablePricesInput]
  symbol: String
  vatRate: Float
}

type CreateOnePriceTablePayload {
  """Created document"""
  record: PriceTable

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneProductScanInput {
  creationDate: Date
  metallic: Float!
  notes: String
  productName: String!
  reference: String!
  scans: [ProductScanScansInput]
  size: ProductScanSizeInput
  state: EnumProductScanState
  thumbnail: ProductScanScansInputImagesInput
}

type CreateOneProductScanPayload {
  """Created document"""
  record: ProductScan

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOnePromoterApartmentUnitInput {
  brandId: MongoID!
  buildingNumber: String
  comment: String
  floor: String
  metadata: Metadata
  purchaserFirstName: String
  purchaserMail: String
  purchaserSurname: String
  saveId: MongoID
  state: EnumPromoterApartmentUnitState
  unitNumber: String!
  unitTypeId: MongoID!
}

type CreateOnePromoterApartmentUnitPayload {
  """Created document"""
  record: PromoterApartmentUnit

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOnePromoterApartmentUnitTypeInput {
  brandId: MongoID!
  currentVersion: Int
  descriptionJson: JSONObject
  history: [PromoterApartmentUnitTypeHistoryInput!]
  metadata: Metadata
  name: String!
  programId: MongoID!
  saveFolderId: MongoID
  state: EnumPromoterApartmentUnitTypeState
}

type CreateOnePromoterApartmentUnitTypePayload {
  """Created document"""
  record: PromoterApartmentUnitType

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOnePromoterProgramInput {
  address: String
  brandId: MongoID!
  city: String
  isArchived: Boolean
  itemFilter: PromoterProgramItemFilterInput
  metadata: Metadata
  name: String!
  planEditor: PromoterProgramPlanEditorInput
  planUrls: [String!]
  promoterId: MongoID
  saveFolderId: MongoID
  slug: String
  state: EnumPromoterProgramState
  stylePresetGroupId: MongoID
  zipCode: Float
}

type CreateOnePromoterProgramPayload {
  """Created document"""
  record: PromoterProgram

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneSalesRecordInput {
  finalCustomerMetadata: Metadata
  metadata: Metadata
  saveId: MongoID!
}

type CreateOneSalesRecordPayload {
  """Created document"""
  record: SalesRecord

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneSaveFolderInput {
  brandId: MongoID!
  createdAt: Date
  name: String!
  parentId: MongoID
  slug: String
  updatedAt: Date
}

type CreateOneSaveFolderPayload {
  """Created document"""
  record: SaveFolder

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneSaveInput {
  additionalInfo: JSON
  apartmentUnitTypeId: MongoID
  brandId: MongoID
  chosenStylePresetId: MongoID
  createdFromAP: MongoID
  customerId: MongoID
  data: String!
  dataFormatVersion: Int
  dataUrl: String
  description: String
  isReadonly: Boolean
  isTemplate: Boolean
  metadata: Metadata
  moduleKitchenCustomData: String
  name: String!
  parent: MongoID
  quantitySurveyJSON: String
  saveFolderId: MongoID
  storageBytesUsage: Float
  stylePresetGroupId: MongoID
  tags: [String]
  thumbnailUrl: String
  tunnelState: JSON
  type: EnumSaveType
  visitViewpoints: [SaveVisitViewpointsInput!]
}

type CreateOneSavePayload {
  """Created document"""
  record: Save

  """Document ID"""
  recordId: MongoID
  updateToken: String
}

""""""
input CreateOneSavesGroupInput {
  brandId: MongoID!
  name: String!
  publicNameTranslations: Translations
  savesIds: [MongoID]
  thumbnailPictureName: String
  type: EnumSavesGroupType!
}

type CreateOneSavesGroupPayload {
  """Created document"""
  record: SavesGroup

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneSettingInput {
  _id: String
  role: String
  value: JSON
}

type CreateOneSettingPayload {
  """Created document"""
  record: Setting

  """Document ID"""
  recordId: String
}

""""""
input CreateOneStylePresetGroupInput {
  brandId: MongoID!
  name: String!
  stylePresetIds: [MongoID]
}

type CreateOneStylePresetGroupPayload {
  """Created document"""
  record: StylePresetGroup

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneStylePresetInput {
  brandId: MongoID!
  createdAt: Date
  customisationPresets: [StylePresetCustomisationPresetsInput]
  name: String!
  publicNameTranslations: Translations
  updatedAt: Date
}

type CreateOneStylePresetPayload {
  """Created document"""
  record: StylePreset

  """Document ID"""
  recordId: MongoID
}

""""""
input CreateOneTutorialInput {
  brandId: MongoID!
  displayOnlyOnce: Boolean
  name: String!
  points: [TutorialPointInput!]
}

type CreateOneTutorialPayload {
  """Created document"""
  record: Tutorial

  """Document ID"""
  recordId: MongoID
}

type Customer {
  _id: MongoID!
  address: String
  brand: Brand!
  brandId: MongoID!
  city: String
  createdAt: Date
  createdById: MongoID!
  email: String
  firstname: String!
  firstnameAdditional: String
  gender: String!
  genderAdditional: String
  mobilePhone: String
  phone: String
  surname: String!
  surnameAdditional: String
  updatedAt: Date
  zipCode: String
}

"""A connection to a list of items."""
type CustomerConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [CustomerEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CustomerEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Customer!
}

"""List of items with pagination."""
type CustomerPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Customer!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

scalar Date

type DocumentAssemblerManifestQueueJob implements Job {
  """A unique ID for the job."""
  _id: String!

  """When the job was created."""
  createdAt: Date!

  """When the job finished (completed or failed)."""
  finishedAt: Date

  """The name-type of the job. A queue may have multiple job types."""
  name: String!

  """When the job was processed (started)."""
  processedAt: Date

  """Job queue this job is in."""
  queue: String!

  """
  Resulting value of a completed job. Null if the job is not in completed state.
  """
  result: OutputDocumentManifest!
  state: JobState!
}

type DocumentAssemblerQueueJob implements Job {
  """A unique ID for the job."""
  _id: String!

  """When the job was created."""
  createdAt: Date!

  """When the job finished (completed or failed)."""
  finishedAt: Date

  """The name-type of the job. A queue may have multiple job types."""
  name: String!

  """When the job was processed (started)."""
  processedAt: Date

  """The last progress value the job signalled, if any."""
  progress: DocumentAssemblerQueueProgress

  """Job queue this job is in."""
  queue: String!

  """
  Resulting value of a completed job. Null if the job is not in completed state.
  """
  result: DocumentAssemblerQueueResult
  state: JobState!
}

type DocumentAssemblerQueueProgress {
  message: String!

  """
  Progress of the current step, described by the 'message' property, as a percentage.
  """
  stepProgress: Int
}

type DocumentAssemblerQueueResult {
  manifest: OutputDocumentManifest!
  pdfUrl: String!
}

enum EnumAccessPointSupportButtonIcon {
  chat
  info
  life_ring
  question
}

enum EnumAccessPointSupportButtonType {
  crisp
  disabled
  link
}

enum EnumAppletEncoding {
  brotli
  gzip
  none
}

enum EnumBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupButtonType {
  YES_NO
}

enum EnumBrandParametersScrapperPostManualSaveTriggerStepsType {
  LAUNCH_SCRAPPER
  TRIGGER_POPUP
}

enum EnumBrandParametersScrapperStepsMapPdfReportGeneratorPayloadType {
  base64
  url
}

enum EnumBrandParametersScrapperStepsMapReportGeneratorMode {
  document_assembler
  html
}

enum EnumBrandParametersScrapperStepsStepType {
  filter
  map
  none
  tap
}

enum EnumBrandParametersScrapperStepsTapSendEmailEmailSourceType {
  dynamic
  static
}

enum EnumBrandParametersScrapperStepsVerbFilter {
  EXCLUDE_BY_TAG
  INCLUDED_BY_TAG
  NONE
}

enum EnumBrandParametersScrapperStepsVerbMap {
  MAP_ALSAPAN_FORM_DATA_TO_SURFACE_PRODUCT
  MAP_LIST_ITEMS
  MAP_PDF_REPORT
  MAP_PLINTH_CALCULATOR
  MAP_PRICE_TABLE_TO_PRODUCTS
  MAP_PROCEDURAL_FURNITURE_TO_PRODUCT_DATASET
  MAP_REPORT
  MAP_SURFACES_TO_PRODUCTS
  MAP_TERRACE_TO_PRODUCTS
  MAP_TO_EAN_AND_PRICE
  MAP_TO_EXPORT_DATA_JSON
  MAP_TO_STANDARD_API_PAYLOAD
  NONE
}

enum EnumBrandParametersScrapperStepsVerbTap {
  NONE
  TAP_API
  TAP_EMAIL
  TAP_LIVE_PRICE
  TAP_PROMOTER_APARTMENT_UNIT_TYPE_VALIDATION
  TAP_SALES_RECORD
}

enum EnumBrandParametersTunnelStepsModule {
  auth
  benchmark
  building
  cameraRail
  catalog
  customView
  form
  furnitureMeasuresViewer
  furnituresOptions
  home
  panoramicVisit
  photographyStudio
  plan
  report
  visit
}

enum EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataType {
  number
  string
}

enum EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataType {
  number
  string
}

enum EnumBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataType {
  number
  string
}

enum EnumCatalogFolderTilesHorizontalTextAlignement {
  left
  middle
  right
}

enum EnumCatalogFolderTilesType {
  construction
  folder
  image
  include
  item
  itemsGroup
  stylePreset
  text
  virtualFolder
}

enum EnumCatalogFolderTilesVerticalTextAlignement {
  bottom
  middle
  top
}

enum EnumCatalogFolderType {
  construction
  item
}

enum EnumContactInformationState {
  InProgress
  Treated
  WaitingForTreatement
}

enum EnumItemCanBeDroppedOnZones {
  ceiling
  door
  exterior_wall
  floor
  table
  wall
  window
}

enum EnumItemConsideredAsDroppableZones {
  ceiling
  exterior_wall
  floor
  table
  wall
}

enum EnumItemCustomisationCoverPlanesMode {
  AlwaysPlace
  CutHole
  OnDemand
  OnDemandAndFill
  PlaceWhenOnFloor
}

enum EnumItemCustomisationMaterialsType {
  Material
  Palette
}

enum EnumItemCustomisationSubObjectsHooksType {
  BottomLeft
  BottomMiddle
  BottomRight
  Center
  CenterLeft
  CenterRight
  Delegate
  Pivot
  TopLeft
  TopMiddle
  TopRight
}

enum EnumItemCustomisationSymbolicRepresentationColors {
  defaultColor
  wallItemColor
}

enum EnumItemCustomisationSymbolicRepresentationDoorType {
  doubleDoor
  drawer
  leftDoor
  none
  rightDoor
}

enum EnumItemCustomisationSymbolicRepresentationSymbolicIcon {
  bathroomSink
  bathtub
  builtInMicroWave
  builtInOven
  cableOutlet
  cooktop
  doubleElectricalOutlet
  electricalOutlet
  freeStandingMicroWave
  heating
  none
  shower
  sink
  towelHolder
  wc
}

enum EnumItemCustomisationSymbolicRepresentationSymbolicIconShape {
  big
  circle
  none
  oneBasin
  rectangular
  round
  roundOneBasin
  roundTwoBasins
  small
  smallBasin
  square
  twoBasins
}

enum EnumItemCustomisationSymbolicRepresentationSymbolicIconSubType {
  angle
  bidet
  cabin
  classic
  classicBidet
  handWashTank
  heatPump
  heater
  hotWaterTank
  none
  oneDrainer
  onePerson
  pedestalSink
  pelletBurning
  towelDryer
  twoDrainer
  twoPersons
  wallMounted
  wallMountedBidet
}

enum EnumItemCustomisationSymbolicRepresentationType {
  equipments
  implementationFaceView
  implementationTopView
}

enum EnumItemGuardrailInformationsMeshesOptionsShape {
  n_a
  rectangular
  round
}

enum EnumItemGuardrailInformationsMeshesType {
  full_length
  pillars
  pillars_inside
  pillars_interval
  pillars_outside
}

enum EnumItemPillarInformationsMaterialsType {
  capital_and_base
  shaft
}

enum EnumItemPillarInformationsModelsType {
  base
  capital
  shaft
}

enum EnumItemPriceGeneration {
  default
  exclude_from_generation
  generate_price_entry
}

enum EnumItemPriceUnit {
  by_piece
  by_the_linear_meter
  per_square_meter
}

enum EnumItemRoofInformationsEavesStyleType {
  concreteCasing
  cornice
  genoise
  undefined
  visibleRafters
  woodenCasing
}

enum EnumItemRoofInformationsFramingPiecesType {
  all
  mansard
  simple
}

enum EnumItemRoofInformationsFramingType {
  prefabricated_trusses
  with_trusses
  without_trusses
}

enum EnumItemRoofInformationsMaterialsType {
  decoWood
  gravel
  lathWood
  seal
  solarPanelCells
  solarPanelFrame
  tiles
  tiles_3D
  wood
  zinc
}

enum EnumItemRoofInformationsModelsType {
  barge_board_tile_left
  barge_board_tile_right
  barge_board_tile_top
  downpipe
  downpipe_drop
  downpipe_knee_60
  downpipe_outlet
  hip_tile
  leak
  leak_end
  leak_hook
  leak_knee_90
  purlin_bottom
  purlin_intermediate
  purlin_ridge
  ridge_tile
  ridge_tile_end
  tile
}

enum EnumItemStairsInformationsMaterialsType {
  railing
  smallPosts
  stairs
  treats
}

enum EnumItemStairsInformationsModelsType {
  handrail
  post
  smallpost
}

enum EnumItemType {
  aperture
  buildingWing
  coating
  composite
  furniture
  guardrail
  panorama
  pillar
  roof
  stairs
  vegetation
  virtual
  wall
}

enum EnumItemWallInformationsClass {
  ceiling_covering
  floor_covering
  floor_structure
  wall_covering
  wall_structure
}

enum EnumItemWallInformationsMeshesBuildingMaterial {
  mat101_bricks
  mat102_blocks
  mat103_concrete
  mat104_ferroconcrete
  mat105_cut_stone
  mat106_marble
  mat201_steel
  mat202_brass
  mat203_aluminium
  mat204_cast_iron
  mat205_zinc
  mat301_wood_rough
  mat302_wood_finished
  mat303_plywood
  mat304_wood_fiber
  mat401_cement
  mat402_plaster
  mat403_tiles
  mat404_carpeting
  mat501_insulation
  mat502_insulation_rigid
  mat503_sealing
  mat504_glass
  mat505_plastic
  mat506_roofing
  mat601_earth
  mat602_gravel
  mat603_sand
  mat999_empty
}

enum EnumItemWallInformationsMeshesOptionsShape {
  n_a
  rectangular
  round
}

enum EnumItemWallInformationsMeshesPlacingBeamDirection {
  x
  z
}

enum EnumItemWallInformationsMeshesPlacingBottomElevationReference {
  ceiling
  ceiling_story_below
  cutElevation
  floor
  floor_next_story
  lintel
  sill
  terrain
}

enum EnumItemWallInformationsMeshesPlacingRepetitionFilter {
  ends
  intermediate
  intermediate_and_ends
}

enum EnumItemWallInformationsMeshesPlacingStartDepthReference {
  axis
  center
  opposite_surface
  surface
}

enum EnumItemWallInformationsMeshesType {
  ceiling_beam
  ceiling_interval
  ceiling_layer
  diagonal_alternating
  diagonal_alternating_reverse
  diagonal_ascending
  diagonal_descending
  full_length
  partial_wall
  pillars
  pillars_interval
}

enum EnumItemsGroupOptionPositionsPlacement {
  BottomLeft
  BottomLeftSticky
  BottomMiddle
  BottomMiddleSticky
  BottomRight
  BottomRightSticky
  Center
  CenterLeft
  CenterLeftSticky
  CenterRight
  CenterRightSticky
  CenterSticky
  Pivot
  TopLeft
  TopLeftSticky
  TopMiddle
  TopMiddleSticky
  TopRight
  TopRightSticky
}

enum EnumItemsGroupOptionPositionsRotation {
  Clockwise90deg
  CounterClockwise90deg
  Full180deg
  None
}

enum EnumItemsGroupType {
  layer
  material_option
  option
  plan
  product_line
  substitute
  suppression
  variation
}

enum EnumPaletteType {
  Free
  Pantone
  RAL
}

enum EnumPipelineJobState {
  broken_reference
  deadline_active
  deadline_completed
  deadline_failed
  deadline_pending
  deadline_suspended
  deadline_unknown
  post_process_completed
  post_process_failed
}

enum EnumPipelineJobType {
  convert_pbr_material_to_asset_bundle
}

enum EnumProductScanScansType {
  Substance_8Angular_1Diffuse
}

enum EnumProductScanState {
  archived
  conversion_validated
  item_created
  scan_validated
  to_complete
  to_convert
  to_polish
  to_recreate
  to_validate
}

enum EnumPromoterApartmentUnitState {
  created
  submitted
  validated
}

enum EnumPromoterApartmentUnitTypeHistoryState {
  created
  rejected
  submitted
  validated
  validated_with_reserve
}

enum EnumPromoterApartmentUnitTypeState {
  created
  rejected
  submitted
  validated
  validated_with_reserve
}

enum EnumPromoterProgramState {
  created
  partially_validated
  validated
}

enum EnumSaveType {
  legacy
  plan
}

enum EnumSavesGroupType {
  product_line
}

enum EnumStylePresetCustomisationPresetsRotationCondition {
  any
  clockwise_90_deg
  counterclockwise_90_deg
  none
  not_applicable
}

enum EnumTutorialPointTarget {
  camera_3d
  cart
  catalog_button
  elevator_3d
  elevator_plan
  fullscreen_button
  label_toggle
  measure_toggle
  none
  plan_zoom_slider
  project_button
  quest
  renderer_buttons
  right_side_toolbar
  right_side_toolbar_layers
  synchronisation_button
  toolbar
  undo_redo
  upper_navigation_bar
  wind_rose
}

input FilterFindManyAccessPointBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyAccessPointInput {
  AND: [FilterFindManyAccessPointInput!]
  OR: [FilterFindManyAccessPointInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyAccessPointOperatorsInput
  areSavesPubliclyAvailableById: Boolean
  authorizedCatalogIds: [MongoID]
  brandId: MongoID
  ecotaxePriceTableId: MongoID
  name: String
  parametersScrapperId: MongoID
  parametersTunnelId: MongoID
  priceTableId: MongoID
  supportButton: FilterFindManyAccessPointSupportButtonInput
}

input FilterFindManyAccessPointNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyAccessPointOperatorsInput {
  _id: FilterFindManyAccessPoint_idOperatorsInput
  brandId: FilterFindManyAccessPointBrandIdOperatorsInput
  name: FilterFindManyAccessPointNameOperatorsInput
}

""""""
input FilterFindManyAccessPointSupportButtonInput {
  icon: EnumAccessPointSupportButtonIcon
  tooltipTranslations: Translations
  type: EnumAccessPointSupportButtonType
  value: String
}

input FilterFindManyAccessPoint_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyAppletInput {
  AND: [FilterFindManyAppletInput!]
  OR: [FilterFindManyAppletInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyAppletOperatorsInput
  encoding: EnumAppletEncoding
  indexedDbResetVersion: String
  intVersion: Float
  readableVersion: String
  redirectedVersion: String
  version: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyAppletOperatorsInput {
  _id: FilterFindManyApplet_idOperatorsInput
  version: FilterFindManyAppletVersionOperatorsInput
}

input FilterFindManyAppletVersionOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyApplet_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyBarcodeCollectionBarcodeReferencesInput {
  _id: MongoID
  ean: String
  id: String
}

input FilterFindManyBarcodeCollectionCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyBarcodeCollectionInput {
  AND: [FilterFindManyBarcodeCollectionInput!]
  OR: [FilterFindManyBarcodeCollectionInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyBarcodeCollectionOperatorsInput
  barcodeReferences: [FilterFindManyBarcodeCollectionBarcodeReferencesInput!]

  """Filter the BarcodeCollection by their parent brand id"""
  brandId: MongoID
  createdAt: Date
  createdById: MongoID
  name: String
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyBarcodeCollectionOperatorsInput {
  _id: FilterFindManyBarcodeCollection_idOperatorsInput
  createdById: FilterFindManyBarcodeCollectionCreatedByIdOperatorsInput
}

input FilterFindManyBarcodeCollection_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyBrandColorsInput {
  dataProtection: String
  legalNotice: String
  loadingScreenBackground: String
  loadingScreenLogoPicture: String
  loadingScreenProgressBarBackground: String
  loadingScreenProgressBarBorder: String
  loadingScreenProgressBarContent: String
  loadingScreenText: String
  meshes: FilterFindManyBrandColorsMeshesInput
  planElement: FilterFindManyBrandColorsPlanElementInput
  primary: String
  questHeaderBackground: String
  questHeaderBody: String
  questHeaderTitle: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

""""""
input FilterFindManyBrandColorsMeshesInput {
  wallCut: String
}

""""""
input FilterFindManyBrandColorsPlanElementInput {
  floor: String
  wall: String
  window: String
}

""""""
input FilterFindManyBrandInput {
  AND: [FilterFindManyBrandInput!]
  OR: [FilterFindManyBrandInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyBrandOperatorsInput
  colors: FilterFindManyBrandColorsInput
  createdAt: Date
  name: String

  """Only seek for brand the logged-in user is member of."""
  onlyMine: Boolean
  promoterWebsiteConfiguration: FilterFindManyBrandPromoterWebsiteConfigurationInput
  satelliteConfiguration: FilterFindManyBrandSatelliteConfigurationInput
  shareCode: String
  slug: String
  updatedAt: Date
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyBrandOperatorsInput {
  _id: FilterFindManyBrand_idOperatorsInput
  shareCode: FilterFindManyBrandShareCodeOperatorsInput
  slug: FilterFindManyBrandSlugOperatorsInput
}

""""""
input FilterFindManyBrandParametersPricingInput {
  AND: [FilterFindManyBrandParametersPricingInput!]
  OR: [FilterFindManyBrandParametersPricingInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyBrandParametersPricingOperatorsInput
  brandId: MongoID
  enabled: Boolean
  useArticleCode: Boolean
  useEAN: Boolean
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyBrandParametersPricingOperatorsInput {
  _id: FilterFindManyBrandParametersPricing_idOperatorsInput
}

input FilterFindManyBrandParametersPricing_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyBrandParametersScrapperInput {
  AND: [FilterFindManyBrandParametersScrapperInput!]
  OR: [FilterFindManyBrandParametersScrapperInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyBrandParametersScrapperOperatorsInput
  allowAnonymousSave: Boolean
  brandId: MongoID
  enabled: Boolean
  export: Boolean
  geometry: Boolean
  name: String
  objects: Boolean
  postManualSaveTriggerSteps: [FilterFindManyBrandParametersScrapperPostManualSaveTriggerStepsInput!]
  screenshots: Boolean
  steps: [FilterFindManyBrandParametersScrapperStepsInput!]
  watermark: FilterFindManyBrandParametersScrapperWatermarkInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyBrandParametersScrapperOperatorsInput {
  _id: FilterFindManyBrandParametersScrapper_idOperatorsInput
}

""""""
input FilterFindManyBrandParametersScrapperPostManualSaveTriggerStepsInput {
  _id: MongoID
  triggerPopup: FilterFindManyBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput
  type: EnumBrandParametersScrapperPostManualSaveTriggerStepsType
}

""""""
input FilterFindManyBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput {
  _id: MongoID
  buttonType: EnumBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupButtonType
  textTranslations: Translations
  titleTranslations: Translations
  yesNoButtons: FilterFindManyBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput
}

""""""
input FilterFindManyBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput {
  stateProperty: String
}

""""""
input FilterFindManyBrandParametersScrapperStepsFilterInput {
  expression: String
}

""""""
input FilterFindManyBrandParametersScrapperStepsInput {
  _id: MongoID
  filter: FilterFindManyBrandParametersScrapperStepsFilterInput
  map: FilterFindManyBrandParametersScrapperStepsMapInput
  stepType: EnumBrandParametersScrapperStepsStepType
  stepVerb: String
  tap: FilterFindManyBrandParametersScrapperStepsTapInput
  verbFilter: EnumBrandParametersScrapperStepsVerbFilter
  verbMap: EnumBrandParametersScrapperStepsVerbMap
  verbTap: EnumBrandParametersScrapperStepsVerbTap
}

""""""
input FilterFindManyBrandParametersScrapperStepsMapInput {
  kitchenPricer: FilterFindManyBrandParametersScrapperStepsMapKitchenPricerInput
  payloadGenerator: FilterFindManyBrandParametersScrapperStepsMapPayloadGeneratorInput
  pdfReportGenerator: FilterFindManyBrandParametersScrapperStepsMapPdfReportGeneratorInput
  plinthCalculator: FilterFindManyBrandParametersScrapperStepsMapPlinthCalculatorInput
  reportGenerator: FilterFindManyBrandParametersScrapperStepsMapReportGeneratorInput
  terracePricer: FilterFindManyBrandParametersScrapperStepsMapTerracePricerInput
}

""""""
input FilterFindManyBrandParametersScrapperStepsMapKitchenPricerInput {
  apiToken: String
  apiUrl: String
  barcodeCollectionId: MongoID
  projectBaseUrl: String
}

""""""
input FilterFindManyBrandParametersScrapperStepsMapPayloadGeneratorInput {
  addSaveName: Boolean
  addUpdateToken: Boolean
  dynamicParameterForTunnelStateInformation: String
  tunnelStateKeys: [String!]
}

""""""
input FilterFindManyBrandParametersScrapperStepsMapPdfReportGeneratorInput {
  payloadType: EnumBrandParametersScrapperStepsMapPdfReportGeneratorPayloadType
}

""""""
input FilterFindManyBrandParametersScrapperStepsMapPlinthCalculatorInput {
  bigPlinthId: MongoID
  littlePlinthId: MongoID
}

""""""
input FilterFindManyBrandParametersScrapperStepsMapReportGeneratorInput {
  chunksManifest: [FilterFindManyInputDocumentChunkManifestInput!]
  documentName: String
  htmlTemplate: String
  mode: EnumBrandParametersScrapperStepsMapReportGeneratorMode
}

""""""
input FilterFindManyBrandParametersScrapperStepsMapTerracePricerInput {
  itemsCatalogId: MongoID
}

""""""
input FilterFindManyBrandParametersScrapperStepsTapInput {
  outputToApi: FilterFindManyBrandParametersScrapperStepsTapOutputToApiInput
  sendEmail: FilterFindManyBrandParametersScrapperStepsTapSendEmailInput
}

""""""
input FilterFindManyBrandParametersScrapperStepsTapOutputToApiInput {
  apiToken: String
  apiUrl: String
  signPayload: Boolean
}

""""""
input FilterFindManyBrandParametersScrapperStepsTapSendEmailInput {
  attachmentName: String
  dynamicParameterEmailAdress: String
  emailSourceType: EnumBrandParametersScrapperStepsTapSendEmailEmailSourceType
  sendReportAsAttachment: Boolean
  staticEmailAdress: String
  subject: String
  template: String
}

""""""
input FilterFindManyBrandParametersScrapperWatermarkInput {
  alpha: Float
  color: String
  enabled: Boolean
  picture: String
  repetition: Float
}

input FilterFindManyBrandParametersScrapper_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyBrandParametersTunnelApertureParametersInput {
  doorClassicDefaultItem: String
  doorEntryDefaultItem: String
  doorEntrySidelightDefaultItem: String
  doorExteriorCustomisationItemsGroupId: String
  doorInteriorCustomisationItemsGroupId: String
  doubleDoorDefaultItem: String
  doubleDoorlikeWindowDefaultItem: String
  doubleSwingDoorDefaultItem: String
  doubleWindowDefaultItem: String
  garageDoorDefaultItem: String
  simpleDoorlikeWindowDefaultItem: String
  slitWindowDefaultItem: String
  tripleDoorlikeWindowDefaultItem: String
  tripleWindowDefaultItem: String
  windowCustomisationItemsGroupId: String
  windowDefaultItem: String
}

""""""
input FilterFindManyBrandParametersTunnelColorsParametersInput {
  nameHelpAtlas: String
  nameOptionsAtlas: String
  nameToolsAtlas: String
  primary: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

""""""
input FilterFindManyBrandParametersTunnelCustomLinkButtonInput {
  link: String
  name: String
}

""""""
input FilterFindManyBrandParametersTunnelDefaultCameraParametersInput {
  visitCameraParameters: FilterFindManyBrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput
}

""""""
input FilterFindManyBrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput {
  defaultVisitFieldOfView: Float
}

""""""
input FilterFindManyBrandParametersTunnelDefaultCoatingParametersInput {
  defaultExteriorFlooringId: MongoID
  defaultGardenFlooringId: MongoID
  defaultInteriorFlooringId: MongoID
}

""""""
input FilterFindManyBrandParametersTunnelInput {
  AND: [FilterFindManyBrandParametersTunnelInput!]
  OR: [FilterFindManyBrandParametersTunnelInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyBrandParametersTunnelOperatorsInput
  apertureParameters: FilterFindManyBrandParametersTunnelApertureParametersInput
  brandId: MongoID
  colorsParameters: FilterFindManyBrandParametersTunnelColorsParametersInput
  customLinkButton: FilterFindManyBrandParametersTunnelCustomLinkButtonInput
  defaultCameraParameters: FilterFindManyBrandParametersTunnelDefaultCameraParametersInput
  defaultCoatingParameters: FilterFindManyBrandParametersTunnelDefaultCoatingParametersInput
  defaultDayTime: Float
  defaultSnapDistance: Float
  disableHeaderShadow: Boolean
  displayCartItemNumber: Boolean
  displayCustomisationTagFurnitureOptions: Boolean
  displayFurnitureSubstitutesOptions: Boolean
  displaySaveName: Boolean
  displayStepsHeader: Boolean
  enabled: Boolean
  globalOptions: [String!]
  includeAllBrandItemsInCache: Boolean
  initialStepIfLoadingSave: Float
  isReloadFromLocalStorageEnabled: Boolean
  logoLinkOnClick: String
  logoPictureReference: String
  name: String
  persistentVariables: [FilterFindManyBrandParametersTunnelPersistentVariablesInput!]
  preload: Boolean
  savePanelParameters: FilterFindManyBrandParametersTunnelSavePanelParametersInput
  steps: [FilterFindManyBrandParametersTunnelStepInput!]
  wallParameters: FilterFindManyBrandParametersTunnelWallParametersInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyBrandParametersTunnelOperatorsInput {
  _id: FilterFindManyBrandParametersTunnel_idOperatorsInput
}

""""""
input FilterFindManyBrandParametersTunnelPersistentVariablesInput {
  config: JSON
  name: String
}

""""""
input FilterFindManyBrandParametersTunnelSavePanelParametersInput {
  isCustomerModuleEnabled: Boolean
  isExportButtonEnabled: Boolean
}

""""""
input FilterFindManyBrandParametersTunnelStepInput {
  _id: MongoID
  analytics: FilterFindManyBrandParametersTunnelStepsAnalyticsInput
  config: JSON
  description: String
  htmlTemplate: String
  isShownInStepper: Boolean
  module: EnumBrandParametersTunnelStepsModule
  name: String
  publicNameTranslations: Translations
  resetTunnelOnActivation: Boolean
}

""""""
input FilterFindManyBrandParametersTunnelStepsAnalyticsChoiceReducerInput {
  isEnabled: Boolean
  stateProperties: [String]
}

""""""
input FilterFindManyBrandParametersTunnelStepsAnalyticsInput {
  choiceReducer: FilterFindManyBrandParametersTunnelStepsAnalyticsChoiceReducerInput
}

""""""
input FilterFindManyBrandParametersTunnelWallParametersExteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

""""""
input FilterFindManyBrandParametersTunnelWallParametersInput {
  doorLintelLevel: Float
  exteriorCeilingLintelHeight: Float
  exteriorWallThickness: FilterFindManyBrandParametersTunnelWallParametersExteriorWallThicknessInput
  floorHeight: Float
  groundFloorLevel: Float
  innerHeight: Float
  interiorCeilingLintelHeight: Float
  interiorWallThickness: FilterFindManyBrandParametersTunnelWallParametersInteriorWallThicknessInput
  optionsPanelWallConfig: FilterFindManyBrandParametersTunnelWallParametersOptionsPanelWallConfigInput
  windowLintelLevel: Float
  windowSillLevel: Float
}

""""""
input FilterFindManyBrandParametersTunnelWallParametersInteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

""""""
input FilterFindManyBrandParametersTunnelWallParametersOptionsPanelWallConfigInput {
  displayOnlyWallType: Boolean
  displayWallHeightExteriorFloor: Boolean
  displayWallHeightInteriorFloor: Boolean
  displayWallThicknessDropdown: Boolean
  displayWallThicknessInput: Boolean
  usePartitionLabelForInteriorWall: Boolean
}

input FilterFindManyBrandParametersTunnel_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyBrandPromoterWebsiteConfigurationInput {
  acquirerValidateUnitAccessPointId: MongoID
  metadataConfiguration: FilterFindManyBrandPromoterWebsiteConfigurationMetadataConfigurationInput
  operatorTypeAccessPointId: MongoID
  promoterValidateTypeAccessPointId: MongoID
  unitTypeSaveModelId: MongoID
}

""""""
input FilterFindManyBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataType
}

""""""
input FilterFindManyBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataType
}

""""""
input FilterFindManyBrandPromoterWebsiteConfigurationMetadataConfigurationInput {
  apartmentUnitMetadata: [FilterFindManyBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput!]
  apartmentUnitTypeIdMetadataKey: String
  apartmentUnitTypeMetadata: [FilterFindManyBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput!]
  programMetadata: [FilterFindManyBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput!]
}

""""""
input FilterFindManyBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataType
}

""""""
input FilterFindManyBrandSatelliteConfigurationInput {
  satelliteUrl: String
}

input FilterFindManyBrandShareCodeOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyBrandSlugOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyBrand_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyCatalogFolderInput {
  AND: [FilterFindManyCatalogFolderInput!]
  OR: [FilterFindManyCatalogFolderInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCatalogFolderOperatorsInput
  associatedEcotaxePriceTableId: MongoID
  associatedPriceTableId: MongoID
  brand: MongoID

  """Filter catalogs by parent brand id."""
  brandId: MongoID
  createdAt: Date
  iconId: Int

  """Filter root catalogs only."""
  isCatalogRoot: Boolean
  metadata: [FilterFindManyCatalogFolderMetadataInput]
  name: String
  parent: MongoID

  """Filter catalogs by parent id."""
  parentId: MongoID
  public: Boolean
  publicNameTranslations: Translations
  published: Boolean
  rootId: MongoID
  sharedWithIds: [MongoID]

  """Filter catalogs that are shared with you."""
  sharedWithMe: Boolean
  thumbnailId: String
  thumbnailUrl: String
  tiles: [FilterFindManyCatalogFolderTilesInput]
  tilesBackgroundColor: String
  tilesColumnAmount: Float
  tilesColumnGap: Float
  tilesColumnSizes: [Float]
  tilesRowGap: Float
  tilesRowSizes: [Float]
  type: EnumCatalogFolderType
  updatedAt: Date
  virtual: Boolean
}

""""""
input FilterFindManyCatalogFolderMetadataInput {
  _id: MongoID
  key: String
  value: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyCatalogFolderOperatorsInput {
  _id: FilterFindManyCatalogFolder_idOperatorsInput
}

""""""
input FilterFindManyCatalogFolderTilesImagePlacementInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

""""""
input FilterFindManyCatalogFolderTilesInput {
  _id: MongoID
  advancedTextTranslations: Translations
  backgroundColor: String
  backgroundOpacity: Float
  borderRadius: Float
  catalogSourceId: MongoID
  construction: MongoID
  descriptionTextSize: Float
  folder: MongoID
  hasShadow: Boolean
  height: Float
  horizontalTextAlignement: EnumCatalogFolderTilesHorizontalTextAlignement
  imageId: String
  imagePlacement: FilterFindManyCatalogFolderTilesImagePlacementInput
  imageUrl: String
  isImagePlacementFree: Boolean
  isShownOnDesktop: Boolean
  isShownOnMobile: Boolean
  item: MongoID
  itemsGroup: MongoID
  mask: Boolean
  maskColor: String
  maskOpacity: Float
  metadata: [FilterFindManyCatalogFolderTilesMetadataInput]
  posX: Float
  posY: Float
  saveSelectedInTunnelStateVariable: String
  stylePresetId: MongoID
  textColor: String
  textDescriptionTranslations: Translations
  textPadding: FilterFindManyCatalogFolderTilesTextPaddingInput
  textTitleTranslations: Translations
  titleTextColor: String
  titleTextSize: Float
  tooltipTranslations: Translations
  type: EnumCatalogFolderTilesType
  useAdvancedText: Boolean
  verticalTextAlignement: EnumCatalogFolderTilesVerticalTextAlignement
  width: Float
}

""""""
input FilterFindManyCatalogFolderTilesMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input FilterFindManyCatalogFolderTilesTextPaddingInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

input FilterFindManyCatalogFolder_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyCategoryInput {
  AND: [FilterFindManyCategoryInput!]
  OR: [FilterFindManyCategoryInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCategoryOperatorsInput
  name: JSON
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyCategoryOperatorsInput {
  _id: FilterFindManyCategory_idOperatorsInput
}

input FilterFindManyCategory_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyContactInformationInput {
  AND: [FilterFindManyContactInformationInput!]
  OR: [FilterFindManyContactInformationInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyContactInformationOperatorsInput
  date: Date
  email: String
  fullname: String
  interlocutor: String
  message: String
  phone: String
  state: EnumContactInformationState
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyContactInformationOperatorsInput {
  _id: FilterFindManyContactInformation_idOperatorsInput
}

input FilterFindManyContactInformation_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyCustomerAddressOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyCustomerBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyCustomerCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyCustomerEmailOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyCustomerFirstnameAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyCustomerFirstnameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyCustomerGenderAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyCustomerGenderOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterFindManyCustomerInput {
  AND: [FilterFindManyCustomerInput!]
  OR: [FilterFindManyCustomerInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCustomerOperatorsInput
  address: String
  brandId: MongoID
  city: String
  createdAt: Date
  createdById: MongoID
  email: String
  firstname: String
  firstnameAdditional: String
  gender: String
  genderAdditional: String
  mobilePhone: String
  phone: String
  surname: String
  surnameAdditional: String
  updatedAt: Date
  zipCode: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyCustomerOperatorsInput {
  _id: FilterFindManyCustomer_idOperatorsInput
  address: FilterFindManyCustomerAddressOperatorsInput
  brandId: FilterFindManyCustomerBrandIdOperatorsInput
  createdById: FilterFindManyCustomerCreatedByIdOperatorsInput
  email: FilterFindManyCustomerEmailOperatorsInput
  firstname: FilterFindManyCustomerFirstnameOperatorsInput
  firstnameAdditional: FilterFindManyCustomerFirstnameAdditionalOperatorsInput
  gender: FilterFindManyCustomerGenderOperatorsInput
  genderAdditional: FilterFindManyCustomerGenderAdditionalOperatorsInput
  surname: FilterFindManyCustomerSurnameOperatorsInput
  surnameAdditional: FilterFindManyCustomerSurnameAdditionalOperatorsInput
}

input FilterFindManyCustomerSurnameAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyCustomerSurnameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyCustomer_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

"""Configures the parameters of one or multiple chunks in the document."""
input FilterFindManyInputDocumentChunkManifestInput {
  """
  Render-time parameters object, implementing the chunk's parameters schema as given in the output manifest. The type of this property is loosely-typed in GraphQL, but verified at runtime against that schema. If the parameters passed are invalid against the schema, the chunk will be disabled and a manifest warning will be issued.
  """
  parameters: JSONObject

  """
  A path selector to target one or multiple chunks, since it can be a bash-like glob pattern, ex. "/my-section/my-chunk-123", "/my-section/my-chunk-*", "/**/my-chunk-*", etc.
  """
  path: String

  """
  Defines whether the chunk should be rendered in the document. If set "false" on a group chunk, it applies to its children recursively.
  """
  render: Boolean = true
}

input FilterFindManyItemCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyItemCustomisationCoverPlanesInput {
  _id: MongoID
  associatedItem: MongoID
  hideForSingleObject: Boolean
  mode: EnumItemCustomisationCoverPlanesMode
  nameId: String
  positions: FilterFindManyItemCustomisationCoverPlanesPositionsInput
  showOnStart: Boolean
  weight: Float
}

""""""
input FilterFindManyItemCustomisationCoverPlanesPositionsInput {
  above: Boolean
  behind: Boolean
  front: Boolean
  left: Boolean
  right: Boolean
}

""""""
input FilterFindManyItemCustomisationMaterialsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  associatedPalette: MongoID
  materials: [String]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  type: EnumItemCustomisationMaterialsType
  weight: Float
}

""""""
input FilterFindManyItemCustomisationSubObjectsHooksInput {
  _id: MongoID
  orientation: FilterFindManyItemCustomisationSubObjectsHooksOrientationInput
  position: FilterFindManyItemCustomisationSubObjectsHooksPositionInput
  type: EnumItemCustomisationSubObjectsHooksType
}

""""""
input FilterFindManyItemCustomisationSubObjectsHooksOrientationInput {
  x: Float
  y: Float
  z: Float
}

""""""
input FilterFindManyItemCustomisationSubObjectsHooksPositionInput {
  x: Float
  y: Float
  z: Float
}

""""""
input FilterFindManyItemCustomisationSubObjectsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  hooks: [FilterFindManyItemCustomisationSubObjectsHooksInput]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  weight: Float
}

""""""
input FilterFindManyItemCustomisationSymbolicRepresentationInput {
  _id: MongoID
  anglePositionIsRight: Boolean
  break3D: Boolean
  colors: EnumItemCustomisationSymbolicRepresentationColors
  displayDiagonals: Boolean
  doorType: EnumItemCustomisationSymbolicRepresentationDoorType
  drawerCount: Float
  symbolicIcon: EnumItemCustomisationSymbolicRepresentationSymbolicIcon
  symbolicIconShape: EnumItemCustomisationSymbolicRepresentationSymbolicIconShape
  symbolicIconSubType: EnumItemCustomisationSymbolicRepresentationSymbolicIconSubType
  type: EnumItemCustomisationSymbolicRepresentationType
}

input FilterFindManyItemDeletedOperatorsInput {
  ne: Boolean
}

""""""
input FilterFindManyItemFactSheetInput {
  _id: MongoID
  descriptionJson: JSONObject
  logoPicture: String
  pictureUrl: String
}

""""""
input FilterFindManyItemGuardrailInformationsInput {
  _id: MongoID
  meshes: [FilterFindManyItemGuardrailInformationsMeshesInput]
}

""""""
input FilterFindManyItemGuardrailInformationsMeshesDimensionsInput {
  height: Float
  length: Float
  thickness: Float
}

""""""
input FilterFindManyItemGuardrailInformationsMeshesInput {
  _id: MongoID
  dimensions: FilterFindManyItemGuardrailInformationsMeshesDimensionsInput
  materialId: MongoID
  meshId: MongoID
  options: FilterFindManyItemGuardrailInformationsMeshesOptionsInput
  placing: FilterFindManyItemGuardrailInformationsMeshesPlacingInput
  surface: FilterFindManyItemGuardrailInformationsMeshesSurfaceInput
  type: EnumItemGuardrailInformationsMeshesType
}

""""""
input FilterFindManyItemGuardrailInformationsMeshesOptionsInput {
  closeBottom: Boolean
  closeTop: Boolean
  shape: EnumItemGuardrailInformationsMeshesOptionsShape
}

""""""
input FilterFindManyItemGuardrailInformationsMeshesPlacingInput {
  elevation: Float
  endContraction: Float
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  placeEndPillarsDiagonally: Boolean
}

""""""
input FilterFindManyItemGuardrailInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
}

""""""
input FilterFindManyItemInput {
  AND: [FilterFindManyItemInput!]
  OR: [FilterFindManyItemInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyItemOperatorsInput
  articleCode: String
  brandId: MongoID
  buildingWingInfos: String
  canBeCutAlongHeight: Boolean
  canBeCutAlongLength: Boolean
  canBeCutAlongWidth: Boolean
  canBeDroppedOnZones: [EnumItemCanBeDroppedOnZones!]
  categoriesIds: [MongoID!]
  compositeInfos: String
  consideredAsDroppableZones: [EnumItemConsideredAsDroppableZones!]
  createdAt: Date
  createdById: MongoID
  customisationByItemsGroupId: MongoID
  customisationCoverPlanes: [FilterFindManyItemCustomisationCoverPlanesInput!]
  customisationMaterials: [FilterFindManyItemCustomisationMaterialsInput!]
  customisationSubObjects: [FilterFindManyItemCustomisationSubObjectsInput!]
  customisationSymbolicRepresentation: FilterFindManyItemCustomisationSymbolicRepresentationInput
  deleted: Boolean
  ean: String
  factSheet: FilterFindManyItemFactSheetInput
  guardrailInformations: FilterFindManyItemGuardrailInformationsInput
  metadata: [FilterFindManyItemMetadataInput!]
  minimumPricedDimensions: FilterFindManyItemMinimumPricedDimensionsInput
  modelUrl: String
  name: String
  outputAssets: FilterFindManyItemOutputAssetsInput
  physicalHeight: String
  physicalLength: String
  physicalWidth: String
  pillarInformations: FilterFindManyItemPillarInformationsInput
  priceCoefExclusion: Boolean
  priceGeneration: EnumItemPriceGeneration
  priceUnit: EnumItemPriceUnit
  publicNameTranslations: Translations
  roofInformations: FilterFindManyItemRoofInformationsInput
  scrapperTag: String
  slug: String
  stairsInformations: FilterFindManyItemStairsInformationsInput
  tags: [String!]
  thumbnailUrl: String
  tooltip3DTranslations: Translations
  type: EnumItemType
  updatedAt: Date
  updatedById: MongoID
  vegetationInformations: FilterFindManyItemVegetationInformationsInput
  wallInformations: FilterFindManyItemWallInformationsInput
}

""""""
input FilterFindManyItemMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input FilterFindManyItemMinimumPricedDimensionsInput {
  _id: MongoID
  depth: String
  width: String
}

input FilterFindManyItemNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyItemOperatorsInput {
  _id: FilterFindManyItem_idOperatorsInput
  createdById: FilterFindManyItemCreatedByIdOperatorsInput
  deleted: FilterFindManyItemDeletedOperatorsInput
  name: FilterFindManyItemNameOperatorsInput
  slug: FilterFindManyItemSlugOperatorsInput
}

""""""
input FilterFindManyItemOutputAssetsCoatingVariantsAlbedoInput {
  _id: MongoID
  name: String
  type: String
  url: String!
}

""""""
input FilterFindManyItemOutputAssetsCoatingVariantsInput {
  _id: MongoID
  albedo: FilterFindManyItemOutputAssetsCoatingVariantsAlbedoInput
  metallic: FilterFindManyItemOutputAssetsCoatingVariantsAlbedoInput
  name: String
  normal: FilterFindManyItemOutputAssetsCoatingVariantsAlbedoInput
  smoothness: FilterFindManyItemOutputAssetsCoatingVariantsAlbedoInput
}

""""""
input FilterFindManyItemOutputAssetsInput {
  _id: MongoID
  coatingVariants: [FilterFindManyItemOutputAssetsCoatingVariantsInput]
}

""""""
input FilterFindManyItemPillarInformationsInput {
  _id: MongoID
  cylinderSides: Float
  materials: [FilterFindManyItemPillarInformationsMaterialsInput]
  models: [FilterFindManyItemPillarInformationsModelsInput]
  necking: FilterFindManyItemPillarInformationsNeckingInput
}

""""""
input FilterFindManyItemPillarInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemPillarInformationsMaterialsType
}

""""""
input FilterFindManyItemPillarInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemPillarInformationsModelsType
  width: Float
}

""""""
input FilterFindManyItemPillarInformationsNeckingCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindManyItemPillarInformationsNeckingInput {
  crossSection: FilterFindManyItemPillarInformationsNeckingCrossSectionInput
  distanceToTop: Float
}

""""""
input FilterFindManyItemRoofInformationsCoveringInput {
  included: Boolean
  ridgeTiles: FilterFindManyItemRoofInformationsCoveringRidgeTilesInput
  sealingThickness: Float
  spaceBetweenSealingAndTiles: Float
  tilesThickness: Float
}

""""""
input FilterFindManyItemRoofInformationsCoveringRidgeTilesInput {
  innerRadius: Float
  length: Float
  radius: Float
}

""""""
input FilterFindManyItemRoofInformationsEavesStyleInput {
  type: EnumItemRoofInformationsEavesStyleType
}

""""""
input FilterFindManyItemRoofInformationsFlatRoofBorderDimensionsInput {
  height: Float
  width: Float
}

""""""
input FilterFindManyItemRoofInformationsFlatRoofInput {
  borderDimensions: FilterFindManyItemRoofInformationsFlatRoofBorderDimensionsInput
  gravelThickness: Float
  included: Boolean
}

""""""
input FilterFindManyItemRoofInformationsFramingInput {
  included: Boolean
  pieces: [FilterFindManyItemRoofInformationsFramingPiecesInput]
  type: EnumItemRoofInformationsFramingType
}

""""""
input FilterFindManyItemRoofInformationsFramingPiecesEnd_coordinateInput {
  x: Float
  y: Float
}

""""""
input FilterFindManyItemRoofInformationsFramingPiecesInput {
  _id: MongoID
  end_coordinate: FilterFindManyItemRoofInformationsFramingPiecesEnd_coordinateInput
  name: String
  start_coordinate: FilterFindManyItemRoofInformationsFramingPiecesStart_coordinateInput
  type: EnumItemRoofInformationsFramingPiecesType
}

""""""
input FilterFindManyItemRoofInformationsFramingPiecesStart_coordinateInput {
  x: Float
  y: Float
}

""""""
input FilterFindManyItemRoofInformationsGutterInput {
  included: Boolean
  innerRadius: Float
  radius: Float
}

""""""
input FilterFindManyItemRoofInformationsInput {
  _id: MongoID
  covering: FilterFindManyItemRoofInformationsCoveringInput
  eavesStyle: FilterFindManyItemRoofInformationsEavesStyleInput
  flatRoof: FilterFindManyItemRoofInformationsFlatRoofInput
  framing: FilterFindManyItemRoofInformationsFramingInput
  gutter: FilterFindManyItemRoofInformationsGutterInput
  materials: [FilterFindManyItemRoofInformationsMaterialsInput]
  models: [FilterFindManyItemRoofInformationsModelsInput]
  overhang: FilterFindManyItemRoofInformationsOverhangInput
  purlins: FilterFindManyItemRoofInformationsPurlinsInput
  rafters: FilterFindManyItemRoofInformationsRaftersInput
  ridgeBoard: FilterFindManyItemRoofInformationsRidgeBoardInput
  solarPanels: FilterFindManyItemRoofInformationsSolarPanelsInput
  topPlate: FilterFindManyItemRoofInformationsTopPlateInput
}

""""""
input FilterFindManyItemRoofInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemRoofInformationsMaterialsType
}

""""""
input FilterFindManyItemRoofInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemRoofInformationsModelsType
  width: Float
}

""""""
input FilterFindManyItemRoofInformationsOverhangInput {
  bargeboard: Float
  bargeboardPurlins: Float
  bargeboardRafters: Float
  eave: Float
  included: Boolean
}

""""""
input FilterFindManyItemRoofInformationsPurlinsBottomInput {
  height: Float
  width: Float
}

""""""
input FilterFindManyItemRoofInformationsPurlinsInput {
  bottom: FilterFindManyItemRoofInformationsPurlinsBottomInput
  included: Boolean
  intermediate: FilterFindManyItemRoofInformationsPurlinsIntermediateInput
  ridge: FilterFindManyItemRoofInformationsPurlinsRidgeInput
}

""""""
input FilterFindManyItemRoofInformationsPurlinsIntermediateInput {
  height: Float
  width: Float
}

""""""
input FilterFindManyItemRoofInformationsPurlinsRidgeInput {
  height: Float
  width: Float
}

""""""
input FilterFindManyItemRoofInformationsRaftersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindManyItemRoofInformationsRaftersInput {
  crossSection: FilterFindManyItemRoofInformationsRaftersCrossSectionInput
  included: Boolean
  typicalDistance: Float
}

""""""
input FilterFindManyItemRoofInformationsRidgeBoardCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindManyItemRoofInformationsRidgeBoardInput {
  crossSection: FilterFindManyItemRoofInformationsRidgeBoardCrossSectionInput
  included: Boolean
}

""""""
input FilterFindManyItemRoofInformationsSolarPanelsFrameInput {
  thickness: Float
  width: Float
}

""""""
input FilterFindManyItemRoofInformationsSolarPanelsInput {
  distanceToRoof: Float
  frame: FilterFindManyItemRoofInformationsSolarPanelsFrameInput
  height: Float
  included: Boolean
  thickness: Float
  width: Float
}

""""""
input FilterFindManyItemRoofInformationsTopPlateCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindManyItemRoofInformationsTopPlateInput {
  crossSection: FilterFindManyItemRoofInformationsTopPlateCrossSectionInput
  included: Boolean
}

input FilterFindManyItemSlugOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterFindManyItemStairsInformationsInput {
  _id: MongoID
  landing: FilterFindManyItemStairsInformationsLandingInput
  materials: [FilterFindManyItemStairsInformationsMaterialsInput]
  models: [FilterFindManyItemStairsInformationsModelsInput]
  railing: FilterFindManyItemStairsInformationsRailingInput
  steps: FilterFindManyItemStairsInformationsStepsInput
  stringers: FilterFindManyItemStairsInformationsStringersInput
}

""""""
input FilterFindManyItemStairsInformationsLandingInput {
  height: Float
}

""""""
input FilterFindManyItemStairsInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemStairsInformationsMaterialsType
}

""""""
input FilterFindManyItemStairsInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemStairsInformationsModelsType
  width: Float
}

""""""
input FilterFindManyItemStairsInformationsRailingBalustersInput {
  radius: Float
  typicalDistance: Float
}

""""""
input FilterFindManyItemStairsInformationsRailingHandrailCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindManyItemStairsInformationsRailingHandrailInput {
  crossSection: FilterFindManyItemStairsInformationsRailingHandrailCrossSectionInput
  elevation: Float
}

""""""
input FilterFindManyItemStairsInformationsRailingInput {
  balusters: FilterFindManyItemStairsInformationsRailingBalustersInput
  handrail: FilterFindManyItemStairsInformationsRailingHandrailInput
  posts: FilterFindManyItemStairsInformationsRailingPostsInput
}

""""""
input FilterFindManyItemStairsInformationsRailingPostsCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindManyItemStairsInformationsRailingPostsInput {
  crossSection: FilterFindManyItemStairsInformationsRailingPostsCrossSectionInput
}

""""""
input FilterFindManyItemStairsInformationsStepsInput {
  risers: FilterFindManyItemStairsInformationsStepsRisersInput
  treats: FilterFindManyItemStairsInformationsStepsTreatsInput
}

""""""
input FilterFindManyItemStairsInformationsStepsRisersInput {
  height: Float
  thickness: Float
}

""""""
input FilterFindManyItemStairsInformationsStepsTreatsInput {
  height: Float
  nose: Float
}

""""""
input FilterFindManyItemStairsInformationsStringersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindManyItemStairsInformationsStringersInput {
  crossSection: FilterFindManyItemStairsInformationsStringersCrossSectionInput
  overTreat: Float
}

""""""
input FilterFindManyItemVegetationInformationsInput {
  _id: MongoID
  canBeSelected: Boolean
}

""""""
input FilterFindManyItemWallInformationsApplicationInput {
  bothSides: Boolean
  exteriorFacesExteriorWalls: Boolean
  interiorFacesExteriorWalls: Boolean
  interiorWalls: Boolean
  overRegularWall: Boolean
}

""""""
input FilterFindManyItemWallInformationsInput {
  _id: MongoID
  application: FilterFindManyItemWallInformationsApplicationInput
  class: EnumItemWallInformationsClass
  meshes: [FilterFindManyItemWallInformationsMeshesInput]
}

""""""
input FilterFindManyItemWallInformationsMeshesDimensionsInput {
  length: Float
  thickness: Float
}

""""""
input FilterFindManyItemWallInformationsMeshesDisplayInput {
  autoCut: Boolean
  whenWallsHigh: Boolean
  whenWallsLow: Boolean
}

""""""
input FilterFindManyItemWallInformationsMeshesInput {
  _id: MongoID
  buildingMaterial: EnumItemWallInformationsMeshesBuildingMaterial
  dimensions: FilterFindManyItemWallInformationsMeshesDimensionsInput
  display: FilterFindManyItemWallInformationsMeshesDisplayInput
  materialId: MongoID
  meshId: MongoID
  name: String
  options: FilterFindManyItemWallInformationsMeshesOptionsInput
  overlapPriority: Float
  placing: FilterFindManyItemWallInformationsMeshesPlacingInput
  segmentTypes: FilterFindManyItemWallInformationsMeshesSegmentTypesInput
  surface: FilterFindManyItemWallInformationsMeshesSurfaceInput
  type: EnumItemWallInformationsMeshesType
}

""""""
input FilterFindManyItemWallInformationsMeshesOptionsInput {
  closeBack: Boolean
  closeBottom: Boolean
  closeFront: Boolean
  closeSides: Boolean
  closeTop: Boolean
  hidden: Boolean
  nextToDoorsAndWindows: Boolean
  paintable: Boolean
  shape: EnumItemWallInformationsMeshesOptionsShape
  skewOnCorners: Boolean
}

""""""
input FilterFindManyItemWallInformationsMeshesPlacingBottomElevationInput {
  _id: MongoID
  elevation: Float
  reference: EnumItemWallInformationsMeshesPlacingBottomElevationReference
}

""""""
input FilterFindManyItemWallInformationsMeshesPlacingInput {
  beamDirection: EnumItemWallInformationsMeshesPlacingBeamDirection
  bottomElevation: FilterFindManyItemWallInformationsMeshesPlacingBottomElevationInput
  depthOffset: Float
  doorPostOffset: Float
  endContraction: Float
  endDepth: FilterFindManyItemWallInformationsMeshesPlacingStartDepthInput
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  moveVerticesAbove: Float
  pivotIsOnTop: Boolean
  placeEndPillarsDiagonally: Boolean
  repetitionFilter: EnumItemWallInformationsMeshesPlacingRepetitionFilter
  startDepth: FilterFindManyItemWallInformationsMeshesPlacingStartDepthInput
  stretchVertically: Boolean
  topElevation: FilterFindManyItemWallInformationsMeshesPlacingBottomElevationInput
}

""""""
input FilterFindManyItemWallInformationsMeshesPlacingStartDepthInput {
  _id: MongoID
  depth: Float
  plusOnTop: Float
  reference: EnumItemWallInformationsMeshesPlacingStartDepthReference
}

""""""
input FilterFindManyItemWallInformationsMeshesSegmentTypesInput {
  doors: Boolean
  walls: Boolean
  windows: Boolean
}

""""""
input FilterFindManyItemWallInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
  swapUV: Boolean
}

input FilterFindManyItem_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyItemsGroupInput {
  AND: [FilterFindManyItemsGroupInput!]
  OR: [FilterFindManyItemsGroupInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyItemsGroupOperatorsInput
  brandId: MongoID
  choiceIsMandatory: Boolean
  generated: Boolean
  itemsIds: [MongoID!]
  name: String
  option: FilterFindManyItemsGroupOptionInput
  publicNameTranslations: Translations
  shouldBeOpenInGUI: Boolean
  thumbnailPictureName: String
  type: EnumItemsGroupType
}

input FilterFindManyItemsGroupNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyItemsGroupOperatorsInput {
  _id: FilterFindManyItemsGroup_idOperatorsInput
  name: FilterFindManyItemsGroupNameOperatorsInput
}

""""""
input FilterFindManyItemsGroupOptionInput {
  _id: MongoID
  baseItemId: MongoID
  choiceIsMandatory: Boolean
  disableDefaultChoice: Boolean
  positions: [FilterFindManyItemsGroupOptionPositionsInput!]
}

""""""
input FilterFindManyItemsGroupOptionPositionsInput {
  _id: MongoID
  margins: FilterFindManyItemsGroupOptionPositionsMarginsInput
  placement: EnumItemsGroupOptionPositionsPlacement
  rotation: EnumItemsGroupOptionPositionsRotation
}

""""""
input FilterFindManyItemsGroupOptionPositionsMarginsInput {
  x: Float
  y: Float
  z: Float
}

input FilterFindManyItemsGroup_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyPaletteColorsInput {
  _id: MongoID
  a: Float
  b: Float
  code: String
  g: Float
  metallic: Float
  nameTranslations: Translations
  r: Float
  roughness: Float
}

""""""
input FilterFindManyPaletteInput {
  AND: [FilterFindManyPaletteInput!]
  OR: [FilterFindManyPaletteInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyPaletteOperatorsInput
  brandId: MongoID
  colors: [FilterFindManyPaletteColorsInput]
  name: String
  type: EnumPaletteType
}

input FilterFindManyPaletteNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyPaletteOperatorsInput {
  _id: FilterFindManyPalette_idOperatorsInput
  name: FilterFindManyPaletteNameOperatorsInput
}

input FilterFindManyPalette_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyPictureInput {
  AND: [FilterFindManyPictureInput!]
  OR: [FilterFindManyPictureInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyPictureOperatorsInput
  brandId: MongoID
  name: String
  size: Float
  url: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyPictureOperatorsInput {
  _id: FilterFindManyPicture_idOperatorsInput
}

input FilterFindManyPicture_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyPipelineJobDeadlineJobIdOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterFindManyPipelineJobInput {
  AND: [FilterFindManyPipelineJobInput!]
  OR: [FilterFindManyPipelineJobInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyPipelineJobOperatorsInput
  brandId: MongoID
  completedDate: Date
  deadlineJobId: String
  settings: FilterFindManyPipelineJobSettingsInput
  startDate: Date
  state: EnumPipelineJobState
  submitDate: Date

  """Only find pipeline jobs that were created for a specific item"""
  targetItemId: MongoID
  type: EnumPipelineJobType
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyPipelineJobOperatorsInput {
  _id: FilterFindManyPipelineJob_idOperatorsInput
  deadlineJobId: FilterFindManyPipelineJobDeadlineJobIdOperatorsInput
}

""""""
input FilterFindManyPipelineJobSettingsConvertPBRMaterialToAssetBundleInput {
  _id: MongoID
  assetUrl: String
  itemId: MongoID
}

""""""
input FilterFindManyPipelineJobSettingsInput {
  _id: MongoID
  convertPBRMaterialToAssetBundle: FilterFindManyPipelineJobSettingsConvertPBRMaterialToAssetBundleInput
}

input FilterFindManyPipelineJob_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyPlannedMaintenanceInput {
  AND: [FilterFindManyPlannedMaintenanceInput!]
  OR: [FilterFindManyPlannedMaintenanceInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyPlannedMaintenanceOperatorsInput
  durationHours: Float
  reasonTranslations: Translations
  startDate: Date
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyPlannedMaintenanceOperatorsInput {
  _id: FilterFindManyPlannedMaintenance_idOperatorsInput
}

input FilterFindManyPlannedMaintenance_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyPriceTableInput {
  AND: [FilterFindManyPriceTableInput!]
  OR: [FilterFindManyPriceTableInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyPriceTableOperatorsInput
  brandId: MongoID
  currencyName: String
  displayEan: Boolean
  globalDiscount: Float
  moniker: String
  multiplyingCoefficient: Float
  name: String
  prices: [FilterFindManyPriceTablePricesInput]
  symbol: String
  vatRate: Float
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyPriceTableOperatorsInput {
  _id: FilterFindManyPriceTable_idOperatorsInput
}

""""""
input FilterFindManyPriceTablePricesInput {
  _id: MongoID
  articleIdentifier: String
  ean: String
  itemsIds: [MongoID]
  price: Float
  sourceItemId: MongoID
}

input FilterFindManyPriceTable_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyProductScanInput {
  AND: [FilterFindManyProductScanInput!]
  OR: [FilterFindManyProductScanInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyProductScanOperatorsInput
  brandId: MongoID
  creationDate: Date
  metallic: Float
  notes: String
  productName: String
  reference: String
  scans: [FilterFindManyProductScanScansInput]
  size: FilterFindManyProductScanSizeInput
  state: EnumProductScanState
  thumbnail: FilterFindManyProductScanScansInputImagesInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyProductScanOperatorsInput {
  _id: FilterFindManyProductScan_idOperatorsInput
}

""""""
input FilterFindManyProductScanScansInput {
  _id: MongoID
  generatedImages: [FilterFindManyProductScanScansInputImagesInput]
  inputImages: [FilterFindManyProductScanScansInputImagesInput]
  name: String
  type: EnumProductScanScansType
}

""""""
input FilterFindManyProductScanScansInputImagesInput {
  _id: MongoID
  format: String!
  name: String!
  url: String!
}

""""""
input FilterFindManyProductScanSizeInput {
  height: String
  length: String
  width: String
}

input FilterFindManyProductScan_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyPromoterApartmentUnitBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyPromoterApartmentUnitCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyPromoterApartmentUnitInput {
  AND: [FilterFindManyPromoterApartmentUnitInput!]
  OR: [FilterFindManyPromoterApartmentUnitInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyPromoterApartmentUnitOperatorsInput
  brandId: MongoID
  buildingNumber: String
  comment: String
  createdAt: Date
  createdById: MongoID
  floor: String
  metadata: Metadata
  purchaserFirstName: String
  purchaserMail: String
  purchaserSurname: String
  saveId: MongoID
  state: EnumPromoterApartmentUnitState
  unitNumber: String
  unitTypeId: MongoID
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyPromoterApartmentUnitOperatorsInput {
  _id: FilterFindManyPromoterApartmentUnit_idOperatorsInput
  brandId: FilterFindManyPromoterApartmentUnitBrandIdOperatorsInput
  createdById: FilterFindManyPromoterApartmentUnitCreatedByIdOperatorsInput
  unitTypeId: FilterFindManyPromoterApartmentUnitUnitTypeIdOperatorsInput
}

input FilterFindManyPromoterApartmentUnitTypeBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyPromoterApartmentUnitTypeCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyPromoterApartmentUnitTypeHistoryInput {
  _id: MongoID
  comment: String
  saveId: MongoID
  state: EnumPromoterApartmentUnitTypeHistoryState
  version: Int
}

""""""
input FilterFindManyPromoterApartmentUnitTypeInput {
  AND: [FilterFindManyPromoterApartmentUnitTypeInput!]
  OR: [FilterFindManyPromoterApartmentUnitTypeInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyPromoterApartmentUnitTypeOperatorsInput
  brandId: MongoID
  createdAt: Date
  createdById: MongoID
  currentVersion: Int
  descriptionJson: JSONObject
  history: [FilterFindManyPromoterApartmentUnitTypeHistoryInput!]
  metadata: Metadata
  name: String
  programId: MongoID
  saveFolderId: MongoID
  state: EnumPromoterApartmentUnitTypeState
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyPromoterApartmentUnitTypeOperatorsInput {
  _id: FilterFindManyPromoterApartmentUnitType_idOperatorsInput
  brandId: FilterFindManyPromoterApartmentUnitTypeBrandIdOperatorsInput
  createdById: FilterFindManyPromoterApartmentUnitTypeCreatedByIdOperatorsInput
  programId: FilterFindManyPromoterApartmentUnitTypeProgramIdOperatorsInput
}

input FilterFindManyPromoterApartmentUnitTypeProgramIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyPromoterApartmentUnitType_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyPromoterApartmentUnitUnitTypeIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyPromoterApartmentUnit_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyPromoterProgramBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyPromoterProgramCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyPromoterProgramInput {
  AND: [FilterFindManyPromoterProgramInput!]
  OR: [FilterFindManyPromoterProgramInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyPromoterProgramOperatorsInput
  address: String
  brandId: MongoID
  city: String
  createdAt: Date
  createdById: MongoID
  isArchived: Boolean
  itemFilter: FilterFindManyPromoterProgramItemFilterInput
  metadata: Metadata
  name: String
  planEditor: FilterFindManyPromoterProgramPlanEditorInput
  planUrls: [String!]
  promoterId: MongoID
  saveFolderId: MongoID
  slug: String
  state: EnumPromoterProgramState
  stylePresetGroupId: MongoID
  updatedAt: Date
  updatedById: MongoID
  zipCode: Float
}

""""""
input FilterFindManyPromoterProgramItemFilterInput {
  itemWhiteList: [MongoID!]
}

input FilterFindManyPromoterProgramNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyPromoterProgramOperatorsInput {
  _id: FilterFindManyPromoterProgram_idOperatorsInput
  brandId: FilterFindManyPromoterProgramBrandIdOperatorsInput
  createdById: FilterFindManyPromoterProgramCreatedByIdOperatorsInput
  name: FilterFindManyPromoterProgramNameOperatorsInput
  promoterId: FilterFindManyPromoterProgramPromoterIdOperatorsInput
  slug: FilterFindManyPromoterProgramSlugOperatorsInput
}

""""""
input FilterFindManyPromoterProgramPlanEditorInput {
  data: JSON
  dataFormatVersion: Int
}

input FilterFindManyPromoterProgramPromoterIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyPromoterProgramSlugOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyPromoterProgram_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManySalesRecordBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManySalesRecordCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterFindManySalesRecordCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManySalesRecordInput {
  AND: [FilterFindManySalesRecordInput!]
  OR: [FilterFindManySalesRecordInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManySalesRecordOperatorsInput
  brandId: MongoID
  createdAt: Date
  createdById: MongoID
  finalCustomerMetadata: Metadata
  metadata: Metadata
  saveId: MongoID
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManySalesRecordOperatorsInput {
  _id: FilterFindManySalesRecord_idOperatorsInput
  brandId: FilterFindManySalesRecordBrandIdOperatorsInput
  createdAt: FilterFindManySalesRecordCreatedAtOperatorsInput
  createdById: FilterFindManySalesRecordCreatedByIdOperatorsInput
  updatedAt: FilterFindManySalesRecordUpdatedAtOperatorsInput
}

input FilterFindManySalesRecordUpdatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterFindManySalesRecord_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManySaveCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterFindManySaveCreatedByOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManySaveFolderInput {
  AND: [FilterFindManySaveFolderInput!]
  OR: [FilterFindManySaveFolderInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManySaveFolderOperatorsInput
  brandId: MongoID
  createdAt: Date
  name: String
  parentId: MongoID
  slug: String
  updatedAt: Date
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManySaveFolderOperatorsInput {
  _id: FilterFindManySaveFolder_idOperatorsInput
}

input FilterFindManySaveFolder_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManySaveInput {
  AND: [FilterFindManySaveInput!]
  OR: [FilterFindManySaveInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManySaveOperatorsInput
  additionalInfo: JSON
  apartmentUnitTypeId: MongoID
  brandId: MongoID
  chosenStylePresetId: MongoID
  createdAt: Date
  createdBy: MongoID
  createdByMe: Boolean
  createdFromAP: MongoID
  customerId: MongoID
  data: String
  dataFormatVersion: Int
  dataUrl: String
  description: String
  isReadonly: Boolean
  isTemplate: Boolean
  metadata: Metadata
  moduleKitchenCustomData: String
  name: String
  parent: MongoID
  quantitySurveyJSON: String
  saveFolderId: MongoID
  storageBytesUsage: Float
  stylePresetGroupId: MongoID
  tags: [String]
  thumbnailUrl: String
  tunnelState: JSON
  type: EnumSaveType
  updatedAt: Date
  updatedBy: MongoID
  visitViewpoints: [FilterFindManySaveVisitViewpointsInput!]
}

input FilterFindManySaveIsTemplateOperatorsInput {
  exists: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nin: [Boolean]
}

input FilterFindManySaveNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManySaveOperatorsInput {
  _id: FilterFindManySave_idOperatorsInput
  createdAt: FilterFindManySaveCreatedAtOperatorsInput
  createdBy: FilterFindManySaveCreatedByOperatorsInput
  isTemplate: FilterFindManySaveIsTemplateOperatorsInput
  name: FilterFindManySaveNameOperatorsInput
  updatedAt: FilterFindManySaveUpdatedAtOperatorsInput
}

input FilterFindManySaveUpdatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

""""""
input FilterFindManySaveVisitViewpointsInput {
  _id: MongoID
  orientation: FilterFindManySaveVisitViewpointsOrientationInput
  position: FilterFindManySaveVisitViewpointsPositionInput
}

""""""
input FilterFindManySaveVisitViewpointsOrientationInput {
  x: Float
  y: Float
  z: Float
}

""""""
input FilterFindManySaveVisitViewpointsPositionInput {
  x: Float
  y: Float
  z: Float
}

input FilterFindManySave_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManySavesGroupInput {
  AND: [FilterFindManySavesGroupInput!]
  OR: [FilterFindManySavesGroupInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManySavesGroupOperatorsInput
  brandId: MongoID
  name: String
  publicNameTranslations: Translations
  savesIds: [MongoID]
  thumbnailPictureName: String
  type: EnumSavesGroupType
}

input FilterFindManySavesGroupNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManySavesGroupOperatorsInput {
  _id: FilterFindManySavesGroup_idOperatorsInput
  name: FilterFindManySavesGroupNameOperatorsInput
}

input FilterFindManySavesGroup_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManySettingInput {
  AND: [FilterFindManySettingInput!]
  OR: [FilterFindManySettingInput!]
  _id: String

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManySettingOperatorsInput
  role: String
  value: JSON
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManySettingOperatorsInput {
  _id: FilterFindManySetting_idOperatorsInput
}

input FilterFindManySetting_idOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindManyStylePresetCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

""""""
input FilterFindManyStylePresetCustomisationPresetsInput {
  _id: MongoID
  chosenItemId: MongoID
  customisationNameId: String
  filterTag: String
  rotationCondition: EnumStylePresetCustomisationPresetsRotationCondition
}

""""""
input FilterFindManyStylePresetGroupInput {
  AND: [FilterFindManyStylePresetGroupInput!]
  OR: [FilterFindManyStylePresetGroupInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyStylePresetGroupOperatorsInput
  brandId: MongoID
  name: String
  stylePresetIds: [MongoID]
}

input FilterFindManyStylePresetGroupNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyStylePresetGroupOperatorsInput {
  _id: FilterFindManyStylePresetGroup_idOperatorsInput
  name: FilterFindManyStylePresetGroupNameOperatorsInput
}

input FilterFindManyStylePresetGroup_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyStylePresetInput {
  AND: [FilterFindManyStylePresetInput!]
  OR: [FilterFindManyStylePresetInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyStylePresetOperatorsInput
  brandId: MongoID
  createdAt: Date
  customisationPresets: [FilterFindManyStylePresetCustomisationPresetsInput]
  name: String
  publicNameTranslations: Translations
  updatedAt: Date
}

input FilterFindManyStylePresetNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyStylePresetOperatorsInput {
  _id: FilterFindManyStylePreset_idOperatorsInput
  createdAt: FilterFindManyStylePresetCreatedAtOperatorsInput
  name: FilterFindManyStylePresetNameOperatorsInput
  updatedAt: FilterFindManyStylePresetUpdatedAtOperatorsInput
}

input FilterFindManyStylePresetUpdatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterFindManyStylePreset_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindManyTutorialInput {
  AND: [FilterFindManyTutorialInput!]
  OR: [FilterFindManyTutorialInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyTutorialOperatorsInput
  brandId: MongoID
  displayOnlyOnce: Boolean
  name: String
  points: [FilterFindManyTutorialPointInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyTutorialOperatorsInput {
  _id: FilterFindManyTutorial_idOperatorsInput
}

""""""
input FilterFindManyTutorialPointInput {
  _id: MongoID
  illustration: String
  target: EnumTutorialPointTarget
  textTranslations: Translations
  titleTranslations: Translations
}

input FilterFindManyTutorial_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyUserCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterFindManyUserCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindManyUserEmailOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterFindManyUserInput {
  AND: [FilterFindManyUserInput!]
  OR: [FilterFindManyUserInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyUserOperatorsInput
  createdAt: Date
  createdById: MongoID
  email: String
  favoriteItemsIds: [MongoID!]
  favoriteSavesIds: [MongoID!]
  name: String
  roles: [String!]
  updatedAt: Date
}

input FilterFindManyUserNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyUserOperatorsInput {
  _id: FilterFindManyUser_idOperatorsInput
  createdAt: FilterFindManyUserCreatedAtOperatorsInput
  createdById: FilterFindManyUserCreatedByIdOperatorsInput
  email: FilterFindManyUserEmailOperatorsInput
  name: FilterFindManyUserNameOperatorsInput
}

input FilterFindManyUser_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOneAccessPointBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneAccessPointInput {
  AND: [FilterFindOneAccessPointInput!]
  OR: [FilterFindOneAccessPointInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneAccessPointOperatorsInput
  areSavesPubliclyAvailableById: Boolean
  authorizedCatalogIds: [MongoID]
  brandId: MongoID
  ecotaxePriceTableId: MongoID
  name: String
  parametersScrapperId: MongoID
  parametersTunnelId: MongoID
  priceTableId: MongoID
  supportButton: FilterFindOneAccessPointSupportButtonInput
}

input FilterFindOneAccessPointNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneAccessPointOperatorsInput {
  _id: FilterFindOneAccessPoint_idOperatorsInput
  brandId: FilterFindOneAccessPointBrandIdOperatorsInput
  name: FilterFindOneAccessPointNameOperatorsInput
}

""""""
input FilterFindOneAccessPointSupportButtonInput {
  icon: EnumAccessPointSupportButtonIcon
  tooltipTranslations: Translations
  type: EnumAccessPointSupportButtonType
  value: String
}

input FilterFindOneAccessPoint_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneAppletInput {
  AND: [FilterFindOneAppletInput!]
  OR: [FilterFindOneAppletInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneAppletOperatorsInput
  encoding: EnumAppletEncoding
  indexedDbResetVersion: String
  intVersion: Float
  readableVersion: String
  redirectedVersion: String
  version: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneAppletOperatorsInput {
  _id: FilterFindOneApplet_idOperatorsInput
  version: FilterFindOneAppletVersionOperatorsInput
}

input FilterFindOneAppletVersionOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindOneApplet_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneBarcodeCollectionBarcodeReferencesInput {
  _id: MongoID
  ean: String
  id: String
}

input FilterFindOneBarcodeCollectionCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneBarcodeCollectionInput {
  AND: [FilterFindOneBarcodeCollectionInput!]
  OR: [FilterFindOneBarcodeCollectionInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneBarcodeCollectionOperatorsInput
  barcodeReferences: [FilterFindOneBarcodeCollectionBarcodeReferencesInput!]
  createdAt: Date
  createdById: MongoID
  name: String
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneBarcodeCollectionOperatorsInput {
  _id: FilterFindOneBarcodeCollection_idOperatorsInput
  createdById: FilterFindOneBarcodeCollectionCreatedByIdOperatorsInput
}

input FilterFindOneBarcodeCollection_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneBrandColorsInput {
  dataProtection: String
  legalNotice: String
  loadingScreenBackground: String
  loadingScreenLogoPicture: String
  loadingScreenProgressBarBackground: String
  loadingScreenProgressBarBorder: String
  loadingScreenProgressBarContent: String
  loadingScreenText: String
  meshes: FilterFindOneBrandColorsMeshesInput
  planElement: FilterFindOneBrandColorsPlanElementInput
  primary: String
  questHeaderBackground: String
  questHeaderBody: String
  questHeaderTitle: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

""""""
input FilterFindOneBrandColorsMeshesInput {
  wallCut: String
}

""""""
input FilterFindOneBrandColorsPlanElementInput {
  floor: String
  wall: String
  window: String
}

""""""
input FilterFindOneBrandInput {
  AND: [FilterFindOneBrandInput!]
  OR: [FilterFindOneBrandInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneBrandOperatorsInput
  colors: FilterFindOneBrandColorsInput
  createdAt: Date
  name: String

  """Only seek for brand the logged-in user is member of."""
  onlyMine: Boolean
  promoterWebsiteConfiguration: FilterFindOneBrandPromoterWebsiteConfigurationInput
  satelliteConfiguration: FilterFindOneBrandSatelliteConfigurationInput
  shareCode: String
  slug: String
  updatedAt: Date
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneBrandOperatorsInput {
  _id: FilterFindOneBrand_idOperatorsInput
  shareCode: FilterFindOneBrandShareCodeOperatorsInput
  slug: FilterFindOneBrandSlugOperatorsInput
}

""""""
input FilterFindOneBrandParametersScrapperInput {
  AND: [FilterFindOneBrandParametersScrapperInput!]
  OR: [FilterFindOneBrandParametersScrapperInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneBrandParametersScrapperOperatorsInput
  allowAnonymousSave: Boolean
  brandId: MongoID
  enabled: Boolean
  export: Boolean
  geometry: Boolean
  name: String
  objects: Boolean
  postManualSaveTriggerSteps: [FilterFindOneBrandParametersScrapperPostManualSaveTriggerStepsInput!]
  screenshots: Boolean
  steps: [FilterFindOneBrandParametersScrapperStepsInput!]
  watermark: FilterFindOneBrandParametersScrapperWatermarkInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneBrandParametersScrapperOperatorsInput {
  _id: FilterFindOneBrandParametersScrapper_idOperatorsInput
}

""""""
input FilterFindOneBrandParametersScrapperPostManualSaveTriggerStepsInput {
  _id: MongoID
  triggerPopup: FilterFindOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput
  type: EnumBrandParametersScrapperPostManualSaveTriggerStepsType
}

""""""
input FilterFindOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput {
  _id: MongoID
  buttonType: EnumBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupButtonType
  textTranslations: Translations
  titleTranslations: Translations
  yesNoButtons: FilterFindOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput
}

""""""
input FilterFindOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput {
  stateProperty: String
}

""""""
input FilterFindOneBrandParametersScrapperStepsFilterInput {
  expression: String
}

""""""
input FilterFindOneBrandParametersScrapperStepsInput {
  _id: MongoID
  filter: FilterFindOneBrandParametersScrapperStepsFilterInput
  map: FilterFindOneBrandParametersScrapperStepsMapInput
  stepType: EnumBrandParametersScrapperStepsStepType
  stepVerb: String
  tap: FilterFindOneBrandParametersScrapperStepsTapInput
  verbFilter: EnumBrandParametersScrapperStepsVerbFilter
  verbMap: EnumBrandParametersScrapperStepsVerbMap
  verbTap: EnumBrandParametersScrapperStepsVerbTap
}

""""""
input FilterFindOneBrandParametersScrapperStepsMapInput {
  kitchenPricer: FilterFindOneBrandParametersScrapperStepsMapKitchenPricerInput
  payloadGenerator: FilterFindOneBrandParametersScrapperStepsMapPayloadGeneratorInput
  pdfReportGenerator: FilterFindOneBrandParametersScrapperStepsMapPdfReportGeneratorInput
  plinthCalculator: FilterFindOneBrandParametersScrapperStepsMapPlinthCalculatorInput
  reportGenerator: FilterFindOneBrandParametersScrapperStepsMapReportGeneratorInput
  terracePricer: FilterFindOneBrandParametersScrapperStepsMapTerracePricerInput
}

""""""
input FilterFindOneBrandParametersScrapperStepsMapKitchenPricerInput {
  apiToken: String
  apiUrl: String
  barcodeCollectionId: MongoID
  projectBaseUrl: String
}

""""""
input FilterFindOneBrandParametersScrapperStepsMapPayloadGeneratorInput {
  addSaveName: Boolean
  addUpdateToken: Boolean
  dynamicParameterForTunnelStateInformation: String
  tunnelStateKeys: [String!]
}

""""""
input FilterFindOneBrandParametersScrapperStepsMapPdfReportGeneratorInput {
  payloadType: EnumBrandParametersScrapperStepsMapPdfReportGeneratorPayloadType
}

""""""
input FilterFindOneBrandParametersScrapperStepsMapPlinthCalculatorInput {
  bigPlinthId: MongoID
  littlePlinthId: MongoID
}

""""""
input FilterFindOneBrandParametersScrapperStepsMapReportGeneratorInput {
  chunksManifest: [FilterFindOneInputDocumentChunkManifestInput!]
  documentName: String
  htmlTemplate: String
  mode: EnumBrandParametersScrapperStepsMapReportGeneratorMode
}

""""""
input FilterFindOneBrandParametersScrapperStepsMapTerracePricerInput {
  itemsCatalogId: MongoID
}

""""""
input FilterFindOneBrandParametersScrapperStepsTapInput {
  outputToApi: FilterFindOneBrandParametersScrapperStepsTapOutputToApiInput
  sendEmail: FilterFindOneBrandParametersScrapperStepsTapSendEmailInput
}

""""""
input FilterFindOneBrandParametersScrapperStepsTapOutputToApiInput {
  apiToken: String
  apiUrl: String
  signPayload: Boolean
}

""""""
input FilterFindOneBrandParametersScrapperStepsTapSendEmailInput {
  attachmentName: String
  dynamicParameterEmailAdress: String
  emailSourceType: EnumBrandParametersScrapperStepsTapSendEmailEmailSourceType
  sendReportAsAttachment: Boolean
  staticEmailAdress: String
  subject: String
  template: String
}

""""""
input FilterFindOneBrandParametersScrapperWatermarkInput {
  alpha: Float
  color: String
  enabled: Boolean
  picture: String
  repetition: Float
}

input FilterFindOneBrandParametersScrapper_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneBrandPromoterWebsiteConfigurationInput {
  acquirerValidateUnitAccessPointId: MongoID
  metadataConfiguration: FilterFindOneBrandPromoterWebsiteConfigurationMetadataConfigurationInput
  operatorTypeAccessPointId: MongoID
  promoterValidateTypeAccessPointId: MongoID
  unitTypeSaveModelId: MongoID
}

""""""
input FilterFindOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataType
}

""""""
input FilterFindOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataType
}

""""""
input FilterFindOneBrandPromoterWebsiteConfigurationMetadataConfigurationInput {
  apartmentUnitMetadata: [FilterFindOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput!]
  apartmentUnitTypeIdMetadataKey: String
  apartmentUnitTypeMetadata: [FilterFindOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput!]
  programMetadata: [FilterFindOneBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput!]
}

""""""
input FilterFindOneBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataType
}

""""""
input FilterFindOneBrandSatelliteConfigurationInput {
  satelliteUrl: String
}

input FilterFindOneBrandShareCodeOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindOneBrandSlugOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindOneBrand_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneCatalogFolderInput {
  AND: [FilterFindOneCatalogFolderInput!]
  OR: [FilterFindOneCatalogFolderInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneCatalogFolderOperatorsInput
  associatedEcotaxePriceTableId: MongoID
  associatedPriceTableId: MongoID
  brand: MongoID

  """Filter catalogs by parent brand id."""
  brandId: MongoID
  createdAt: Date
  iconId: Int
  metadata: [FilterFindOneCatalogFolderMetadataInput]
  name: String
  parent: MongoID
  public: Boolean
  publicNameTranslations: Translations
  published: Boolean
  rootId: MongoID
  sharedWithIds: [MongoID]
  thumbnailId: String
  thumbnailUrl: String
  tiles: [FilterFindOneCatalogFolderTilesInput]
  tilesBackgroundColor: String
  tilesColumnAmount: Float
  tilesColumnGap: Float
  tilesColumnSizes: [Float]
  tilesRowGap: Float
  tilesRowSizes: [Float]
  type: EnumCatalogFolderType
  updatedAt: Date
  virtual: Boolean
}

""""""
input FilterFindOneCatalogFolderMetadataInput {
  _id: MongoID
  key: String
  value: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneCatalogFolderOperatorsInput {
  _id: FilterFindOneCatalogFolder_idOperatorsInput
}

""""""
input FilterFindOneCatalogFolderTilesImagePlacementInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

""""""
input FilterFindOneCatalogFolderTilesInput {
  _id: MongoID
  advancedTextTranslations: Translations
  backgroundColor: String
  backgroundOpacity: Float
  borderRadius: Float
  catalogSourceId: MongoID
  construction: MongoID
  descriptionTextSize: Float
  folder: MongoID
  hasShadow: Boolean
  height: Float
  horizontalTextAlignement: EnumCatalogFolderTilesHorizontalTextAlignement
  imageId: String
  imagePlacement: FilterFindOneCatalogFolderTilesImagePlacementInput
  imageUrl: String
  isImagePlacementFree: Boolean
  isShownOnDesktop: Boolean
  isShownOnMobile: Boolean
  item: MongoID
  itemsGroup: MongoID
  mask: Boolean
  maskColor: String
  maskOpacity: Float
  metadata: [FilterFindOneCatalogFolderTilesMetadataInput]
  posX: Float
  posY: Float
  saveSelectedInTunnelStateVariable: String
  stylePresetId: MongoID
  textColor: String
  textDescriptionTranslations: Translations
  textPadding: FilterFindOneCatalogFolderTilesTextPaddingInput
  textTitleTranslations: Translations
  titleTextColor: String
  titleTextSize: Float
  tooltipTranslations: Translations
  type: EnumCatalogFolderTilesType
  useAdvancedText: Boolean
  verticalTextAlignement: EnumCatalogFolderTilesVerticalTextAlignement
  width: Float
}

""""""
input FilterFindOneCatalogFolderTilesMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input FilterFindOneCatalogFolderTilesTextPaddingInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

input FilterFindOneCatalogFolder_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOneCustomerAddressOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindOneCustomerBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOneCustomerCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOneCustomerEmailOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindOneCustomerFirstnameAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindOneCustomerFirstnameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindOneCustomerGenderAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindOneCustomerGenderOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterFindOneCustomerInput {
  AND: [FilterFindOneCustomerInput!]
  OR: [FilterFindOneCustomerInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneCustomerOperatorsInput
  address: String
  brandId: MongoID
  city: String
  createdAt: Date
  createdById: MongoID
  email: String
  firstname: String
  firstnameAdditional: String
  gender: String
  genderAdditional: String
  mobilePhone: String
  phone: String
  surname: String
  surnameAdditional: String
  updatedAt: Date
  zipCode: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneCustomerOperatorsInput {
  _id: FilterFindOneCustomer_idOperatorsInput
  address: FilterFindOneCustomerAddressOperatorsInput
  brandId: FilterFindOneCustomerBrandIdOperatorsInput
  createdById: FilterFindOneCustomerCreatedByIdOperatorsInput
  email: FilterFindOneCustomerEmailOperatorsInput
  firstname: FilterFindOneCustomerFirstnameOperatorsInput
  firstnameAdditional: FilterFindOneCustomerFirstnameAdditionalOperatorsInput
  gender: FilterFindOneCustomerGenderOperatorsInput
  genderAdditional: FilterFindOneCustomerGenderAdditionalOperatorsInput
  surname: FilterFindOneCustomerSurnameOperatorsInput
  surnameAdditional: FilterFindOneCustomerSurnameAdditionalOperatorsInput
}

input FilterFindOneCustomerSurnameAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindOneCustomerSurnameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindOneCustomer_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

"""Configures the parameters of one or multiple chunks in the document."""
input FilterFindOneInputDocumentChunkManifestInput {
  """
  Render-time parameters object, implementing the chunk's parameters schema as given in the output manifest. The type of this property is loosely-typed in GraphQL, but verified at runtime against that schema. If the parameters passed are invalid against the schema, the chunk will be disabled and a manifest warning will be issued.
  """
  parameters: JSONObject

  """
  A path selector to target one or multiple chunks, since it can be a bash-like glob pattern, ex. "/my-section/my-chunk-123", "/my-section/my-chunk-*", "/**/my-chunk-*", etc.
  """
  path: String

  """
  Defines whether the chunk should be rendered in the document. If set "false" on a group chunk, it applies to its children recursively.
  """
  render: Boolean = true
}

input FilterFindOneItemCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneItemCustomisationCoverPlanesInput {
  _id: MongoID
  associatedItem: MongoID
  hideForSingleObject: Boolean
  mode: EnumItemCustomisationCoverPlanesMode
  nameId: String
  positions: FilterFindOneItemCustomisationCoverPlanesPositionsInput
  showOnStart: Boolean
  weight: Float
}

""""""
input FilterFindOneItemCustomisationCoverPlanesPositionsInput {
  above: Boolean
  behind: Boolean
  front: Boolean
  left: Boolean
  right: Boolean
}

""""""
input FilterFindOneItemCustomisationMaterialsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  associatedPalette: MongoID
  materials: [String]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  type: EnumItemCustomisationMaterialsType
  weight: Float
}

""""""
input FilterFindOneItemCustomisationSubObjectsHooksInput {
  _id: MongoID
  orientation: FilterFindOneItemCustomisationSubObjectsHooksOrientationInput
  position: FilterFindOneItemCustomisationSubObjectsHooksPositionInput
  type: EnumItemCustomisationSubObjectsHooksType
}

""""""
input FilterFindOneItemCustomisationSubObjectsHooksOrientationInput {
  x: Float
  y: Float
  z: Float
}

""""""
input FilterFindOneItemCustomisationSubObjectsHooksPositionInput {
  x: Float
  y: Float
  z: Float
}

""""""
input FilterFindOneItemCustomisationSubObjectsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  hooks: [FilterFindOneItemCustomisationSubObjectsHooksInput]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  weight: Float
}

""""""
input FilterFindOneItemCustomisationSymbolicRepresentationInput {
  _id: MongoID
  anglePositionIsRight: Boolean
  break3D: Boolean
  colors: EnumItemCustomisationSymbolicRepresentationColors
  displayDiagonals: Boolean
  doorType: EnumItemCustomisationSymbolicRepresentationDoorType
  drawerCount: Float
  symbolicIcon: EnumItemCustomisationSymbolicRepresentationSymbolicIcon
  symbolicIconShape: EnumItemCustomisationSymbolicRepresentationSymbolicIconShape
  symbolicIconSubType: EnumItemCustomisationSymbolicRepresentationSymbolicIconSubType
  type: EnumItemCustomisationSymbolicRepresentationType
}

""""""
input FilterFindOneItemFactSheetInput {
  _id: MongoID
  descriptionJson: JSONObject
  logoPicture: String
  pictureUrl: String
}

""""""
input FilterFindOneItemGuardrailInformationsInput {
  _id: MongoID
  meshes: [FilterFindOneItemGuardrailInformationsMeshesInput]
}

""""""
input FilterFindOneItemGuardrailInformationsMeshesDimensionsInput {
  height: Float
  length: Float
  thickness: Float
}

""""""
input FilterFindOneItemGuardrailInformationsMeshesInput {
  _id: MongoID
  dimensions: FilterFindOneItemGuardrailInformationsMeshesDimensionsInput
  materialId: MongoID
  meshId: MongoID
  options: FilterFindOneItemGuardrailInformationsMeshesOptionsInput
  placing: FilterFindOneItemGuardrailInformationsMeshesPlacingInput
  surface: FilterFindOneItemGuardrailInformationsMeshesSurfaceInput
  type: EnumItemGuardrailInformationsMeshesType
}

""""""
input FilterFindOneItemGuardrailInformationsMeshesOptionsInput {
  closeBottom: Boolean
  closeTop: Boolean
  shape: EnumItemGuardrailInformationsMeshesOptionsShape
}

""""""
input FilterFindOneItemGuardrailInformationsMeshesPlacingInput {
  elevation: Float
  endContraction: Float
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  placeEndPillarsDiagonally: Boolean
}

""""""
input FilterFindOneItemGuardrailInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
}

""""""
input FilterFindOneItemInput {
  AND: [FilterFindOneItemInput!]
  OR: [FilterFindOneItemInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneItemOperatorsInput
  articleCode: String
  brandId: MongoID
  buildingWingInfos: String
  canBeCutAlongHeight: Boolean
  canBeCutAlongLength: Boolean
  canBeCutAlongWidth: Boolean
  canBeDroppedOnZones: [EnumItemCanBeDroppedOnZones!]
  categoriesIds: [MongoID!]
  compositeInfos: String
  consideredAsDroppableZones: [EnumItemConsideredAsDroppableZones!]
  createdAt: Date
  createdById: MongoID
  customisationByItemsGroupId: MongoID
  customisationCoverPlanes: [FilterFindOneItemCustomisationCoverPlanesInput!]
  customisationMaterials: [FilterFindOneItemCustomisationMaterialsInput!]
  customisationSubObjects: [FilterFindOneItemCustomisationSubObjectsInput!]
  customisationSymbolicRepresentation: FilterFindOneItemCustomisationSymbolicRepresentationInput
  deleted: Boolean
  ean: String
  factSheet: FilterFindOneItemFactSheetInput
  guardrailInformations: FilterFindOneItemGuardrailInformationsInput
  metadata: [FilterFindOneItemMetadataInput!]
  minimumPricedDimensions: FilterFindOneItemMinimumPricedDimensionsInput
  modelUrl: String
  name: String
  outputAssets: FilterFindOneItemOutputAssetsInput
  physicalHeight: String
  physicalLength: String
  physicalWidth: String
  pillarInformations: FilterFindOneItemPillarInformationsInput
  priceCoefExclusion: Boolean
  priceGeneration: EnumItemPriceGeneration
  priceUnit: EnumItemPriceUnit
  publicNameTranslations: Translations
  roofInformations: FilterFindOneItemRoofInformationsInput
  scrapperTag: String
  slug: String
  stairsInformations: FilterFindOneItemStairsInformationsInput
  tags: [String!]
  thumbnailUrl: String
  tooltip3DTranslations: Translations
  type: EnumItemType
  updatedAt: Date
  updatedById: MongoID
  vegetationInformations: FilterFindOneItemVegetationInformationsInput
  wallInformations: FilterFindOneItemWallInformationsInput
}

""""""
input FilterFindOneItemMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input FilterFindOneItemMinimumPricedDimensionsInput {
  _id: MongoID
  depth: String
  width: String
}

input FilterFindOneItemNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneItemOperatorsInput {
  _id: FilterFindOneItem_idOperatorsInput
  createdById: FilterFindOneItemCreatedByIdOperatorsInput
  name: FilterFindOneItemNameOperatorsInput
  slug: FilterFindOneItemSlugOperatorsInput
}

""""""
input FilterFindOneItemOutputAssetsCoatingVariantsAlbedoInput {
  _id: MongoID
  name: String
  type: String
  url: String!
}

""""""
input FilterFindOneItemOutputAssetsCoatingVariantsInput {
  _id: MongoID
  albedo: FilterFindOneItemOutputAssetsCoatingVariantsAlbedoInput
  metallic: FilterFindOneItemOutputAssetsCoatingVariantsAlbedoInput
  name: String
  normal: FilterFindOneItemOutputAssetsCoatingVariantsAlbedoInput
  smoothness: FilterFindOneItemOutputAssetsCoatingVariantsAlbedoInput
}

""""""
input FilterFindOneItemOutputAssetsInput {
  _id: MongoID
  coatingVariants: [FilterFindOneItemOutputAssetsCoatingVariantsInput]
}

""""""
input FilterFindOneItemPillarInformationsInput {
  _id: MongoID
  cylinderSides: Float
  materials: [FilterFindOneItemPillarInformationsMaterialsInput]
  models: [FilterFindOneItemPillarInformationsModelsInput]
  necking: FilterFindOneItemPillarInformationsNeckingInput
}

""""""
input FilterFindOneItemPillarInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemPillarInformationsMaterialsType
}

""""""
input FilterFindOneItemPillarInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemPillarInformationsModelsType
  width: Float
}

""""""
input FilterFindOneItemPillarInformationsNeckingCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindOneItemPillarInformationsNeckingInput {
  crossSection: FilterFindOneItemPillarInformationsNeckingCrossSectionInput
  distanceToTop: Float
}

""""""
input FilterFindOneItemRoofInformationsCoveringInput {
  included: Boolean
  ridgeTiles: FilterFindOneItemRoofInformationsCoveringRidgeTilesInput
  sealingThickness: Float
  spaceBetweenSealingAndTiles: Float
  tilesThickness: Float
}

""""""
input FilterFindOneItemRoofInformationsCoveringRidgeTilesInput {
  innerRadius: Float
  length: Float
  radius: Float
}

""""""
input FilterFindOneItemRoofInformationsEavesStyleInput {
  type: EnumItemRoofInformationsEavesStyleType
}

""""""
input FilterFindOneItemRoofInformationsFlatRoofBorderDimensionsInput {
  height: Float
  width: Float
}

""""""
input FilterFindOneItemRoofInformationsFlatRoofInput {
  borderDimensions: FilterFindOneItemRoofInformationsFlatRoofBorderDimensionsInput
  gravelThickness: Float
  included: Boolean
}

""""""
input FilterFindOneItemRoofInformationsFramingInput {
  included: Boolean
  pieces: [FilterFindOneItemRoofInformationsFramingPiecesInput]
  type: EnumItemRoofInformationsFramingType
}

""""""
input FilterFindOneItemRoofInformationsFramingPiecesEnd_coordinateInput {
  x: Float
  y: Float
}

""""""
input FilterFindOneItemRoofInformationsFramingPiecesInput {
  _id: MongoID
  end_coordinate: FilterFindOneItemRoofInformationsFramingPiecesEnd_coordinateInput
  name: String
  start_coordinate: FilterFindOneItemRoofInformationsFramingPiecesStart_coordinateInput
  type: EnumItemRoofInformationsFramingPiecesType
}

""""""
input FilterFindOneItemRoofInformationsFramingPiecesStart_coordinateInput {
  x: Float
  y: Float
}

""""""
input FilterFindOneItemRoofInformationsGutterInput {
  included: Boolean
  innerRadius: Float
  radius: Float
}

""""""
input FilterFindOneItemRoofInformationsInput {
  _id: MongoID
  covering: FilterFindOneItemRoofInformationsCoveringInput
  eavesStyle: FilterFindOneItemRoofInformationsEavesStyleInput
  flatRoof: FilterFindOneItemRoofInformationsFlatRoofInput
  framing: FilterFindOneItemRoofInformationsFramingInput
  gutter: FilterFindOneItemRoofInformationsGutterInput
  materials: [FilterFindOneItemRoofInformationsMaterialsInput]
  models: [FilterFindOneItemRoofInformationsModelsInput]
  overhang: FilterFindOneItemRoofInformationsOverhangInput
  purlins: FilterFindOneItemRoofInformationsPurlinsInput
  rafters: FilterFindOneItemRoofInformationsRaftersInput
  ridgeBoard: FilterFindOneItemRoofInformationsRidgeBoardInput
  solarPanels: FilterFindOneItemRoofInformationsSolarPanelsInput
  topPlate: FilterFindOneItemRoofInformationsTopPlateInput
}

""""""
input FilterFindOneItemRoofInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemRoofInformationsMaterialsType
}

""""""
input FilterFindOneItemRoofInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemRoofInformationsModelsType
  width: Float
}

""""""
input FilterFindOneItemRoofInformationsOverhangInput {
  bargeboard: Float
  bargeboardPurlins: Float
  bargeboardRafters: Float
  eave: Float
  included: Boolean
}

""""""
input FilterFindOneItemRoofInformationsPurlinsBottomInput {
  height: Float
  width: Float
}

""""""
input FilterFindOneItemRoofInformationsPurlinsInput {
  bottom: FilterFindOneItemRoofInformationsPurlinsBottomInput
  included: Boolean
  intermediate: FilterFindOneItemRoofInformationsPurlinsIntermediateInput
  ridge: FilterFindOneItemRoofInformationsPurlinsRidgeInput
}

""""""
input FilterFindOneItemRoofInformationsPurlinsIntermediateInput {
  height: Float
  width: Float
}

""""""
input FilterFindOneItemRoofInformationsPurlinsRidgeInput {
  height: Float
  width: Float
}

""""""
input FilterFindOneItemRoofInformationsRaftersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindOneItemRoofInformationsRaftersInput {
  crossSection: FilterFindOneItemRoofInformationsRaftersCrossSectionInput
  included: Boolean
  typicalDistance: Float
}

""""""
input FilterFindOneItemRoofInformationsRidgeBoardCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindOneItemRoofInformationsRidgeBoardInput {
  crossSection: FilterFindOneItemRoofInformationsRidgeBoardCrossSectionInput
  included: Boolean
}

""""""
input FilterFindOneItemRoofInformationsSolarPanelsFrameInput {
  thickness: Float
  width: Float
}

""""""
input FilterFindOneItemRoofInformationsSolarPanelsInput {
  distanceToRoof: Float
  frame: FilterFindOneItemRoofInformationsSolarPanelsFrameInput
  height: Float
  included: Boolean
  thickness: Float
  width: Float
}

""""""
input FilterFindOneItemRoofInformationsTopPlateCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindOneItemRoofInformationsTopPlateInput {
  crossSection: FilterFindOneItemRoofInformationsTopPlateCrossSectionInput
  included: Boolean
}

input FilterFindOneItemSlugOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterFindOneItemStairsInformationsInput {
  _id: MongoID
  landing: FilterFindOneItemStairsInformationsLandingInput
  materials: [FilterFindOneItemStairsInformationsMaterialsInput]
  models: [FilterFindOneItemStairsInformationsModelsInput]
  railing: FilterFindOneItemStairsInformationsRailingInput
  steps: FilterFindOneItemStairsInformationsStepsInput
  stringers: FilterFindOneItemStairsInformationsStringersInput
}

""""""
input FilterFindOneItemStairsInformationsLandingInput {
  height: Float
}

""""""
input FilterFindOneItemStairsInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemStairsInformationsMaterialsType
}

""""""
input FilterFindOneItemStairsInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemStairsInformationsModelsType
  width: Float
}

""""""
input FilterFindOneItemStairsInformationsRailingBalustersInput {
  radius: Float
  typicalDistance: Float
}

""""""
input FilterFindOneItemStairsInformationsRailingHandrailCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindOneItemStairsInformationsRailingHandrailInput {
  crossSection: FilterFindOneItemStairsInformationsRailingHandrailCrossSectionInput
  elevation: Float
}

""""""
input FilterFindOneItemStairsInformationsRailingInput {
  balusters: FilterFindOneItemStairsInformationsRailingBalustersInput
  handrail: FilterFindOneItemStairsInformationsRailingHandrailInput
  posts: FilterFindOneItemStairsInformationsRailingPostsInput
}

""""""
input FilterFindOneItemStairsInformationsRailingPostsCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindOneItemStairsInformationsRailingPostsInput {
  crossSection: FilterFindOneItemStairsInformationsRailingPostsCrossSectionInput
}

""""""
input FilterFindOneItemStairsInformationsStepsInput {
  risers: FilterFindOneItemStairsInformationsStepsRisersInput
  treats: FilterFindOneItemStairsInformationsStepsTreatsInput
}

""""""
input FilterFindOneItemStairsInformationsStepsRisersInput {
  height: Float
  thickness: Float
}

""""""
input FilterFindOneItemStairsInformationsStepsTreatsInput {
  height: Float
  nose: Float
}

""""""
input FilterFindOneItemStairsInformationsStringersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterFindOneItemStairsInformationsStringersInput {
  crossSection: FilterFindOneItemStairsInformationsStringersCrossSectionInput
  overTreat: Float
}

""""""
input FilterFindOneItemVegetationInformationsInput {
  _id: MongoID
  canBeSelected: Boolean
}

""""""
input FilterFindOneItemWallInformationsApplicationInput {
  bothSides: Boolean
  exteriorFacesExteriorWalls: Boolean
  interiorFacesExteriorWalls: Boolean
  interiorWalls: Boolean
  overRegularWall: Boolean
}

""""""
input FilterFindOneItemWallInformationsInput {
  _id: MongoID
  application: FilterFindOneItemWallInformationsApplicationInput
  class: EnumItemWallInformationsClass
  meshes: [FilterFindOneItemWallInformationsMeshesInput]
}

""""""
input FilterFindOneItemWallInformationsMeshesDimensionsInput {
  length: Float
  thickness: Float
}

""""""
input FilterFindOneItemWallInformationsMeshesDisplayInput {
  autoCut: Boolean
  whenWallsHigh: Boolean
  whenWallsLow: Boolean
}

""""""
input FilterFindOneItemWallInformationsMeshesInput {
  _id: MongoID
  buildingMaterial: EnumItemWallInformationsMeshesBuildingMaterial
  dimensions: FilterFindOneItemWallInformationsMeshesDimensionsInput
  display: FilterFindOneItemWallInformationsMeshesDisplayInput
  materialId: MongoID
  meshId: MongoID
  name: String
  options: FilterFindOneItemWallInformationsMeshesOptionsInput
  overlapPriority: Float
  placing: FilterFindOneItemWallInformationsMeshesPlacingInput
  segmentTypes: FilterFindOneItemWallInformationsMeshesSegmentTypesInput
  surface: FilterFindOneItemWallInformationsMeshesSurfaceInput
  type: EnumItemWallInformationsMeshesType
}

""""""
input FilterFindOneItemWallInformationsMeshesOptionsInput {
  closeBack: Boolean
  closeBottom: Boolean
  closeFront: Boolean
  closeSides: Boolean
  closeTop: Boolean
  hidden: Boolean
  nextToDoorsAndWindows: Boolean
  paintable: Boolean
  shape: EnumItemWallInformationsMeshesOptionsShape
  skewOnCorners: Boolean
}

""""""
input FilterFindOneItemWallInformationsMeshesPlacingBottomElevationInput {
  _id: MongoID
  elevation: Float
  reference: EnumItemWallInformationsMeshesPlacingBottomElevationReference
}

""""""
input FilterFindOneItemWallInformationsMeshesPlacingInput {
  beamDirection: EnumItemWallInformationsMeshesPlacingBeamDirection
  bottomElevation: FilterFindOneItemWallInformationsMeshesPlacingBottomElevationInput
  depthOffset: Float
  doorPostOffset: Float
  endContraction: Float
  endDepth: FilterFindOneItemWallInformationsMeshesPlacingStartDepthInput
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  moveVerticesAbove: Float
  pivotIsOnTop: Boolean
  placeEndPillarsDiagonally: Boolean
  repetitionFilter: EnumItemWallInformationsMeshesPlacingRepetitionFilter
  startDepth: FilterFindOneItemWallInformationsMeshesPlacingStartDepthInput
  stretchVertically: Boolean
  topElevation: FilterFindOneItemWallInformationsMeshesPlacingBottomElevationInput
}

""""""
input FilterFindOneItemWallInformationsMeshesPlacingStartDepthInput {
  _id: MongoID
  depth: Float
  plusOnTop: Float
  reference: EnumItemWallInformationsMeshesPlacingStartDepthReference
}

""""""
input FilterFindOneItemWallInformationsMeshesSegmentTypesInput {
  doors: Boolean
  walls: Boolean
  windows: Boolean
}

""""""
input FilterFindOneItemWallInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
  swapUV: Boolean
}

input FilterFindOneItem_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneItemsGroupInput {
  AND: [FilterFindOneItemsGroupInput!]
  OR: [FilterFindOneItemsGroupInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneItemsGroupOperatorsInput
  brandId: MongoID
  choiceIsMandatory: Boolean
  generated: Boolean
  itemsIds: [MongoID!]
  name: String
  option: FilterFindOneItemsGroupOptionInput
  publicNameTranslations: Translations
  shouldBeOpenInGUI: Boolean
  thumbnailPictureName: String
  type: EnumItemsGroupType
}

input FilterFindOneItemsGroupNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneItemsGroupOperatorsInput {
  _id: FilterFindOneItemsGroup_idOperatorsInput
  name: FilterFindOneItemsGroupNameOperatorsInput
}

""""""
input FilterFindOneItemsGroupOptionInput {
  _id: MongoID
  baseItemId: MongoID
  choiceIsMandatory: Boolean
  disableDefaultChoice: Boolean
  positions: [FilterFindOneItemsGroupOptionPositionsInput!]
}

""""""
input FilterFindOneItemsGroupOptionPositionsInput {
  _id: MongoID
  margins: FilterFindOneItemsGroupOptionPositionsMarginsInput
  placement: EnumItemsGroupOptionPositionsPlacement
  rotation: EnumItemsGroupOptionPositionsRotation
}

""""""
input FilterFindOneItemsGroupOptionPositionsMarginsInput {
  x: Float
  y: Float
  z: Float
}

input FilterFindOneItemsGroup_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOnePaletteColorsInput {
  _id: MongoID
  a: Float
  b: Float
  code: String
  g: Float
  metallic: Float
  nameTranslations: Translations
  r: Float
  roughness: Float
}

""""""
input FilterFindOnePaletteInput {
  AND: [FilterFindOnePaletteInput!]
  OR: [FilterFindOnePaletteInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOnePaletteOperatorsInput
  brandId: MongoID
  colors: [FilterFindOnePaletteColorsInput]
  name: String
  type: EnumPaletteType
}

input FilterFindOnePaletteNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOnePaletteOperatorsInput {
  _id: FilterFindOnePalette_idOperatorsInput
  name: FilterFindOnePaletteNameOperatorsInput
}

input FilterFindOnePalette_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOnePictureInput {
  AND: [FilterFindOnePictureInput!]
  OR: [FilterFindOnePictureInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOnePictureOperatorsInput
  brandId: MongoID
  name: String
  size: Float
  url: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOnePictureOperatorsInput {
  _id: FilterFindOnePicture_idOperatorsInput
}

input FilterFindOnePicture_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOnePipelineJobDeadlineJobIdOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterFindOnePipelineJobInput {
  AND: [FilterFindOnePipelineJobInput!]
  OR: [FilterFindOnePipelineJobInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOnePipelineJobOperatorsInput
  brandId: MongoID
  completedDate: Date
  deadlineJobId: String
  settings: FilterFindOnePipelineJobSettingsInput
  startDate: Date
  state: EnumPipelineJobState
  submitDate: Date

  """Only find pipeline jobs that were created for a specific item"""
  targetItemId: MongoID
  type: EnumPipelineJobType
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOnePipelineJobOperatorsInput {
  _id: FilterFindOnePipelineJob_idOperatorsInput
  deadlineJobId: FilterFindOnePipelineJobDeadlineJobIdOperatorsInput
}

""""""
input FilterFindOnePipelineJobSettingsConvertPBRMaterialToAssetBundleInput {
  _id: MongoID
  assetUrl: String
  itemId: MongoID
}

""""""
input FilterFindOnePipelineJobSettingsInput {
  _id: MongoID
  convertPBRMaterialToAssetBundle: FilterFindOnePipelineJobSettingsConvertPBRMaterialToAssetBundleInput
}

input FilterFindOnePipelineJob_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOnePlannedMaintenanceInput {
  AND: [FilterFindOnePlannedMaintenanceInput!]
  OR: [FilterFindOnePlannedMaintenanceInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOnePlannedMaintenanceOperatorsInput
  durationHours: Float
  reasonTranslations: Translations
  startDate: Date
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOnePlannedMaintenanceOperatorsInput {
  _id: FilterFindOnePlannedMaintenance_idOperatorsInput
}

input FilterFindOnePlannedMaintenance_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOnePriceTableInput {
  AND: [FilterFindOnePriceTableInput!]
  OR: [FilterFindOnePriceTableInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOnePriceTableOperatorsInput
  brandId: MongoID
  currencyName: String
  displayEan: Boolean
  globalDiscount: Float
  moniker: String
  multiplyingCoefficient: Float
  name: String
  prices: [FilterFindOnePriceTablePricesInput]
  symbol: String
  vatRate: Float
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOnePriceTableOperatorsInput {
  _id: FilterFindOnePriceTable_idOperatorsInput
}

""""""
input FilterFindOnePriceTablePricesInput {
  _id: MongoID
  articleIdentifier: String
  ean: String
  itemsIds: [MongoID]
  price: Float
  sourceItemId: MongoID
}

input FilterFindOnePriceTable_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneProductScanInput {
  AND: [FilterFindOneProductScanInput!]
  OR: [FilterFindOneProductScanInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneProductScanOperatorsInput
  brandId: MongoID
  creationDate: Date
  metallic: Float
  notes: String
  productName: String
  reference: String
  scans: [FilterFindOneProductScanScansInput]
  size: FilterFindOneProductScanSizeInput
  state: EnumProductScanState
  thumbnail: FilterFindOneProductScanScansInputImagesInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneProductScanOperatorsInput {
  _id: FilterFindOneProductScan_idOperatorsInput
}

""""""
input FilterFindOneProductScanScansInput {
  _id: MongoID
  generatedImages: [FilterFindOneProductScanScansInputImagesInput]
  inputImages: [FilterFindOneProductScanScansInputImagesInput]
  name: String
  type: EnumProductScanScansType
}

""""""
input FilterFindOneProductScanScansInputImagesInput {
  _id: MongoID
  format: String!
  name: String!
  url: String!
}

""""""
input FilterFindOneProductScanSizeInput {
  height: String
  length: String
  width: String
}

input FilterFindOneProductScan_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOnePromoterApartmentUnitBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOnePromoterApartmentUnitCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOnePromoterApartmentUnitInput {
  AND: [FilterFindOnePromoterApartmentUnitInput!]
  OR: [FilterFindOnePromoterApartmentUnitInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOnePromoterApartmentUnitOperatorsInput
  brandId: MongoID
  buildingNumber: String
  comment: String
  createdAt: Date
  createdById: MongoID
  floor: String
  metadata: Metadata
  purchaserFirstName: String
  purchaserMail: String
  purchaserSurname: String
  saveId: MongoID
  state: EnumPromoterApartmentUnitState
  unitNumber: String
  unitTypeId: MongoID
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOnePromoterApartmentUnitOperatorsInput {
  _id: FilterFindOnePromoterApartmentUnit_idOperatorsInput
  brandId: FilterFindOnePromoterApartmentUnitBrandIdOperatorsInput
  createdById: FilterFindOnePromoterApartmentUnitCreatedByIdOperatorsInput
  unitTypeId: FilterFindOnePromoterApartmentUnitUnitTypeIdOperatorsInput
}

input FilterFindOnePromoterApartmentUnitTypeBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOnePromoterApartmentUnitTypeCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOnePromoterApartmentUnitTypeHistoryInput {
  _id: MongoID
  comment: String
  saveId: MongoID
  state: EnumPromoterApartmentUnitTypeHistoryState
  version: Int
}

""""""
input FilterFindOnePromoterApartmentUnitTypeInput {
  AND: [FilterFindOnePromoterApartmentUnitTypeInput!]
  OR: [FilterFindOnePromoterApartmentUnitTypeInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOnePromoterApartmentUnitTypeOperatorsInput
  brandId: MongoID
  createdAt: Date
  createdById: MongoID
  currentVersion: Int
  descriptionJson: JSONObject
  history: [FilterFindOnePromoterApartmentUnitTypeHistoryInput!]
  metadata: Metadata
  name: String
  programId: MongoID
  saveFolderId: MongoID
  state: EnumPromoterApartmentUnitTypeState
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOnePromoterApartmentUnitTypeOperatorsInput {
  _id: FilterFindOnePromoterApartmentUnitType_idOperatorsInput
  brandId: FilterFindOnePromoterApartmentUnitTypeBrandIdOperatorsInput
  createdById: FilterFindOnePromoterApartmentUnitTypeCreatedByIdOperatorsInput
  programId: FilterFindOnePromoterApartmentUnitTypeProgramIdOperatorsInput
}

input FilterFindOnePromoterApartmentUnitTypeProgramIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOnePromoterApartmentUnitType_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOnePromoterApartmentUnitUnitTypeIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOnePromoterApartmentUnit_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOnePromoterProgramBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOnePromoterProgramCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOnePromoterProgramInput {
  AND: [FilterFindOnePromoterProgramInput!]
  OR: [FilterFindOnePromoterProgramInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOnePromoterProgramOperatorsInput
  address: String
  brandId: MongoID
  city: String
  createdAt: Date
  createdById: MongoID
  isArchived: Boolean
  itemFilter: FilterFindOnePromoterProgramItemFilterInput
  metadata: Metadata
  name: String
  planEditor: FilterFindOnePromoterProgramPlanEditorInput
  planUrls: [String!]
  promoterId: MongoID
  saveFolderId: MongoID
  slug: String
  state: EnumPromoterProgramState
  stylePresetGroupId: MongoID
  updatedAt: Date
  updatedById: MongoID
  zipCode: Float
}

""""""
input FilterFindOnePromoterProgramItemFilterInput {
  itemWhiteList: [MongoID!]
}

input FilterFindOnePromoterProgramNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOnePromoterProgramOperatorsInput {
  _id: FilterFindOnePromoterProgram_idOperatorsInput
  brandId: FilterFindOnePromoterProgramBrandIdOperatorsInput
  createdById: FilterFindOnePromoterProgramCreatedByIdOperatorsInput
  name: FilterFindOnePromoterProgramNameOperatorsInput
  promoterId: FilterFindOnePromoterProgramPromoterIdOperatorsInput
  slug: FilterFindOnePromoterProgramSlugOperatorsInput
}

""""""
input FilterFindOnePromoterProgramPlanEditorInput {
  data: JSON
  dataFormatVersion: Int
}

input FilterFindOnePromoterProgramPromoterIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOnePromoterProgramSlugOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterFindOnePromoterProgram_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOneSalesRecordBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOneSalesRecordCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterFindOneSalesRecordCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneSalesRecordInput {
  AND: [FilterFindOneSalesRecordInput!]
  OR: [FilterFindOneSalesRecordInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneSalesRecordOperatorsInput
  brandId: MongoID
  createdAt: Date
  createdById: MongoID
  finalCustomerMetadata: Metadata
  metadata: Metadata
  saveId: MongoID
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneSalesRecordOperatorsInput {
  _id: FilterFindOneSalesRecord_idOperatorsInput
  brandId: FilterFindOneSalesRecordBrandIdOperatorsInput
  createdAt: FilterFindOneSalesRecordCreatedAtOperatorsInput
  createdById: FilterFindOneSalesRecordCreatedByIdOperatorsInput
  updatedAt: FilterFindOneSalesRecordUpdatedAtOperatorsInput
}

input FilterFindOneSalesRecordUpdatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterFindOneSalesRecord_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterFindOneTutorialInput {
  AND: [FilterFindOneTutorialInput!]
  OR: [FilterFindOneTutorialInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneTutorialOperatorsInput
  brandId: MongoID
  displayOnlyOnce: Boolean
  name: String
  points: [FilterFindOneTutorialPointInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneTutorialOperatorsInput {
  _id: FilterFindOneTutorial_idOperatorsInput
}

""""""
input FilterFindOneTutorialPointInput {
  _id: MongoID
  illustration: String
  target: EnumTutorialPointTarget
  textTranslations: Translations
  titleTranslations: Translations
}

input FilterFindOneTutorial_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOneUserCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterFindOneUserCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterFindOneUserEmailOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterFindOneUserInput {
  AND: [FilterFindOneUserInput!]
  OR: [FilterFindOneUserInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneUserOperatorsInput
  createdAt: Date
  createdById: MongoID
  email: String
  favoriteItemsIds: [MongoID!]
  favoriteSavesIds: [MongoID!]
  name: String
  roles: [String!]
  updatedAt: Date
}

input FilterFindOneUserNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneUserOperatorsInput {
  _id: FilterFindOneUser_idOperatorsInput
  createdAt: FilterFindOneUserCreatedAtOperatorsInput
  createdById: FilterFindOneUserCreatedByIdOperatorsInput
  email: FilterFindOneUserEmailOperatorsInput
  name: FilterFindOneUserNameOperatorsInput
}

input FilterFindOneUser_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterRemoveOneAccessPointBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneAccessPointInput {
  AND: [FilterRemoveOneAccessPointInput!]
  OR: [FilterRemoveOneAccessPointInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneAccessPointOperatorsInput
  areSavesPubliclyAvailableById: Boolean
  authorizedCatalogIds: [MongoID]
  brandId: MongoID
  ecotaxePriceTableId: MongoID
  name: String
  parametersScrapperId: MongoID
  parametersTunnelId: MongoID
  priceTableId: MongoID
  supportButton: FilterRemoveOneAccessPointSupportButtonInput
}

input FilterRemoveOneAccessPointNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneAccessPointOperatorsInput {
  _id: FilterRemoveOneAccessPoint_idOperatorsInput
  brandId: FilterRemoveOneAccessPointBrandIdOperatorsInput
  name: FilterRemoveOneAccessPointNameOperatorsInput
}

""""""
input FilterRemoveOneAccessPointSupportButtonInput {
  icon: EnumAccessPointSupportButtonIcon
  tooltipTranslations: Translations
  type: EnumAccessPointSupportButtonType
  value: String
}

input FilterRemoveOneAccessPoint_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneBarcodeCollectionBarcodeReferencesInput {
  _id: MongoID
  ean: String
  id: String
}

input FilterRemoveOneBarcodeCollectionCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneBarcodeCollectionInput {
  AND: [FilterRemoveOneBarcodeCollectionInput!]
  OR: [FilterRemoveOneBarcodeCollectionInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneBarcodeCollectionOperatorsInput
  barcodeReferences: [FilterRemoveOneBarcodeCollectionBarcodeReferencesInput!]
  createdAt: Date
  createdById: MongoID
  name: String
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneBarcodeCollectionOperatorsInput {
  _id: FilterRemoveOneBarcodeCollection_idOperatorsInput
  createdById: FilterRemoveOneBarcodeCollectionCreatedByIdOperatorsInput
}

input FilterRemoveOneBarcodeCollection_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneBrandColorsInput {
  dataProtection: String
  legalNotice: String
  loadingScreenBackground: String
  loadingScreenLogoPicture: String
  loadingScreenProgressBarBackground: String
  loadingScreenProgressBarBorder: String
  loadingScreenProgressBarContent: String
  loadingScreenText: String
  meshes: FilterRemoveOneBrandColorsMeshesInput
  planElement: FilterRemoveOneBrandColorsPlanElementInput
  primary: String
  questHeaderBackground: String
  questHeaderBody: String
  questHeaderTitle: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

""""""
input FilterRemoveOneBrandColorsMeshesInput {
  wallCut: String
}

""""""
input FilterRemoveOneBrandColorsPlanElementInput {
  floor: String
  wall: String
  window: String
}

""""""
input FilterRemoveOneBrandInput {
  AND: [FilterRemoveOneBrandInput!]
  OR: [FilterRemoveOneBrandInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneBrandOperatorsInput
  colors: FilterRemoveOneBrandColorsInput
  createdAt: Date
  name: String
  promoterWebsiteConfiguration: FilterRemoveOneBrandPromoterWebsiteConfigurationInput
  satelliteConfiguration: FilterRemoveOneBrandSatelliteConfigurationInput
  shareCode: String
  slug: String
  updatedAt: Date
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneBrandOperatorsInput {
  _id: FilterRemoveOneBrand_idOperatorsInput
  shareCode: FilterRemoveOneBrandShareCodeOperatorsInput
  slug: FilterRemoveOneBrandSlugOperatorsInput
}

""""""
input FilterRemoveOneBrandParametersPricingInput {
  AND: [FilterRemoveOneBrandParametersPricingInput!]
  OR: [FilterRemoveOneBrandParametersPricingInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneBrandParametersPricingOperatorsInput
  brandId: MongoID
  enabled: Boolean
  useArticleCode: Boolean
  useEAN: Boolean
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneBrandParametersPricingOperatorsInput {
  _id: FilterRemoveOneBrandParametersPricing_idOperatorsInput
}

input FilterRemoveOneBrandParametersPricing_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneBrandParametersScrapperInput {
  AND: [FilterRemoveOneBrandParametersScrapperInput!]
  OR: [FilterRemoveOneBrandParametersScrapperInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneBrandParametersScrapperOperatorsInput
  allowAnonymousSave: Boolean
  brandId: MongoID
  enabled: Boolean
  export: Boolean
  geometry: Boolean
  name: String
  objects: Boolean
  postManualSaveTriggerSteps: [FilterRemoveOneBrandParametersScrapperPostManualSaveTriggerStepsInput!]
  screenshots: Boolean
  steps: [FilterRemoveOneBrandParametersScrapperStepsInput!]
  watermark: FilterRemoveOneBrandParametersScrapperWatermarkInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneBrandParametersScrapperOperatorsInput {
  _id: FilterRemoveOneBrandParametersScrapper_idOperatorsInput
}

""""""
input FilterRemoveOneBrandParametersScrapperPostManualSaveTriggerStepsInput {
  _id: MongoID
  triggerPopup: FilterRemoveOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput
  type: EnumBrandParametersScrapperPostManualSaveTriggerStepsType
}

""""""
input FilterRemoveOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput {
  _id: MongoID
  buttonType: EnumBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupButtonType
  textTranslations: Translations
  titleTranslations: Translations
  yesNoButtons: FilterRemoveOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput
}

""""""
input FilterRemoveOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput {
  stateProperty: String
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsFilterInput {
  expression: String
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsInput {
  _id: MongoID
  filter: FilterRemoveOneBrandParametersScrapperStepsFilterInput
  map: FilterRemoveOneBrandParametersScrapperStepsMapInput
  stepType: EnumBrandParametersScrapperStepsStepType
  stepVerb: String
  tap: FilterRemoveOneBrandParametersScrapperStepsTapInput
  verbFilter: EnumBrandParametersScrapperStepsVerbFilter
  verbMap: EnumBrandParametersScrapperStepsVerbMap
  verbTap: EnumBrandParametersScrapperStepsVerbTap
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsMapInput {
  kitchenPricer: FilterRemoveOneBrandParametersScrapperStepsMapKitchenPricerInput
  payloadGenerator: FilterRemoveOneBrandParametersScrapperStepsMapPayloadGeneratorInput
  pdfReportGenerator: FilterRemoveOneBrandParametersScrapperStepsMapPdfReportGeneratorInput
  plinthCalculator: FilterRemoveOneBrandParametersScrapperStepsMapPlinthCalculatorInput
  reportGenerator: FilterRemoveOneBrandParametersScrapperStepsMapReportGeneratorInput
  terracePricer: FilterRemoveOneBrandParametersScrapperStepsMapTerracePricerInput
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsMapKitchenPricerInput {
  apiToken: String
  apiUrl: String
  barcodeCollectionId: MongoID
  projectBaseUrl: String
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsMapPayloadGeneratorInput {
  addSaveName: Boolean
  addUpdateToken: Boolean
  dynamicParameterForTunnelStateInformation: String
  tunnelStateKeys: [String!]
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsMapPdfReportGeneratorInput {
  payloadType: EnumBrandParametersScrapperStepsMapPdfReportGeneratorPayloadType
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsMapPlinthCalculatorInput {
  bigPlinthId: MongoID
  littlePlinthId: MongoID
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsMapReportGeneratorInput {
  chunksManifest: [FilterRemoveOneInputDocumentChunkManifestInput!]
  documentName: String
  htmlTemplate: String
  mode: EnumBrandParametersScrapperStepsMapReportGeneratorMode
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsMapTerracePricerInput {
  itemsCatalogId: MongoID
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsTapInput {
  outputToApi: FilterRemoveOneBrandParametersScrapperStepsTapOutputToApiInput
  sendEmail: FilterRemoveOneBrandParametersScrapperStepsTapSendEmailInput
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsTapOutputToApiInput {
  apiToken: String
  apiUrl: String
  signPayload: Boolean
}

""""""
input FilterRemoveOneBrandParametersScrapperStepsTapSendEmailInput {
  attachmentName: String
  dynamicParameterEmailAdress: String
  emailSourceType: EnumBrandParametersScrapperStepsTapSendEmailEmailSourceType
  sendReportAsAttachment: Boolean
  staticEmailAdress: String
  subject: String
  template: String
}

""""""
input FilterRemoveOneBrandParametersScrapperWatermarkInput {
  alpha: Float
  color: String
  enabled: Boolean
  picture: String
  repetition: Float
}

input FilterRemoveOneBrandParametersScrapper_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneBrandParametersTunnelApertureParametersInput {
  doorClassicDefaultItem: String
  doorEntryDefaultItem: String
  doorEntrySidelightDefaultItem: String
  doorExteriorCustomisationItemsGroupId: String
  doorInteriorCustomisationItemsGroupId: String
  doubleDoorDefaultItem: String
  doubleDoorlikeWindowDefaultItem: String
  doubleSwingDoorDefaultItem: String
  doubleWindowDefaultItem: String
  garageDoorDefaultItem: String
  simpleDoorlikeWindowDefaultItem: String
  slitWindowDefaultItem: String
  tripleDoorlikeWindowDefaultItem: String
  tripleWindowDefaultItem: String
  windowCustomisationItemsGroupId: String
  windowDefaultItem: String
}

""""""
input FilterRemoveOneBrandParametersTunnelColorsParametersInput {
  nameHelpAtlas: String
  nameOptionsAtlas: String
  nameToolsAtlas: String
  primary: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

""""""
input FilterRemoveOneBrandParametersTunnelCustomLinkButtonInput {
  link: String
  name: String
}

""""""
input FilterRemoveOneBrandParametersTunnelDefaultCameraParametersInput {
  visitCameraParameters: FilterRemoveOneBrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput
}

""""""
input FilterRemoveOneBrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput {
  defaultVisitFieldOfView: Float
}

""""""
input FilterRemoveOneBrandParametersTunnelDefaultCoatingParametersInput {
  defaultExteriorFlooringId: MongoID
  defaultGardenFlooringId: MongoID
  defaultInteriorFlooringId: MongoID
}

""""""
input FilterRemoveOneBrandParametersTunnelInput {
  AND: [FilterRemoveOneBrandParametersTunnelInput!]
  OR: [FilterRemoveOneBrandParametersTunnelInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneBrandParametersTunnelOperatorsInput
  apertureParameters: FilterRemoveOneBrandParametersTunnelApertureParametersInput
  brandId: MongoID
  colorsParameters: FilterRemoveOneBrandParametersTunnelColorsParametersInput
  customLinkButton: FilterRemoveOneBrandParametersTunnelCustomLinkButtonInput
  defaultCameraParameters: FilterRemoveOneBrandParametersTunnelDefaultCameraParametersInput
  defaultCoatingParameters: FilterRemoveOneBrandParametersTunnelDefaultCoatingParametersInput
  defaultDayTime: Float
  defaultSnapDistance: Float
  disableHeaderShadow: Boolean
  displayCartItemNumber: Boolean
  displayCustomisationTagFurnitureOptions: Boolean
  displayFurnitureSubstitutesOptions: Boolean
  displaySaveName: Boolean
  displayStepsHeader: Boolean
  enabled: Boolean
  globalOptions: [String!]
  includeAllBrandItemsInCache: Boolean
  initialStepIfLoadingSave: Float
  isReloadFromLocalStorageEnabled: Boolean
  logoLinkOnClick: String
  logoPictureReference: String
  name: String
  persistentVariables: [FilterRemoveOneBrandParametersTunnelPersistentVariablesInput!]
  preload: Boolean
  savePanelParameters: FilterRemoveOneBrandParametersTunnelSavePanelParametersInput
  steps: [FilterRemoveOneBrandParametersTunnelStepInput!]
  wallParameters: FilterRemoveOneBrandParametersTunnelWallParametersInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneBrandParametersTunnelOperatorsInput {
  _id: FilterRemoveOneBrandParametersTunnel_idOperatorsInput
}

""""""
input FilterRemoveOneBrandParametersTunnelPersistentVariablesInput {
  config: JSON
  name: String
}

""""""
input FilterRemoveOneBrandParametersTunnelSavePanelParametersInput {
  isCustomerModuleEnabled: Boolean
  isExportButtonEnabled: Boolean
}

""""""
input FilterRemoveOneBrandParametersTunnelStepInput {
  _id: MongoID
  analytics: FilterRemoveOneBrandParametersTunnelStepsAnalyticsInput
  config: JSON
  description: String
  htmlTemplate: String
  isShownInStepper: Boolean
  module: EnumBrandParametersTunnelStepsModule
  name: String
  publicNameTranslations: Translations
  resetTunnelOnActivation: Boolean
}

""""""
input FilterRemoveOneBrandParametersTunnelStepsAnalyticsChoiceReducerInput {
  isEnabled: Boolean
  stateProperties: [String]
}

""""""
input FilterRemoveOneBrandParametersTunnelStepsAnalyticsInput {
  choiceReducer: FilterRemoveOneBrandParametersTunnelStepsAnalyticsChoiceReducerInput
}

""""""
input FilterRemoveOneBrandParametersTunnelWallParametersExteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

""""""
input FilterRemoveOneBrandParametersTunnelWallParametersInput {
  doorLintelLevel: Float
  exteriorCeilingLintelHeight: Float
  exteriorWallThickness: FilterRemoveOneBrandParametersTunnelWallParametersExteriorWallThicknessInput
  floorHeight: Float
  groundFloorLevel: Float
  innerHeight: Float
  interiorCeilingLintelHeight: Float
  interiorWallThickness: FilterRemoveOneBrandParametersTunnelWallParametersInteriorWallThicknessInput
  optionsPanelWallConfig: FilterRemoveOneBrandParametersTunnelWallParametersOptionsPanelWallConfigInput
  windowLintelLevel: Float
  windowSillLevel: Float
}

""""""
input FilterRemoveOneBrandParametersTunnelWallParametersInteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

""""""
input FilterRemoveOneBrandParametersTunnelWallParametersOptionsPanelWallConfigInput {
  displayOnlyWallType: Boolean
  displayWallHeightExteriorFloor: Boolean
  displayWallHeightInteriorFloor: Boolean
  displayWallThicknessDropdown: Boolean
  displayWallThicknessInput: Boolean
  usePartitionLabelForInteriorWall: Boolean
}

input FilterRemoveOneBrandParametersTunnel_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneBrandPromoterWebsiteConfigurationInput {
  acquirerValidateUnitAccessPointId: MongoID
  metadataConfiguration: FilterRemoveOneBrandPromoterWebsiteConfigurationMetadataConfigurationInput
  operatorTypeAccessPointId: MongoID
  promoterValidateTypeAccessPointId: MongoID
  unitTypeSaveModelId: MongoID
}

""""""
input FilterRemoveOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataType
}

""""""
input FilterRemoveOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataType
}

""""""
input FilterRemoveOneBrandPromoterWebsiteConfigurationMetadataConfigurationInput {
  apartmentUnitMetadata: [FilterRemoveOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput!]
  apartmentUnitTypeIdMetadataKey: String
  apartmentUnitTypeMetadata: [FilterRemoveOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput!]
  programMetadata: [FilterRemoveOneBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput!]
}

""""""
input FilterRemoveOneBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataType
}

""""""
input FilterRemoveOneBrandSatelliteConfigurationInput {
  satelliteUrl: String
}

input FilterRemoveOneBrandShareCodeOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterRemoveOneBrandSlugOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterRemoveOneBrand_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneCatalogFolderInput {
  AND: [FilterRemoveOneCatalogFolderInput!]
  OR: [FilterRemoveOneCatalogFolderInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneCatalogFolderOperatorsInput
  associatedEcotaxePriceTableId: MongoID
  associatedPriceTableId: MongoID
  brand: MongoID
  createdAt: Date
  iconId: Int
  metadata: [FilterRemoveOneCatalogFolderMetadataInput]
  name: String
  parent: MongoID
  public: Boolean
  publicNameTranslations: Translations
  published: Boolean
  rootId: MongoID
  sharedWithIds: [MongoID]
  thumbnailId: String
  thumbnailUrl: String
  tiles: [FilterRemoveOneCatalogFolderTilesInput]
  tilesBackgroundColor: String
  tilesColumnAmount: Float
  tilesColumnGap: Float
  tilesColumnSizes: [Float]
  tilesRowGap: Float
  tilesRowSizes: [Float]
  type: EnumCatalogFolderType
  updatedAt: Date
  virtual: Boolean
}

""""""
input FilterRemoveOneCatalogFolderMetadataInput {
  _id: MongoID
  key: String
  value: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneCatalogFolderOperatorsInput {
  _id: FilterRemoveOneCatalogFolder_idOperatorsInput
}

""""""
input FilterRemoveOneCatalogFolderTilesImagePlacementInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

""""""
input FilterRemoveOneCatalogFolderTilesInput {
  _id: MongoID
  advancedTextTranslations: Translations
  backgroundColor: String
  backgroundOpacity: Float
  borderRadius: Float
  catalogSourceId: MongoID
  construction: MongoID
  descriptionTextSize: Float
  folder: MongoID
  hasShadow: Boolean
  height: Float
  horizontalTextAlignement: EnumCatalogFolderTilesHorizontalTextAlignement
  imageId: String
  imagePlacement: FilterRemoveOneCatalogFolderTilesImagePlacementInput
  imageUrl: String
  isImagePlacementFree: Boolean
  isShownOnDesktop: Boolean
  isShownOnMobile: Boolean
  item: MongoID
  itemsGroup: MongoID
  mask: Boolean
  maskColor: String
  maskOpacity: Float
  metadata: [FilterRemoveOneCatalogFolderTilesMetadataInput]
  posX: Float
  posY: Float
  saveSelectedInTunnelStateVariable: String
  stylePresetId: MongoID
  textColor: String
  textDescriptionTranslations: Translations
  textPadding: FilterRemoveOneCatalogFolderTilesTextPaddingInput
  textTitleTranslations: Translations
  titleTextColor: String
  titleTextSize: Float
  tooltipTranslations: Translations
  type: EnumCatalogFolderTilesType
  useAdvancedText: Boolean
  verticalTextAlignement: EnumCatalogFolderTilesVerticalTextAlignement
  width: Float
}

""""""
input FilterRemoveOneCatalogFolderTilesMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input FilterRemoveOneCatalogFolderTilesTextPaddingInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

input FilterRemoveOneCatalogFolder_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterRemoveOneCustomerAddressOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterRemoveOneCustomerBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterRemoveOneCustomerCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterRemoveOneCustomerEmailOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterRemoveOneCustomerFirstnameAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterRemoveOneCustomerFirstnameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterRemoveOneCustomerGenderAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterRemoveOneCustomerGenderOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterRemoveOneCustomerInput {
  AND: [FilterRemoveOneCustomerInput!]
  OR: [FilterRemoveOneCustomerInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneCustomerOperatorsInput
  address: String
  brandId: MongoID
  city: String
  createdAt: Date
  createdById: MongoID
  email: String
  firstname: String
  firstnameAdditional: String
  gender: String
  genderAdditional: String
  mobilePhone: String
  phone: String
  surname: String
  surnameAdditional: String
  updatedAt: Date
  zipCode: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneCustomerOperatorsInput {
  _id: FilterRemoveOneCustomer_idOperatorsInput
  address: FilterRemoveOneCustomerAddressOperatorsInput
  brandId: FilterRemoveOneCustomerBrandIdOperatorsInput
  createdById: FilterRemoveOneCustomerCreatedByIdOperatorsInput
  email: FilterRemoveOneCustomerEmailOperatorsInput
  firstname: FilterRemoveOneCustomerFirstnameOperatorsInput
  firstnameAdditional: FilterRemoveOneCustomerFirstnameAdditionalOperatorsInput
  gender: FilterRemoveOneCustomerGenderOperatorsInput
  genderAdditional: FilterRemoveOneCustomerGenderAdditionalOperatorsInput
  surname: FilterRemoveOneCustomerSurnameOperatorsInput
  surnameAdditional: FilterRemoveOneCustomerSurnameAdditionalOperatorsInput
}

input FilterRemoveOneCustomerSurnameAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterRemoveOneCustomerSurnameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterRemoveOneCustomer_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

"""Configures the parameters of one or multiple chunks in the document."""
input FilterRemoveOneInputDocumentChunkManifestInput {
  """
  Render-time parameters object, implementing the chunk's parameters schema as given in the output manifest. The type of this property is loosely-typed in GraphQL, but verified at runtime against that schema. If the parameters passed are invalid against the schema, the chunk will be disabled and a manifest warning will be issued.
  """
  parameters: JSONObject

  """
  A path selector to target one or multiple chunks, since it can be a bash-like glob pattern, ex. "/my-section/my-chunk-123", "/my-section/my-chunk-*", "/**/my-chunk-*", etc.
  """
  path: String

  """
  Defines whether the chunk should be rendered in the document. If set "false" on a group chunk, it applies to its children recursively.
  """
  render: Boolean = true
}

input FilterRemoveOneItemCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneItemCustomisationCoverPlanesInput {
  _id: MongoID
  associatedItem: MongoID
  hideForSingleObject: Boolean
  mode: EnumItemCustomisationCoverPlanesMode
  nameId: String
  positions: FilterRemoveOneItemCustomisationCoverPlanesPositionsInput
  showOnStart: Boolean
  weight: Float
}

""""""
input FilterRemoveOneItemCustomisationCoverPlanesPositionsInput {
  above: Boolean
  behind: Boolean
  front: Boolean
  left: Boolean
  right: Boolean
}

""""""
input FilterRemoveOneItemCustomisationMaterialsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  associatedPalette: MongoID
  materials: [String]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  type: EnumItemCustomisationMaterialsType
  weight: Float
}

""""""
input FilterRemoveOneItemCustomisationSubObjectsHooksInput {
  _id: MongoID
  orientation: FilterRemoveOneItemCustomisationSubObjectsHooksOrientationInput
  position: FilterRemoveOneItemCustomisationSubObjectsHooksPositionInput
  type: EnumItemCustomisationSubObjectsHooksType
}

""""""
input FilterRemoveOneItemCustomisationSubObjectsHooksOrientationInput {
  x: Float
  y: Float
  z: Float
}

""""""
input FilterRemoveOneItemCustomisationSubObjectsHooksPositionInput {
  x: Float
  y: Float
  z: Float
}

""""""
input FilterRemoveOneItemCustomisationSubObjectsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  hooks: [FilterRemoveOneItemCustomisationSubObjectsHooksInput]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  weight: Float
}

""""""
input FilterRemoveOneItemCustomisationSymbolicRepresentationInput {
  _id: MongoID
  anglePositionIsRight: Boolean
  break3D: Boolean
  colors: EnumItemCustomisationSymbolicRepresentationColors
  displayDiagonals: Boolean
  doorType: EnumItemCustomisationSymbolicRepresentationDoorType
  drawerCount: Float
  symbolicIcon: EnumItemCustomisationSymbolicRepresentationSymbolicIcon
  symbolicIconShape: EnumItemCustomisationSymbolicRepresentationSymbolicIconShape
  symbolicIconSubType: EnumItemCustomisationSymbolicRepresentationSymbolicIconSubType
  type: EnumItemCustomisationSymbolicRepresentationType
}

""""""
input FilterRemoveOneItemFactSheetInput {
  _id: MongoID
  descriptionJson: JSONObject
  logoPicture: String
  pictureUrl: String
}

""""""
input FilterRemoveOneItemGuardrailInformationsInput {
  _id: MongoID
  meshes: [FilterRemoveOneItemGuardrailInformationsMeshesInput]
}

""""""
input FilterRemoveOneItemGuardrailInformationsMeshesDimensionsInput {
  height: Float
  length: Float
  thickness: Float
}

""""""
input FilterRemoveOneItemGuardrailInformationsMeshesInput {
  _id: MongoID
  dimensions: FilterRemoveOneItemGuardrailInformationsMeshesDimensionsInput
  materialId: MongoID
  meshId: MongoID
  options: FilterRemoveOneItemGuardrailInformationsMeshesOptionsInput
  placing: FilterRemoveOneItemGuardrailInformationsMeshesPlacingInput
  surface: FilterRemoveOneItemGuardrailInformationsMeshesSurfaceInput
  type: EnumItemGuardrailInformationsMeshesType
}

""""""
input FilterRemoveOneItemGuardrailInformationsMeshesOptionsInput {
  closeBottom: Boolean
  closeTop: Boolean
  shape: EnumItemGuardrailInformationsMeshesOptionsShape
}

""""""
input FilterRemoveOneItemGuardrailInformationsMeshesPlacingInput {
  elevation: Float
  endContraction: Float
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  placeEndPillarsDiagonally: Boolean
}

""""""
input FilterRemoveOneItemGuardrailInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
}

""""""
input FilterRemoveOneItemInput {
  AND: [FilterRemoveOneItemInput!]
  OR: [FilterRemoveOneItemInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneItemOperatorsInput
  articleCode: String
  brandId: MongoID
  buildingWingInfos: String
  canBeCutAlongHeight: Boolean
  canBeCutAlongLength: Boolean
  canBeCutAlongWidth: Boolean
  canBeDroppedOnZones: [EnumItemCanBeDroppedOnZones!]
  categoriesIds: [MongoID!]
  compositeInfos: String
  consideredAsDroppableZones: [EnumItemConsideredAsDroppableZones!]
  createdAt: Date
  createdById: MongoID
  customisationByItemsGroupId: MongoID
  customisationCoverPlanes: [FilterRemoveOneItemCustomisationCoverPlanesInput!]
  customisationMaterials: [FilterRemoveOneItemCustomisationMaterialsInput!]
  customisationSubObjects: [FilterRemoveOneItemCustomisationSubObjectsInput!]
  customisationSymbolicRepresentation: FilterRemoveOneItemCustomisationSymbolicRepresentationInput
  deleted: Boolean
  ean: String
  factSheet: FilterRemoveOneItemFactSheetInput
  guardrailInformations: FilterRemoveOneItemGuardrailInformationsInput
  metadata: [FilterRemoveOneItemMetadataInput!]
  minimumPricedDimensions: FilterRemoveOneItemMinimumPricedDimensionsInput
  modelUrl: String
  name: String
  outputAssets: FilterRemoveOneItemOutputAssetsInput
  physicalHeight: String
  physicalLength: String
  physicalWidth: String
  pillarInformations: FilterRemoveOneItemPillarInformationsInput
  priceCoefExclusion: Boolean
  priceGeneration: EnumItemPriceGeneration
  priceUnit: EnumItemPriceUnit
  publicNameTranslations: Translations
  roofInformations: FilterRemoveOneItemRoofInformationsInput
  scrapperTag: String
  slug: String
  stairsInformations: FilterRemoveOneItemStairsInformationsInput
  tags: [String!]
  thumbnailUrl: String
  tooltip3DTranslations: Translations
  type: EnumItemType
  updatedAt: Date
  updatedById: MongoID
  vegetationInformations: FilterRemoveOneItemVegetationInformationsInput
  wallInformations: FilterRemoveOneItemWallInformationsInput
}

""""""
input FilterRemoveOneItemMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input FilterRemoveOneItemMinimumPricedDimensionsInput {
  _id: MongoID
  depth: String
  width: String
}

input FilterRemoveOneItemNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneItemOperatorsInput {
  _id: FilterRemoveOneItem_idOperatorsInput
  createdById: FilterRemoveOneItemCreatedByIdOperatorsInput
  name: FilterRemoveOneItemNameOperatorsInput
  slug: FilterRemoveOneItemSlugOperatorsInput
}

""""""
input FilterRemoveOneItemOutputAssetsCoatingVariantsAlbedoInput {
  _id: MongoID
  name: String
  type: String
  url: String!
}

""""""
input FilterRemoveOneItemOutputAssetsCoatingVariantsInput {
  _id: MongoID
  albedo: FilterRemoveOneItemOutputAssetsCoatingVariantsAlbedoInput
  metallic: FilterRemoveOneItemOutputAssetsCoatingVariantsAlbedoInput
  name: String
  normal: FilterRemoveOneItemOutputAssetsCoatingVariantsAlbedoInput
  smoothness: FilterRemoveOneItemOutputAssetsCoatingVariantsAlbedoInput
}

""""""
input FilterRemoveOneItemOutputAssetsInput {
  _id: MongoID
  coatingVariants: [FilterRemoveOneItemOutputAssetsCoatingVariantsInput]
}

""""""
input FilterRemoveOneItemPillarInformationsInput {
  _id: MongoID
  cylinderSides: Float
  materials: [FilterRemoveOneItemPillarInformationsMaterialsInput]
  models: [FilterRemoveOneItemPillarInformationsModelsInput]
  necking: FilterRemoveOneItemPillarInformationsNeckingInput
}

""""""
input FilterRemoveOneItemPillarInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemPillarInformationsMaterialsType
}

""""""
input FilterRemoveOneItemPillarInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemPillarInformationsModelsType
  width: Float
}

""""""
input FilterRemoveOneItemPillarInformationsNeckingCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterRemoveOneItemPillarInformationsNeckingInput {
  crossSection: FilterRemoveOneItemPillarInformationsNeckingCrossSectionInput
  distanceToTop: Float
}

""""""
input FilterRemoveOneItemRoofInformationsCoveringInput {
  included: Boolean
  ridgeTiles: FilterRemoveOneItemRoofInformationsCoveringRidgeTilesInput
  sealingThickness: Float
  spaceBetweenSealingAndTiles: Float
  tilesThickness: Float
}

""""""
input FilterRemoveOneItemRoofInformationsCoveringRidgeTilesInput {
  innerRadius: Float
  length: Float
  radius: Float
}

""""""
input FilterRemoveOneItemRoofInformationsEavesStyleInput {
  type: EnumItemRoofInformationsEavesStyleType
}

""""""
input FilterRemoveOneItemRoofInformationsFlatRoofBorderDimensionsInput {
  height: Float
  width: Float
}

""""""
input FilterRemoveOneItemRoofInformationsFlatRoofInput {
  borderDimensions: FilterRemoveOneItemRoofInformationsFlatRoofBorderDimensionsInput
  gravelThickness: Float
  included: Boolean
}

""""""
input FilterRemoveOneItemRoofInformationsFramingInput {
  included: Boolean
  pieces: [FilterRemoveOneItemRoofInformationsFramingPiecesInput]
  type: EnumItemRoofInformationsFramingType
}

""""""
input FilterRemoveOneItemRoofInformationsFramingPiecesEnd_coordinateInput {
  x: Float
  y: Float
}

""""""
input FilterRemoveOneItemRoofInformationsFramingPiecesInput {
  _id: MongoID
  end_coordinate: FilterRemoveOneItemRoofInformationsFramingPiecesEnd_coordinateInput
  name: String
  start_coordinate: FilterRemoveOneItemRoofInformationsFramingPiecesStart_coordinateInput
  type: EnumItemRoofInformationsFramingPiecesType
}

""""""
input FilterRemoveOneItemRoofInformationsFramingPiecesStart_coordinateInput {
  x: Float
  y: Float
}

""""""
input FilterRemoveOneItemRoofInformationsGutterInput {
  included: Boolean
  innerRadius: Float
  radius: Float
}

""""""
input FilterRemoveOneItemRoofInformationsInput {
  _id: MongoID
  covering: FilterRemoveOneItemRoofInformationsCoveringInput
  eavesStyle: FilterRemoveOneItemRoofInformationsEavesStyleInput
  flatRoof: FilterRemoveOneItemRoofInformationsFlatRoofInput
  framing: FilterRemoveOneItemRoofInformationsFramingInput
  gutter: FilterRemoveOneItemRoofInformationsGutterInput
  materials: [FilterRemoveOneItemRoofInformationsMaterialsInput]
  models: [FilterRemoveOneItemRoofInformationsModelsInput]
  overhang: FilterRemoveOneItemRoofInformationsOverhangInput
  purlins: FilterRemoveOneItemRoofInformationsPurlinsInput
  rafters: FilterRemoveOneItemRoofInformationsRaftersInput
  ridgeBoard: FilterRemoveOneItemRoofInformationsRidgeBoardInput
  solarPanels: FilterRemoveOneItemRoofInformationsSolarPanelsInput
  topPlate: FilterRemoveOneItemRoofInformationsTopPlateInput
}

""""""
input FilterRemoveOneItemRoofInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemRoofInformationsMaterialsType
}

""""""
input FilterRemoveOneItemRoofInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemRoofInformationsModelsType
  width: Float
}

""""""
input FilterRemoveOneItemRoofInformationsOverhangInput {
  bargeboard: Float
  bargeboardPurlins: Float
  bargeboardRafters: Float
  eave: Float
  included: Boolean
}

""""""
input FilterRemoveOneItemRoofInformationsPurlinsBottomInput {
  height: Float
  width: Float
}

""""""
input FilterRemoveOneItemRoofInformationsPurlinsInput {
  bottom: FilterRemoveOneItemRoofInformationsPurlinsBottomInput
  included: Boolean
  intermediate: FilterRemoveOneItemRoofInformationsPurlinsIntermediateInput
  ridge: FilterRemoveOneItemRoofInformationsPurlinsRidgeInput
}

""""""
input FilterRemoveOneItemRoofInformationsPurlinsIntermediateInput {
  height: Float
  width: Float
}

""""""
input FilterRemoveOneItemRoofInformationsPurlinsRidgeInput {
  height: Float
  width: Float
}

""""""
input FilterRemoveOneItemRoofInformationsRaftersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterRemoveOneItemRoofInformationsRaftersInput {
  crossSection: FilterRemoveOneItemRoofInformationsRaftersCrossSectionInput
  included: Boolean
  typicalDistance: Float
}

""""""
input FilterRemoveOneItemRoofInformationsRidgeBoardCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterRemoveOneItemRoofInformationsRidgeBoardInput {
  crossSection: FilterRemoveOneItemRoofInformationsRidgeBoardCrossSectionInput
  included: Boolean
}

""""""
input FilterRemoveOneItemRoofInformationsSolarPanelsFrameInput {
  thickness: Float
  width: Float
}

""""""
input FilterRemoveOneItemRoofInformationsSolarPanelsInput {
  distanceToRoof: Float
  frame: FilterRemoveOneItemRoofInformationsSolarPanelsFrameInput
  height: Float
  included: Boolean
  thickness: Float
  width: Float
}

""""""
input FilterRemoveOneItemRoofInformationsTopPlateCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterRemoveOneItemRoofInformationsTopPlateInput {
  crossSection: FilterRemoveOneItemRoofInformationsTopPlateCrossSectionInput
  included: Boolean
}

input FilterRemoveOneItemSlugOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterRemoveOneItemStairsInformationsInput {
  _id: MongoID
  landing: FilterRemoveOneItemStairsInformationsLandingInput
  materials: [FilterRemoveOneItemStairsInformationsMaterialsInput]
  models: [FilterRemoveOneItemStairsInformationsModelsInput]
  railing: FilterRemoveOneItemStairsInformationsRailingInput
  steps: FilterRemoveOneItemStairsInformationsStepsInput
  stringers: FilterRemoveOneItemStairsInformationsStringersInput
}

""""""
input FilterRemoveOneItemStairsInformationsLandingInput {
  height: Float
}

""""""
input FilterRemoveOneItemStairsInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemStairsInformationsMaterialsType
}

""""""
input FilterRemoveOneItemStairsInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemStairsInformationsModelsType
  width: Float
}

""""""
input FilterRemoveOneItemStairsInformationsRailingBalustersInput {
  radius: Float
  typicalDistance: Float
}

""""""
input FilterRemoveOneItemStairsInformationsRailingHandrailCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterRemoveOneItemStairsInformationsRailingHandrailInput {
  crossSection: FilterRemoveOneItemStairsInformationsRailingHandrailCrossSectionInput
  elevation: Float
}

""""""
input FilterRemoveOneItemStairsInformationsRailingInput {
  balusters: FilterRemoveOneItemStairsInformationsRailingBalustersInput
  handrail: FilterRemoveOneItemStairsInformationsRailingHandrailInput
  posts: FilterRemoveOneItemStairsInformationsRailingPostsInput
}

""""""
input FilterRemoveOneItemStairsInformationsRailingPostsCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterRemoveOneItemStairsInformationsRailingPostsInput {
  crossSection: FilterRemoveOneItemStairsInformationsRailingPostsCrossSectionInput
}

""""""
input FilterRemoveOneItemStairsInformationsStepsInput {
  risers: FilterRemoveOneItemStairsInformationsStepsRisersInput
  treats: FilterRemoveOneItemStairsInformationsStepsTreatsInput
}

""""""
input FilterRemoveOneItemStairsInformationsStepsRisersInput {
  height: Float
  thickness: Float
}

""""""
input FilterRemoveOneItemStairsInformationsStepsTreatsInput {
  height: Float
  nose: Float
}

""""""
input FilterRemoveOneItemStairsInformationsStringersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterRemoveOneItemStairsInformationsStringersInput {
  crossSection: FilterRemoveOneItemStairsInformationsStringersCrossSectionInput
  overTreat: Float
}

""""""
input FilterRemoveOneItemVegetationInformationsInput {
  _id: MongoID
  canBeSelected: Boolean
}

""""""
input FilterRemoveOneItemWallInformationsApplicationInput {
  bothSides: Boolean
  exteriorFacesExteriorWalls: Boolean
  interiorFacesExteriorWalls: Boolean
  interiorWalls: Boolean
  overRegularWall: Boolean
}

""""""
input FilterRemoveOneItemWallInformationsInput {
  _id: MongoID
  application: FilterRemoveOneItemWallInformationsApplicationInput
  class: EnumItemWallInformationsClass
  meshes: [FilterRemoveOneItemWallInformationsMeshesInput]
}

""""""
input FilterRemoveOneItemWallInformationsMeshesDimensionsInput {
  length: Float
  thickness: Float
}

""""""
input FilterRemoveOneItemWallInformationsMeshesDisplayInput {
  autoCut: Boolean
  whenWallsHigh: Boolean
  whenWallsLow: Boolean
}

""""""
input FilterRemoveOneItemWallInformationsMeshesInput {
  _id: MongoID
  buildingMaterial: EnumItemWallInformationsMeshesBuildingMaterial
  dimensions: FilterRemoveOneItemWallInformationsMeshesDimensionsInput
  display: FilterRemoveOneItemWallInformationsMeshesDisplayInput
  materialId: MongoID
  meshId: MongoID
  name: String
  options: FilterRemoveOneItemWallInformationsMeshesOptionsInput
  overlapPriority: Float
  placing: FilterRemoveOneItemWallInformationsMeshesPlacingInput
  segmentTypes: FilterRemoveOneItemWallInformationsMeshesSegmentTypesInput
  surface: FilterRemoveOneItemWallInformationsMeshesSurfaceInput
  type: EnumItemWallInformationsMeshesType
}

""""""
input FilterRemoveOneItemWallInformationsMeshesOptionsInput {
  closeBack: Boolean
  closeBottom: Boolean
  closeFront: Boolean
  closeSides: Boolean
  closeTop: Boolean
  hidden: Boolean
  nextToDoorsAndWindows: Boolean
  paintable: Boolean
  shape: EnumItemWallInformationsMeshesOptionsShape
  skewOnCorners: Boolean
}

""""""
input FilterRemoveOneItemWallInformationsMeshesPlacingBottomElevationInput {
  _id: MongoID
  elevation: Float
  reference: EnumItemWallInformationsMeshesPlacingBottomElevationReference
}

""""""
input FilterRemoveOneItemWallInformationsMeshesPlacingInput {
  beamDirection: EnumItemWallInformationsMeshesPlacingBeamDirection
  bottomElevation: FilterRemoveOneItemWallInformationsMeshesPlacingBottomElevationInput
  depthOffset: Float
  doorPostOffset: Float
  endContraction: Float
  endDepth: FilterRemoveOneItemWallInformationsMeshesPlacingStartDepthInput
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  moveVerticesAbove: Float
  pivotIsOnTop: Boolean
  placeEndPillarsDiagonally: Boolean
  repetitionFilter: EnumItemWallInformationsMeshesPlacingRepetitionFilter
  startDepth: FilterRemoveOneItemWallInformationsMeshesPlacingStartDepthInput
  stretchVertically: Boolean
  topElevation: FilterRemoveOneItemWallInformationsMeshesPlacingBottomElevationInput
}

""""""
input FilterRemoveOneItemWallInformationsMeshesPlacingStartDepthInput {
  _id: MongoID
  depth: Float
  plusOnTop: Float
  reference: EnumItemWallInformationsMeshesPlacingStartDepthReference
}

""""""
input FilterRemoveOneItemWallInformationsMeshesSegmentTypesInput {
  doors: Boolean
  walls: Boolean
  windows: Boolean
}

""""""
input FilterRemoveOneItemWallInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
  swapUV: Boolean
}

input FilterRemoveOneItem_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneItemsGroupInput {
  AND: [FilterRemoveOneItemsGroupInput!]
  OR: [FilterRemoveOneItemsGroupInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneItemsGroupOperatorsInput
  brandId: MongoID
  choiceIsMandatory: Boolean
  generated: Boolean
  itemsIds: [MongoID!]
  name: String
  option: FilterRemoveOneItemsGroupOptionInput
  publicNameTranslations: Translations
  shouldBeOpenInGUI: Boolean
  thumbnailPictureName: String
  type: EnumItemsGroupType
}

input FilterRemoveOneItemsGroupNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneItemsGroupOperatorsInput {
  _id: FilterRemoveOneItemsGroup_idOperatorsInput
  name: FilterRemoveOneItemsGroupNameOperatorsInput
}

""""""
input FilterRemoveOneItemsGroupOptionInput {
  _id: MongoID
  baseItemId: MongoID
  choiceIsMandatory: Boolean
  disableDefaultChoice: Boolean
  positions: [FilterRemoveOneItemsGroupOptionPositionsInput!]
}

""""""
input FilterRemoveOneItemsGroupOptionPositionsInput {
  _id: MongoID
  margins: FilterRemoveOneItemsGroupOptionPositionsMarginsInput
  placement: EnumItemsGroupOptionPositionsPlacement
  rotation: EnumItemsGroupOptionPositionsRotation
}

""""""
input FilterRemoveOneItemsGroupOptionPositionsMarginsInput {
  x: Float
  y: Float
  z: Float
}

input FilterRemoveOneItemsGroup_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOnePaletteColorsInput {
  _id: MongoID
  a: Float
  b: Float
  code: String
  g: Float
  metallic: Float
  nameTranslations: Translations
  r: Float
  roughness: Float
}

""""""
input FilterRemoveOnePaletteInput {
  AND: [FilterRemoveOnePaletteInput!]
  OR: [FilterRemoveOnePaletteInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOnePaletteOperatorsInput
  brandId: MongoID
  colors: [FilterRemoveOnePaletteColorsInput]
  name: String
  type: EnumPaletteType
}

input FilterRemoveOnePaletteNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOnePaletteOperatorsInput {
  _id: FilterRemoveOnePalette_idOperatorsInput
  name: FilterRemoveOnePaletteNameOperatorsInput
}

input FilterRemoveOnePalette_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOnePictureInput {
  AND: [FilterRemoveOnePictureInput!]
  OR: [FilterRemoveOnePictureInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOnePictureOperatorsInput
  brandId: MongoID
  name: String
  size: Float
  url: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOnePictureOperatorsInput {
  _id: FilterRemoveOnePicture_idOperatorsInput
}

input FilterRemoveOnePicture_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterRemoveOnePipelineJobDeadlineJobIdOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterRemoveOnePipelineJobInput {
  AND: [FilterRemoveOnePipelineJobInput!]
  OR: [FilterRemoveOnePipelineJobInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOnePipelineJobOperatorsInput
  brandId: MongoID
  completedDate: Date
  deadlineJobId: String
  settings: FilterRemoveOnePipelineJobSettingsInput
  startDate: Date
  state: EnumPipelineJobState
  submitDate: Date
  type: EnumPipelineJobType
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOnePipelineJobOperatorsInput {
  _id: FilterRemoveOnePipelineJob_idOperatorsInput
  deadlineJobId: FilterRemoveOnePipelineJobDeadlineJobIdOperatorsInput
}

""""""
input FilterRemoveOnePipelineJobSettingsConvertPBRMaterialToAssetBundleInput {
  _id: MongoID
  assetUrl: String
  itemId: MongoID
}

""""""
input FilterRemoveOnePipelineJobSettingsInput {
  _id: MongoID
  convertPBRMaterialToAssetBundle: FilterRemoveOnePipelineJobSettingsConvertPBRMaterialToAssetBundleInput
}

input FilterRemoveOnePipelineJob_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOnePlannedMaintenanceInput {
  AND: [FilterRemoveOnePlannedMaintenanceInput!]
  OR: [FilterRemoveOnePlannedMaintenanceInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOnePlannedMaintenanceOperatorsInput
  durationHours: Float
  reasonTranslations: Translations
  startDate: Date
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOnePlannedMaintenanceOperatorsInput {
  _id: FilterRemoveOnePlannedMaintenance_idOperatorsInput
}

input FilterRemoveOnePlannedMaintenance_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOnePriceTableInput {
  AND: [FilterRemoveOnePriceTableInput!]
  OR: [FilterRemoveOnePriceTableInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOnePriceTableOperatorsInput
  brandId: MongoID
  currencyName: String
  displayEan: Boolean
  globalDiscount: Float
  moniker: String
  multiplyingCoefficient: Float
  name: String
  prices: [FilterRemoveOnePriceTablePricesInput]
  symbol: String
  vatRate: Float
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOnePriceTableOperatorsInput {
  _id: FilterRemoveOnePriceTable_idOperatorsInput
}

""""""
input FilterRemoveOnePriceTablePricesInput {
  _id: MongoID
  articleIdentifier: String
  ean: String
  itemsIds: [MongoID]
  price: Float
  sourceItemId: MongoID
}

input FilterRemoveOnePriceTable_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneProductScanInput {
  AND: [FilterRemoveOneProductScanInput!]
  OR: [FilterRemoveOneProductScanInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneProductScanOperatorsInput
  brandId: MongoID
  creationDate: Date
  metallic: Float
  notes: String
  productName: String
  reference: String
  scans: [FilterRemoveOneProductScanScansInput]
  size: FilterRemoveOneProductScanSizeInput
  state: EnumProductScanState
  thumbnail: FilterRemoveOneProductScanScansInputImagesInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneProductScanOperatorsInput {
  _id: FilterRemoveOneProductScan_idOperatorsInput
}

""""""
input FilterRemoveOneProductScanScansInput {
  _id: MongoID
  generatedImages: [FilterRemoveOneProductScanScansInputImagesInput]
  inputImages: [FilterRemoveOneProductScanScansInputImagesInput]
  name: String
  type: EnumProductScanScansType
}

""""""
input FilterRemoveOneProductScanScansInputImagesInput {
  _id: MongoID
  format: String!
  name: String!
  url: String!
}

""""""
input FilterRemoveOneProductScanSizeInput {
  height: String
  length: String
  width: String
}

input FilterRemoveOneProductScan_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterRemoveOneSalesRecordBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterRemoveOneSalesRecordCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterRemoveOneSalesRecordCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneSalesRecordInput {
  AND: [FilterRemoveOneSalesRecordInput!]
  OR: [FilterRemoveOneSalesRecordInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneSalesRecordOperatorsInput
  brandId: MongoID
  createdAt: Date
  createdById: MongoID
  finalCustomerMetadata: Metadata
  metadata: Metadata
  saveId: MongoID
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneSalesRecordOperatorsInput {
  _id: FilterRemoveOneSalesRecord_idOperatorsInput
  brandId: FilterRemoveOneSalesRecordBrandIdOperatorsInput
  createdAt: FilterRemoveOneSalesRecordCreatedAtOperatorsInput
  createdById: FilterRemoveOneSalesRecordCreatedByIdOperatorsInput
  updatedAt: FilterRemoveOneSalesRecordUpdatedAtOperatorsInput
}

input FilterRemoveOneSalesRecordUpdatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterRemoveOneSalesRecord_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterRemoveOneSaveCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterRemoveOneSaveCreatedByOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneSaveFolderInput {
  AND: [FilterRemoveOneSaveFolderInput!]
  OR: [FilterRemoveOneSaveFolderInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneSaveFolderOperatorsInput
  brandId: MongoID
  createdAt: Date
  name: String
  parentId: MongoID
  slug: String
  updatedAt: Date
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneSaveFolderOperatorsInput {
  _id: FilterRemoveOneSaveFolder_idOperatorsInput
}

input FilterRemoveOneSaveFolder_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneSaveInput {
  AND: [FilterRemoveOneSaveInput!]
  OR: [FilterRemoveOneSaveInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneSaveOperatorsInput
  additionalInfo: JSON
  apartmentUnitTypeId: MongoID
  brandId: MongoID
  chosenStylePresetId: MongoID
  createdAt: Date
  createdBy: MongoID
  createdFromAP: MongoID
  customerId: MongoID
  data: String
  dataFormatVersion: Int
  dataUrl: String
  description: String
  isReadonly: Boolean
  isTemplate: Boolean
  metadata: Metadata
  moduleKitchenCustomData: String
  name: String
  parent: MongoID
  quantitySurveyJSON: String
  saveFolderId: MongoID
  storageBytesUsage: Float
  stylePresetGroupId: MongoID
  tags: [String]
  thumbnailUrl: String
  tunnelState: JSON
  type: EnumSaveType
  updatedAt: Date
  updatedBy: MongoID
  visitViewpoints: [FilterRemoveOneSaveVisitViewpointsInput!]
}

input FilterRemoveOneSaveIsTemplateOperatorsInput {
  exists: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nin: [Boolean]
}

input FilterRemoveOneSaveNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneSaveOperatorsInput {
  _id: FilterRemoveOneSave_idOperatorsInput
  createdAt: FilterRemoveOneSaveCreatedAtOperatorsInput
  createdBy: FilterRemoveOneSaveCreatedByOperatorsInput
  isTemplate: FilterRemoveOneSaveIsTemplateOperatorsInput
  name: FilterRemoveOneSaveNameOperatorsInput
  updatedAt: FilterRemoveOneSaveUpdatedAtOperatorsInput
}

input FilterRemoveOneSaveUpdatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

""""""
input FilterRemoveOneSaveVisitViewpointsInput {
  _id: MongoID
  orientation: FilterRemoveOneSaveVisitViewpointsOrientationInput
  position: FilterRemoveOneSaveVisitViewpointsPositionInput
}

""""""
input FilterRemoveOneSaveVisitViewpointsOrientationInput {
  x: Float
  y: Float
  z: Float
}

""""""
input FilterRemoveOneSaveVisitViewpointsPositionInput {
  x: Float
  y: Float
  z: Float
}

input FilterRemoveOneSave_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneSavesGroupInput {
  AND: [FilterRemoveOneSavesGroupInput!]
  OR: [FilterRemoveOneSavesGroupInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneSavesGroupOperatorsInput
  brandId: MongoID
  name: String
  publicNameTranslations: Translations
  savesIds: [MongoID]
  thumbnailPictureName: String
  type: EnumSavesGroupType
}

input FilterRemoveOneSavesGroupNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneSavesGroupOperatorsInput {
  _id: FilterRemoveOneSavesGroup_idOperatorsInput
  name: FilterRemoveOneSavesGroupNameOperatorsInput
}

input FilterRemoveOneSavesGroup_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterRemoveOneStylePresetCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

""""""
input FilterRemoveOneStylePresetCustomisationPresetsInput {
  _id: MongoID
  chosenItemId: MongoID
  customisationNameId: String
  filterTag: String
  rotationCondition: EnumStylePresetCustomisationPresetsRotationCondition
}

""""""
input FilterRemoveOneStylePresetGroupInput {
  AND: [FilterRemoveOneStylePresetGroupInput!]
  OR: [FilterRemoveOneStylePresetGroupInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneStylePresetGroupOperatorsInput
  brandId: MongoID
  name: String
  stylePresetIds: [MongoID]
}

input FilterRemoveOneStylePresetGroupNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneStylePresetGroupOperatorsInput {
  _id: FilterRemoveOneStylePresetGroup_idOperatorsInput
  name: FilterRemoveOneStylePresetGroupNameOperatorsInput
}

input FilterRemoveOneStylePresetGroup_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneStylePresetInput {
  AND: [FilterRemoveOneStylePresetInput!]
  OR: [FilterRemoveOneStylePresetInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneStylePresetOperatorsInput
  brandId: MongoID
  createdAt: Date
  customisationPresets: [FilterRemoveOneStylePresetCustomisationPresetsInput]
  name: String
  publicNameTranslations: Translations
  updatedAt: Date
}

input FilterRemoveOneStylePresetNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneStylePresetOperatorsInput {
  _id: FilterRemoveOneStylePreset_idOperatorsInput
  createdAt: FilterRemoveOneStylePresetCreatedAtOperatorsInput
  name: FilterRemoveOneStylePresetNameOperatorsInput
  updatedAt: FilterRemoveOneStylePresetUpdatedAtOperatorsInput
}

input FilterRemoveOneStylePresetUpdatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterRemoveOneStylePreset_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterRemoveOneTutorialInput {
  AND: [FilterRemoveOneTutorialInput!]
  OR: [FilterRemoveOneTutorialInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneTutorialOperatorsInput
  brandId: MongoID
  displayOnlyOnce: Boolean
  name: String
  points: [FilterRemoveOneTutorialPointInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneTutorialOperatorsInput {
  _id: FilterRemoveOneTutorial_idOperatorsInput
}

""""""
input FilterRemoveOneTutorialPointInput {
  _id: MongoID
  illustration: String
  target: EnumTutorialPointTarget
  textTranslations: Translations
  titleTranslations: Translations
}

input FilterRemoveOneTutorial_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterRemoveOneUserCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterRemoveOneUserCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterRemoveOneUserEmailOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterRemoveOneUserInput {
  AND: [FilterRemoveOneUserInput!]
  OR: [FilterRemoveOneUserInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneUserOperatorsInput
  createdAt: Date
  createdById: MongoID
  email: String
  favoriteItemsIds: [MongoID!]
  favoriteSavesIds: [MongoID!]
  name: String
  roles: [String!]
  updatedAt: Date
}

input FilterRemoveOneUserNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneUserOperatorsInput {
  _id: FilterRemoveOneUser_idOperatorsInput
  createdAt: FilterRemoveOneUserCreatedAtOperatorsInput
  createdById: FilterRemoveOneUserCreatedByIdOperatorsInput
  email: FilterRemoveOneUserEmailOperatorsInput
  name: FilterRemoveOneUserNameOperatorsInput
}

input FilterRemoveOneUser_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterUpdateOneAccessPointBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneAccessPointInput {
  AND: [FilterUpdateOneAccessPointInput!]
  OR: [FilterUpdateOneAccessPointInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneAccessPointOperatorsInput
  areSavesPubliclyAvailableById: Boolean
  authorizedCatalogIds: [MongoID]
  brandId: MongoID
  ecotaxePriceTableId: MongoID
  name: String
  parametersScrapperId: MongoID
  parametersTunnelId: MongoID
  priceTableId: MongoID
  supportButton: FilterUpdateOneAccessPointSupportButtonInput
}

input FilterUpdateOneAccessPointNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneAccessPointOperatorsInput {
  _id: FilterUpdateOneAccessPoint_idOperatorsInput
  brandId: FilterUpdateOneAccessPointBrandIdOperatorsInput
  name: FilterUpdateOneAccessPointNameOperatorsInput
}

""""""
input FilterUpdateOneAccessPointSupportButtonInput {
  icon: EnumAccessPointSupportButtonIcon
  tooltipTranslations: Translations
  type: EnumAccessPointSupportButtonType
  value: String
}

input FilterUpdateOneAccessPoint_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneBarcodeCollectionBarcodeReferencesInput {
  _id: MongoID
  ean: String
  id: String
}

input FilterUpdateOneBarcodeCollectionCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneBarcodeCollectionInput {
  AND: [FilterUpdateOneBarcodeCollectionInput!]
  OR: [FilterUpdateOneBarcodeCollectionInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneBarcodeCollectionOperatorsInput
  barcodeReferences: [FilterUpdateOneBarcodeCollectionBarcodeReferencesInput!]
  createdAt: Date
  createdById: MongoID
  name: String
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneBarcodeCollectionOperatorsInput {
  _id: FilterUpdateOneBarcodeCollection_idOperatorsInput
  createdById: FilterUpdateOneBarcodeCollectionCreatedByIdOperatorsInput
}

input FilterUpdateOneBarcodeCollection_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneBrandColorsInput {
  dataProtection: String
  legalNotice: String
  loadingScreenBackground: String
  loadingScreenLogoPicture: String
  loadingScreenProgressBarBackground: String
  loadingScreenProgressBarBorder: String
  loadingScreenProgressBarContent: String
  loadingScreenText: String
  meshes: FilterUpdateOneBrandColorsMeshesInput
  planElement: FilterUpdateOneBrandColorsPlanElementInput
  primary: String
  questHeaderBackground: String
  questHeaderBody: String
  questHeaderTitle: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

""""""
input FilterUpdateOneBrandColorsMeshesInput {
  wallCut: String
}

""""""
input FilterUpdateOneBrandColorsPlanElementInput {
  floor: String
  wall: String
  window: String
}

""""""
input FilterUpdateOneBrandInput {
  AND: [FilterUpdateOneBrandInput!]
  OR: [FilterUpdateOneBrandInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneBrandOperatorsInput
  colors: FilterUpdateOneBrandColorsInput
  createdAt: Date
  name: String
  promoterWebsiteConfiguration: FilterUpdateOneBrandPromoterWebsiteConfigurationInput
  satelliteConfiguration: FilterUpdateOneBrandSatelliteConfigurationInput
  shareCode: String
  slug: String
  updatedAt: Date
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneBrandOperatorsInput {
  _id: FilterUpdateOneBrand_idOperatorsInput
  shareCode: FilterUpdateOneBrandShareCodeOperatorsInput
  slug: FilterUpdateOneBrandSlugOperatorsInput
}

""""""
input FilterUpdateOneBrandParametersPricingInput {
  AND: [FilterUpdateOneBrandParametersPricingInput!]
  OR: [FilterUpdateOneBrandParametersPricingInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneBrandParametersPricingOperatorsInput
  brandId: MongoID
  enabled: Boolean
  useArticleCode: Boolean
  useEAN: Boolean
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneBrandParametersPricingOperatorsInput {
  _id: FilterUpdateOneBrandParametersPricing_idOperatorsInput
}

input FilterUpdateOneBrandParametersPricing_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneBrandParametersScrapperInput {
  AND: [FilterUpdateOneBrandParametersScrapperInput!]
  OR: [FilterUpdateOneBrandParametersScrapperInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneBrandParametersScrapperOperatorsInput
  allowAnonymousSave: Boolean
  brandId: MongoID
  enabled: Boolean
  export: Boolean
  geometry: Boolean
  name: String
  objects: Boolean
  postManualSaveTriggerSteps: [FilterUpdateOneBrandParametersScrapperPostManualSaveTriggerStepsInput!]
  screenshots: Boolean
  steps: [FilterUpdateOneBrandParametersScrapperStepsInput!]
  watermark: FilterUpdateOneBrandParametersScrapperWatermarkInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneBrandParametersScrapperOperatorsInput {
  _id: FilterUpdateOneBrandParametersScrapper_idOperatorsInput
}

""""""
input FilterUpdateOneBrandParametersScrapperPostManualSaveTriggerStepsInput {
  _id: MongoID
  triggerPopup: FilterUpdateOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput
  type: EnumBrandParametersScrapperPostManualSaveTriggerStepsType
}

""""""
input FilterUpdateOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput {
  _id: MongoID
  buttonType: EnumBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupButtonType
  textTranslations: Translations
  titleTranslations: Translations
  yesNoButtons: FilterUpdateOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput
}

""""""
input FilterUpdateOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput {
  stateProperty: String
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsFilterInput {
  expression: String
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsInput {
  _id: MongoID
  filter: FilterUpdateOneBrandParametersScrapperStepsFilterInput
  map: FilterUpdateOneBrandParametersScrapperStepsMapInput
  stepType: EnumBrandParametersScrapperStepsStepType
  stepVerb: String
  tap: FilterUpdateOneBrandParametersScrapperStepsTapInput
  verbFilter: EnumBrandParametersScrapperStepsVerbFilter
  verbMap: EnumBrandParametersScrapperStepsVerbMap
  verbTap: EnumBrandParametersScrapperStepsVerbTap
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsMapInput {
  kitchenPricer: FilterUpdateOneBrandParametersScrapperStepsMapKitchenPricerInput
  payloadGenerator: FilterUpdateOneBrandParametersScrapperStepsMapPayloadGeneratorInput
  pdfReportGenerator: FilterUpdateOneBrandParametersScrapperStepsMapPdfReportGeneratorInput
  plinthCalculator: FilterUpdateOneBrandParametersScrapperStepsMapPlinthCalculatorInput
  reportGenerator: FilterUpdateOneBrandParametersScrapperStepsMapReportGeneratorInput
  terracePricer: FilterUpdateOneBrandParametersScrapperStepsMapTerracePricerInput
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsMapKitchenPricerInput {
  apiToken: String
  apiUrl: String
  barcodeCollectionId: MongoID
  projectBaseUrl: String
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsMapPayloadGeneratorInput {
  addSaveName: Boolean
  addUpdateToken: Boolean
  dynamicParameterForTunnelStateInformation: String
  tunnelStateKeys: [String!]
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsMapPdfReportGeneratorInput {
  payloadType: EnumBrandParametersScrapperStepsMapPdfReportGeneratorPayloadType
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsMapPlinthCalculatorInput {
  bigPlinthId: MongoID
  littlePlinthId: MongoID
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsMapReportGeneratorInput {
  chunksManifest: [FilterUpdateOneInputDocumentChunkManifestInput!]
  documentName: String
  htmlTemplate: String
  mode: EnumBrandParametersScrapperStepsMapReportGeneratorMode
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsMapTerracePricerInput {
  itemsCatalogId: MongoID
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsTapInput {
  outputToApi: FilterUpdateOneBrandParametersScrapperStepsTapOutputToApiInput
  sendEmail: FilterUpdateOneBrandParametersScrapperStepsTapSendEmailInput
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsTapOutputToApiInput {
  apiToken: String
  apiUrl: String
  signPayload: Boolean
}

""""""
input FilterUpdateOneBrandParametersScrapperStepsTapSendEmailInput {
  attachmentName: String
  dynamicParameterEmailAdress: String
  emailSourceType: EnumBrandParametersScrapperStepsTapSendEmailEmailSourceType
  sendReportAsAttachment: Boolean
  staticEmailAdress: String
  subject: String
  template: String
}

""""""
input FilterUpdateOneBrandParametersScrapperWatermarkInput {
  alpha: Float
  color: String
  enabled: Boolean
  picture: String
  repetition: Float
}

input FilterUpdateOneBrandParametersScrapper_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneBrandParametersTunnelApertureParametersInput {
  doorClassicDefaultItem: String
  doorEntryDefaultItem: String
  doorEntrySidelightDefaultItem: String
  doorExteriorCustomisationItemsGroupId: String
  doorInteriorCustomisationItemsGroupId: String
  doubleDoorDefaultItem: String
  doubleDoorlikeWindowDefaultItem: String
  doubleSwingDoorDefaultItem: String
  doubleWindowDefaultItem: String
  garageDoorDefaultItem: String
  simpleDoorlikeWindowDefaultItem: String
  slitWindowDefaultItem: String
  tripleDoorlikeWindowDefaultItem: String
  tripleWindowDefaultItem: String
  windowCustomisationItemsGroupId: String
  windowDefaultItem: String
}

""""""
input FilterUpdateOneBrandParametersTunnelColorsParametersInput {
  nameHelpAtlas: String
  nameOptionsAtlas: String
  nameToolsAtlas: String
  primary: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

""""""
input FilterUpdateOneBrandParametersTunnelCustomLinkButtonInput {
  link: String
  name: String
}

""""""
input FilterUpdateOneBrandParametersTunnelDefaultCameraParametersInput {
  visitCameraParameters: FilterUpdateOneBrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput
}

""""""
input FilterUpdateOneBrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput {
  defaultVisitFieldOfView: Float
}

""""""
input FilterUpdateOneBrandParametersTunnelDefaultCoatingParametersInput {
  defaultExteriorFlooringId: MongoID
  defaultGardenFlooringId: MongoID
  defaultInteriorFlooringId: MongoID
}

""""""
input FilterUpdateOneBrandParametersTunnelInput {
  AND: [FilterUpdateOneBrandParametersTunnelInput!]
  OR: [FilterUpdateOneBrandParametersTunnelInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneBrandParametersTunnelOperatorsInput
  apertureParameters: FilterUpdateOneBrandParametersTunnelApertureParametersInput
  brandId: MongoID
  colorsParameters: FilterUpdateOneBrandParametersTunnelColorsParametersInput
  customLinkButton: FilterUpdateOneBrandParametersTunnelCustomLinkButtonInput
  defaultCameraParameters: FilterUpdateOneBrandParametersTunnelDefaultCameraParametersInput
  defaultCoatingParameters: FilterUpdateOneBrandParametersTunnelDefaultCoatingParametersInput
  defaultDayTime: Float
  defaultSnapDistance: Float
  disableHeaderShadow: Boolean
  displayCartItemNumber: Boolean
  displayCustomisationTagFurnitureOptions: Boolean
  displayFurnitureSubstitutesOptions: Boolean
  displaySaveName: Boolean
  displayStepsHeader: Boolean
  enabled: Boolean
  globalOptions: [String!]
  includeAllBrandItemsInCache: Boolean
  initialStepIfLoadingSave: Float
  isReloadFromLocalStorageEnabled: Boolean
  logoLinkOnClick: String
  logoPictureReference: String
  name: String
  persistentVariables: [FilterUpdateOneBrandParametersTunnelPersistentVariablesInput!]
  preload: Boolean
  savePanelParameters: FilterUpdateOneBrandParametersTunnelSavePanelParametersInput
  steps: [FilterUpdateOneBrandParametersTunnelStepInput!]
  wallParameters: FilterUpdateOneBrandParametersTunnelWallParametersInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneBrandParametersTunnelOperatorsInput {
  _id: FilterUpdateOneBrandParametersTunnel_idOperatorsInput
}

""""""
input FilterUpdateOneBrandParametersTunnelPersistentVariablesInput {
  config: JSON
  name: String
}

""""""
input FilterUpdateOneBrandParametersTunnelSavePanelParametersInput {
  isCustomerModuleEnabled: Boolean
  isExportButtonEnabled: Boolean
}

""""""
input FilterUpdateOneBrandParametersTunnelStepInput {
  _id: MongoID
  analytics: FilterUpdateOneBrandParametersTunnelStepsAnalyticsInput
  config: JSON
  description: String
  htmlTemplate: String
  isShownInStepper: Boolean
  module: EnumBrandParametersTunnelStepsModule
  name: String
  publicNameTranslations: Translations
  resetTunnelOnActivation: Boolean
}

""""""
input FilterUpdateOneBrandParametersTunnelStepsAnalyticsChoiceReducerInput {
  isEnabled: Boolean
  stateProperties: [String]
}

""""""
input FilterUpdateOneBrandParametersTunnelStepsAnalyticsInput {
  choiceReducer: FilterUpdateOneBrandParametersTunnelStepsAnalyticsChoiceReducerInput
}

""""""
input FilterUpdateOneBrandParametersTunnelWallParametersExteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

""""""
input FilterUpdateOneBrandParametersTunnelWallParametersInput {
  doorLintelLevel: Float
  exteriorCeilingLintelHeight: Float
  exteriorWallThickness: FilterUpdateOneBrandParametersTunnelWallParametersExteriorWallThicknessInput
  floorHeight: Float
  groundFloorLevel: Float
  innerHeight: Float
  interiorCeilingLintelHeight: Float
  interiorWallThickness: FilterUpdateOneBrandParametersTunnelWallParametersInteriorWallThicknessInput
  optionsPanelWallConfig: FilterUpdateOneBrandParametersTunnelWallParametersOptionsPanelWallConfigInput
  windowLintelLevel: Float
  windowSillLevel: Float
}

""""""
input FilterUpdateOneBrandParametersTunnelWallParametersInteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

""""""
input FilterUpdateOneBrandParametersTunnelWallParametersOptionsPanelWallConfigInput {
  displayOnlyWallType: Boolean
  displayWallHeightExteriorFloor: Boolean
  displayWallHeightInteriorFloor: Boolean
  displayWallThicknessDropdown: Boolean
  displayWallThicknessInput: Boolean
  usePartitionLabelForInteriorWall: Boolean
}

input FilterUpdateOneBrandParametersTunnel_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneBrandPromoterWebsiteConfigurationInput {
  acquirerValidateUnitAccessPointId: MongoID
  metadataConfiguration: FilterUpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationInput
  operatorTypeAccessPointId: MongoID
  promoterValidateTypeAccessPointId: MongoID
  unitTypeSaveModelId: MongoID
}

""""""
input FilterUpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataType
}

""""""
input FilterUpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataType
}

""""""
input FilterUpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationInput {
  apartmentUnitMetadata: [FilterUpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput!]
  apartmentUnitTypeIdMetadataKey: String
  apartmentUnitTypeMetadata: [FilterUpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput!]
  programMetadata: [FilterUpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput!]
}

""""""
input FilterUpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataType
}

""""""
input FilterUpdateOneBrandSatelliteConfigurationInput {
  satelliteUrl: String
}

input FilterUpdateOneBrandShareCodeOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterUpdateOneBrandSlugOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterUpdateOneBrand_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneCatalogFolderInput {
  AND: [FilterUpdateOneCatalogFolderInput!]
  OR: [FilterUpdateOneCatalogFolderInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneCatalogFolderOperatorsInput
  associatedEcotaxePriceTableId: MongoID
  associatedPriceTableId: MongoID
  brand: MongoID
  createdAt: Date
  iconId: Int
  metadata: [FilterUpdateOneCatalogFolderMetadataInput]
  name: String
  parent: MongoID
  public: Boolean
  publicNameTranslations: Translations
  published: Boolean
  rootId: MongoID
  sharedWithIds: [MongoID]
  thumbnailId: String
  thumbnailUrl: String
  tiles: [FilterUpdateOneCatalogFolderTilesInput]
  tilesBackgroundColor: String
  tilesColumnAmount: Float
  tilesColumnGap: Float
  tilesColumnSizes: [Float]
  tilesRowGap: Float
  tilesRowSizes: [Float]
  type: EnumCatalogFolderType
  updatedAt: Date
  virtual: Boolean
}

""""""
input FilterUpdateOneCatalogFolderMetadataInput {
  _id: MongoID
  key: String
  value: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneCatalogFolderOperatorsInput {
  _id: FilterUpdateOneCatalogFolder_idOperatorsInput
}

""""""
input FilterUpdateOneCatalogFolderTilesImagePlacementInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

""""""
input FilterUpdateOneCatalogFolderTilesInput {
  _id: MongoID
  advancedTextTranslations: Translations
  backgroundColor: String
  backgroundOpacity: Float
  borderRadius: Float
  catalogSourceId: MongoID
  construction: MongoID
  descriptionTextSize: Float
  folder: MongoID
  hasShadow: Boolean
  height: Float
  horizontalTextAlignement: EnumCatalogFolderTilesHorizontalTextAlignement
  imageId: String
  imagePlacement: FilterUpdateOneCatalogFolderTilesImagePlacementInput
  imageUrl: String
  isImagePlacementFree: Boolean
  isShownOnDesktop: Boolean
  isShownOnMobile: Boolean
  item: MongoID
  itemsGroup: MongoID
  mask: Boolean
  maskColor: String
  maskOpacity: Float
  metadata: [FilterUpdateOneCatalogFolderTilesMetadataInput]
  posX: Float
  posY: Float
  saveSelectedInTunnelStateVariable: String
  stylePresetId: MongoID
  textColor: String
  textDescriptionTranslations: Translations
  textPadding: FilterUpdateOneCatalogFolderTilesTextPaddingInput
  textTitleTranslations: Translations
  titleTextColor: String
  titleTextSize: Float
  tooltipTranslations: Translations
  type: EnumCatalogFolderTilesType
  useAdvancedText: Boolean
  verticalTextAlignement: EnumCatalogFolderTilesVerticalTextAlignement
  width: Float
}

""""""
input FilterUpdateOneCatalogFolderTilesMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input FilterUpdateOneCatalogFolderTilesTextPaddingInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

input FilterUpdateOneCatalogFolder_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterUpdateOneCustomerAddressOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterUpdateOneCustomerBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterUpdateOneCustomerCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterUpdateOneCustomerEmailOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterUpdateOneCustomerFirstnameAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterUpdateOneCustomerFirstnameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterUpdateOneCustomerGenderAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterUpdateOneCustomerGenderOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterUpdateOneCustomerInput {
  AND: [FilterUpdateOneCustomerInput!]
  OR: [FilterUpdateOneCustomerInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneCustomerOperatorsInput
  address: String
  brandId: MongoID
  city: String
  createdAt: Date
  createdById: MongoID
  email: String
  firstname: String
  firstnameAdditional: String
  gender: String
  genderAdditional: String
  mobilePhone: String
  phone: String
  surname: String
  surnameAdditional: String
  updatedAt: Date
  zipCode: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneCustomerOperatorsInput {
  _id: FilterUpdateOneCustomer_idOperatorsInput
  address: FilterUpdateOneCustomerAddressOperatorsInput
  brandId: FilterUpdateOneCustomerBrandIdOperatorsInput
  createdById: FilterUpdateOneCustomerCreatedByIdOperatorsInput
  email: FilterUpdateOneCustomerEmailOperatorsInput
  firstname: FilterUpdateOneCustomerFirstnameOperatorsInput
  firstnameAdditional: FilterUpdateOneCustomerFirstnameAdditionalOperatorsInput
  gender: FilterUpdateOneCustomerGenderOperatorsInput
  genderAdditional: FilterUpdateOneCustomerGenderAdditionalOperatorsInput
  surname: FilterUpdateOneCustomerSurnameOperatorsInput
  surnameAdditional: FilterUpdateOneCustomerSurnameAdditionalOperatorsInput
}

input FilterUpdateOneCustomerSurnameAdditionalOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterUpdateOneCustomerSurnameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

input FilterUpdateOneCustomer_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

"""Configures the parameters of one or multiple chunks in the document."""
input FilterUpdateOneInputDocumentChunkManifestInput {
  """
  Render-time parameters object, implementing the chunk's parameters schema as given in the output manifest. The type of this property is loosely-typed in GraphQL, but verified at runtime against that schema. If the parameters passed are invalid against the schema, the chunk will be disabled and a manifest warning will be issued.
  """
  parameters: JSONObject

  """
  A path selector to target one or multiple chunks, since it can be a bash-like glob pattern, ex. "/my-section/my-chunk-123", "/my-section/my-chunk-*", "/**/my-chunk-*", etc.
  """
  path: String

  """
  Defines whether the chunk should be rendered in the document. If set "false" on a group chunk, it applies to its children recursively.
  """
  render: Boolean = true
}

input FilterUpdateOneItemCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneItemCustomisationCoverPlanesInput {
  _id: MongoID
  associatedItem: MongoID
  hideForSingleObject: Boolean
  mode: EnumItemCustomisationCoverPlanesMode
  nameId: String
  positions: FilterUpdateOneItemCustomisationCoverPlanesPositionsInput
  showOnStart: Boolean
  weight: Float
}

""""""
input FilterUpdateOneItemCustomisationCoverPlanesPositionsInput {
  above: Boolean
  behind: Boolean
  front: Boolean
  left: Boolean
  right: Boolean
}

""""""
input FilterUpdateOneItemCustomisationMaterialsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  associatedPalette: MongoID
  materials: [String]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  type: EnumItemCustomisationMaterialsType
  weight: Float
}

""""""
input FilterUpdateOneItemCustomisationSubObjectsHooksInput {
  _id: MongoID
  orientation: FilterUpdateOneItemCustomisationSubObjectsHooksOrientationInput
  position: FilterUpdateOneItemCustomisationSubObjectsHooksPositionInput
  type: EnumItemCustomisationSubObjectsHooksType
}

""""""
input FilterUpdateOneItemCustomisationSubObjectsHooksOrientationInput {
  x: Float
  y: Float
  z: Float
}

""""""
input FilterUpdateOneItemCustomisationSubObjectsHooksPositionInput {
  x: Float
  y: Float
  z: Float
}

""""""
input FilterUpdateOneItemCustomisationSubObjectsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  hooks: [FilterUpdateOneItemCustomisationSubObjectsHooksInput]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  weight: Float
}

""""""
input FilterUpdateOneItemCustomisationSymbolicRepresentationInput {
  _id: MongoID
  anglePositionIsRight: Boolean
  break3D: Boolean
  colors: EnumItemCustomisationSymbolicRepresentationColors
  displayDiagonals: Boolean
  doorType: EnumItemCustomisationSymbolicRepresentationDoorType
  drawerCount: Float
  symbolicIcon: EnumItemCustomisationSymbolicRepresentationSymbolicIcon
  symbolicIconShape: EnumItemCustomisationSymbolicRepresentationSymbolicIconShape
  symbolicIconSubType: EnumItemCustomisationSymbolicRepresentationSymbolicIconSubType
  type: EnumItemCustomisationSymbolicRepresentationType
}

""""""
input FilterUpdateOneItemFactSheetInput {
  _id: MongoID
  descriptionJson: JSONObject
  logoPicture: String
  pictureUrl: String
}

""""""
input FilterUpdateOneItemGuardrailInformationsInput {
  _id: MongoID
  meshes: [FilterUpdateOneItemGuardrailInformationsMeshesInput]
}

""""""
input FilterUpdateOneItemGuardrailInformationsMeshesDimensionsInput {
  height: Float
  length: Float
  thickness: Float
}

""""""
input FilterUpdateOneItemGuardrailInformationsMeshesInput {
  _id: MongoID
  dimensions: FilterUpdateOneItemGuardrailInformationsMeshesDimensionsInput
  materialId: MongoID
  meshId: MongoID
  options: FilterUpdateOneItemGuardrailInformationsMeshesOptionsInput
  placing: FilterUpdateOneItemGuardrailInformationsMeshesPlacingInput
  surface: FilterUpdateOneItemGuardrailInformationsMeshesSurfaceInput
  type: EnumItemGuardrailInformationsMeshesType
}

""""""
input FilterUpdateOneItemGuardrailInformationsMeshesOptionsInput {
  closeBottom: Boolean
  closeTop: Boolean
  shape: EnumItemGuardrailInformationsMeshesOptionsShape
}

""""""
input FilterUpdateOneItemGuardrailInformationsMeshesPlacingInput {
  elevation: Float
  endContraction: Float
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  placeEndPillarsDiagonally: Boolean
}

""""""
input FilterUpdateOneItemGuardrailInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
}

""""""
input FilterUpdateOneItemInput {
  AND: [FilterUpdateOneItemInput!]
  OR: [FilterUpdateOneItemInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneItemOperatorsInput
  articleCode: String
  brandId: MongoID
  buildingWingInfos: String
  canBeCutAlongHeight: Boolean
  canBeCutAlongLength: Boolean
  canBeCutAlongWidth: Boolean
  canBeDroppedOnZones: [EnumItemCanBeDroppedOnZones!]
  categoriesIds: [MongoID!]
  compositeInfos: String
  consideredAsDroppableZones: [EnumItemConsideredAsDroppableZones!]
  createdAt: Date
  createdById: MongoID
  customisationByItemsGroupId: MongoID
  customisationCoverPlanes: [FilterUpdateOneItemCustomisationCoverPlanesInput!]
  customisationMaterials: [FilterUpdateOneItemCustomisationMaterialsInput!]
  customisationSubObjects: [FilterUpdateOneItemCustomisationSubObjectsInput!]
  customisationSymbolicRepresentation: FilterUpdateOneItemCustomisationSymbolicRepresentationInput
  deleted: Boolean
  ean: String
  factSheet: FilterUpdateOneItemFactSheetInput
  guardrailInformations: FilterUpdateOneItemGuardrailInformationsInput
  metadata: [FilterUpdateOneItemMetadataInput!]
  minimumPricedDimensions: FilterUpdateOneItemMinimumPricedDimensionsInput
  modelUrl: String
  name: String
  outputAssets: FilterUpdateOneItemOutputAssetsInput
  physicalHeight: String
  physicalLength: String
  physicalWidth: String
  pillarInformations: FilterUpdateOneItemPillarInformationsInput
  priceCoefExclusion: Boolean
  priceGeneration: EnumItemPriceGeneration
  priceUnit: EnumItemPriceUnit
  publicNameTranslations: Translations
  roofInformations: FilterUpdateOneItemRoofInformationsInput
  scrapperTag: String
  slug: String
  stairsInformations: FilterUpdateOneItemStairsInformationsInput
  tags: [String!]
  thumbnailUrl: String
  tooltip3DTranslations: Translations
  type: EnumItemType
  updatedAt: Date
  updatedById: MongoID
  vegetationInformations: FilterUpdateOneItemVegetationInformationsInput
  wallInformations: FilterUpdateOneItemWallInformationsInput
}

""""""
input FilterUpdateOneItemMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input FilterUpdateOneItemMinimumPricedDimensionsInput {
  _id: MongoID
  depth: String
  width: String
}

input FilterUpdateOneItemNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneItemOperatorsInput {
  _id: FilterUpdateOneItem_idOperatorsInput
  createdById: FilterUpdateOneItemCreatedByIdOperatorsInput
  name: FilterUpdateOneItemNameOperatorsInput
  slug: FilterUpdateOneItemSlugOperatorsInput
}

""""""
input FilterUpdateOneItemOutputAssetsCoatingVariantsAlbedoInput {
  _id: MongoID
  name: String
  type: String
  url: String!
}

""""""
input FilterUpdateOneItemOutputAssetsCoatingVariantsInput {
  _id: MongoID
  albedo: FilterUpdateOneItemOutputAssetsCoatingVariantsAlbedoInput
  metallic: FilterUpdateOneItemOutputAssetsCoatingVariantsAlbedoInput
  name: String
  normal: FilterUpdateOneItemOutputAssetsCoatingVariantsAlbedoInput
  smoothness: FilterUpdateOneItemOutputAssetsCoatingVariantsAlbedoInput
}

""""""
input FilterUpdateOneItemOutputAssetsInput {
  _id: MongoID
  coatingVariants: [FilterUpdateOneItemOutputAssetsCoatingVariantsInput]
}

""""""
input FilterUpdateOneItemPillarInformationsInput {
  _id: MongoID
  cylinderSides: Float
  materials: [FilterUpdateOneItemPillarInformationsMaterialsInput]
  models: [FilterUpdateOneItemPillarInformationsModelsInput]
  necking: FilterUpdateOneItemPillarInformationsNeckingInput
}

""""""
input FilterUpdateOneItemPillarInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemPillarInformationsMaterialsType
}

""""""
input FilterUpdateOneItemPillarInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemPillarInformationsModelsType
  width: Float
}

""""""
input FilterUpdateOneItemPillarInformationsNeckingCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterUpdateOneItemPillarInformationsNeckingInput {
  crossSection: FilterUpdateOneItemPillarInformationsNeckingCrossSectionInput
  distanceToTop: Float
}

""""""
input FilterUpdateOneItemRoofInformationsCoveringInput {
  included: Boolean
  ridgeTiles: FilterUpdateOneItemRoofInformationsCoveringRidgeTilesInput
  sealingThickness: Float
  spaceBetweenSealingAndTiles: Float
  tilesThickness: Float
}

""""""
input FilterUpdateOneItemRoofInformationsCoveringRidgeTilesInput {
  innerRadius: Float
  length: Float
  radius: Float
}

""""""
input FilterUpdateOneItemRoofInformationsEavesStyleInput {
  type: EnumItemRoofInformationsEavesStyleType
}

""""""
input FilterUpdateOneItemRoofInformationsFlatRoofBorderDimensionsInput {
  height: Float
  width: Float
}

""""""
input FilterUpdateOneItemRoofInformationsFlatRoofInput {
  borderDimensions: FilterUpdateOneItemRoofInformationsFlatRoofBorderDimensionsInput
  gravelThickness: Float
  included: Boolean
}

""""""
input FilterUpdateOneItemRoofInformationsFramingInput {
  included: Boolean
  pieces: [FilterUpdateOneItemRoofInformationsFramingPiecesInput]
  type: EnumItemRoofInformationsFramingType
}

""""""
input FilterUpdateOneItemRoofInformationsFramingPiecesEnd_coordinateInput {
  x: Float
  y: Float
}

""""""
input FilterUpdateOneItemRoofInformationsFramingPiecesInput {
  _id: MongoID
  end_coordinate: FilterUpdateOneItemRoofInformationsFramingPiecesEnd_coordinateInput
  name: String
  start_coordinate: FilterUpdateOneItemRoofInformationsFramingPiecesStart_coordinateInput
  type: EnumItemRoofInformationsFramingPiecesType
}

""""""
input FilterUpdateOneItemRoofInformationsFramingPiecesStart_coordinateInput {
  x: Float
  y: Float
}

""""""
input FilterUpdateOneItemRoofInformationsGutterInput {
  included: Boolean
  innerRadius: Float
  radius: Float
}

""""""
input FilterUpdateOneItemRoofInformationsInput {
  _id: MongoID
  covering: FilterUpdateOneItemRoofInformationsCoveringInput
  eavesStyle: FilterUpdateOneItemRoofInformationsEavesStyleInput
  flatRoof: FilterUpdateOneItemRoofInformationsFlatRoofInput
  framing: FilterUpdateOneItemRoofInformationsFramingInput
  gutter: FilterUpdateOneItemRoofInformationsGutterInput
  materials: [FilterUpdateOneItemRoofInformationsMaterialsInput]
  models: [FilterUpdateOneItemRoofInformationsModelsInput]
  overhang: FilterUpdateOneItemRoofInformationsOverhangInput
  purlins: FilterUpdateOneItemRoofInformationsPurlinsInput
  rafters: FilterUpdateOneItemRoofInformationsRaftersInput
  ridgeBoard: FilterUpdateOneItemRoofInformationsRidgeBoardInput
  solarPanels: FilterUpdateOneItemRoofInformationsSolarPanelsInput
  topPlate: FilterUpdateOneItemRoofInformationsTopPlateInput
}

""""""
input FilterUpdateOneItemRoofInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemRoofInformationsMaterialsType
}

""""""
input FilterUpdateOneItemRoofInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemRoofInformationsModelsType
  width: Float
}

""""""
input FilterUpdateOneItemRoofInformationsOverhangInput {
  bargeboard: Float
  bargeboardPurlins: Float
  bargeboardRafters: Float
  eave: Float
  included: Boolean
}

""""""
input FilterUpdateOneItemRoofInformationsPurlinsBottomInput {
  height: Float
  width: Float
}

""""""
input FilterUpdateOneItemRoofInformationsPurlinsInput {
  bottom: FilterUpdateOneItemRoofInformationsPurlinsBottomInput
  included: Boolean
  intermediate: FilterUpdateOneItemRoofInformationsPurlinsIntermediateInput
  ridge: FilterUpdateOneItemRoofInformationsPurlinsRidgeInput
}

""""""
input FilterUpdateOneItemRoofInformationsPurlinsIntermediateInput {
  height: Float
  width: Float
}

""""""
input FilterUpdateOneItemRoofInformationsPurlinsRidgeInput {
  height: Float
  width: Float
}

""""""
input FilterUpdateOneItemRoofInformationsRaftersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterUpdateOneItemRoofInformationsRaftersInput {
  crossSection: FilterUpdateOneItemRoofInformationsRaftersCrossSectionInput
  included: Boolean
  typicalDistance: Float
}

""""""
input FilterUpdateOneItemRoofInformationsRidgeBoardCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterUpdateOneItemRoofInformationsRidgeBoardInput {
  crossSection: FilterUpdateOneItemRoofInformationsRidgeBoardCrossSectionInput
  included: Boolean
}

""""""
input FilterUpdateOneItemRoofInformationsSolarPanelsFrameInput {
  thickness: Float
  width: Float
}

""""""
input FilterUpdateOneItemRoofInformationsSolarPanelsInput {
  distanceToRoof: Float
  frame: FilterUpdateOneItemRoofInformationsSolarPanelsFrameInput
  height: Float
  included: Boolean
  thickness: Float
  width: Float
}

""""""
input FilterUpdateOneItemRoofInformationsTopPlateCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterUpdateOneItemRoofInformationsTopPlateInput {
  crossSection: FilterUpdateOneItemRoofInformationsTopPlateCrossSectionInput
  included: Boolean
}

input FilterUpdateOneItemSlugOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterUpdateOneItemStairsInformationsInput {
  _id: MongoID
  landing: FilterUpdateOneItemStairsInformationsLandingInput
  materials: [FilterUpdateOneItemStairsInformationsMaterialsInput]
  models: [FilterUpdateOneItemStairsInformationsModelsInput]
  railing: FilterUpdateOneItemStairsInformationsRailingInput
  steps: FilterUpdateOneItemStairsInformationsStepsInput
  stringers: FilterUpdateOneItemStairsInformationsStringersInput
}

""""""
input FilterUpdateOneItemStairsInformationsLandingInput {
  height: Float
}

""""""
input FilterUpdateOneItemStairsInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemStairsInformationsMaterialsType
}

""""""
input FilterUpdateOneItemStairsInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemStairsInformationsModelsType
  width: Float
}

""""""
input FilterUpdateOneItemStairsInformationsRailingBalustersInput {
  radius: Float
  typicalDistance: Float
}

""""""
input FilterUpdateOneItemStairsInformationsRailingHandrailCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterUpdateOneItemStairsInformationsRailingHandrailInput {
  crossSection: FilterUpdateOneItemStairsInformationsRailingHandrailCrossSectionInput
  elevation: Float
}

""""""
input FilterUpdateOneItemStairsInformationsRailingInput {
  balusters: FilterUpdateOneItemStairsInformationsRailingBalustersInput
  handrail: FilterUpdateOneItemStairsInformationsRailingHandrailInput
  posts: FilterUpdateOneItemStairsInformationsRailingPostsInput
}

""""""
input FilterUpdateOneItemStairsInformationsRailingPostsCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterUpdateOneItemStairsInformationsRailingPostsInput {
  crossSection: FilterUpdateOneItemStairsInformationsRailingPostsCrossSectionInput
}

""""""
input FilterUpdateOneItemStairsInformationsStepsInput {
  risers: FilterUpdateOneItemStairsInformationsStepsRisersInput
  treats: FilterUpdateOneItemStairsInformationsStepsTreatsInput
}

""""""
input FilterUpdateOneItemStairsInformationsStepsRisersInput {
  height: Float
  thickness: Float
}

""""""
input FilterUpdateOneItemStairsInformationsStepsTreatsInput {
  height: Float
  nose: Float
}

""""""
input FilterUpdateOneItemStairsInformationsStringersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input FilterUpdateOneItemStairsInformationsStringersInput {
  crossSection: FilterUpdateOneItemStairsInformationsStringersCrossSectionInput
  overTreat: Float
}

""""""
input FilterUpdateOneItemVegetationInformationsInput {
  _id: MongoID
  canBeSelected: Boolean
}

""""""
input FilterUpdateOneItemWallInformationsApplicationInput {
  bothSides: Boolean
  exteriorFacesExteriorWalls: Boolean
  interiorFacesExteriorWalls: Boolean
  interiorWalls: Boolean
  overRegularWall: Boolean
}

""""""
input FilterUpdateOneItemWallInformationsInput {
  _id: MongoID
  application: FilterUpdateOneItemWallInformationsApplicationInput
  class: EnumItemWallInformationsClass
  meshes: [FilterUpdateOneItemWallInformationsMeshesInput]
}

""""""
input FilterUpdateOneItemWallInformationsMeshesDimensionsInput {
  length: Float
  thickness: Float
}

""""""
input FilterUpdateOneItemWallInformationsMeshesDisplayInput {
  autoCut: Boolean
  whenWallsHigh: Boolean
  whenWallsLow: Boolean
}

""""""
input FilterUpdateOneItemWallInformationsMeshesInput {
  _id: MongoID
  buildingMaterial: EnumItemWallInformationsMeshesBuildingMaterial
  dimensions: FilterUpdateOneItemWallInformationsMeshesDimensionsInput
  display: FilterUpdateOneItemWallInformationsMeshesDisplayInput
  materialId: MongoID
  meshId: MongoID
  name: String
  options: FilterUpdateOneItemWallInformationsMeshesOptionsInput
  overlapPriority: Float
  placing: FilterUpdateOneItemWallInformationsMeshesPlacingInput
  segmentTypes: FilterUpdateOneItemWallInformationsMeshesSegmentTypesInput
  surface: FilterUpdateOneItemWallInformationsMeshesSurfaceInput
  type: EnumItemWallInformationsMeshesType
}

""""""
input FilterUpdateOneItemWallInformationsMeshesOptionsInput {
  closeBack: Boolean
  closeBottom: Boolean
  closeFront: Boolean
  closeSides: Boolean
  closeTop: Boolean
  hidden: Boolean
  nextToDoorsAndWindows: Boolean
  paintable: Boolean
  shape: EnumItemWallInformationsMeshesOptionsShape
  skewOnCorners: Boolean
}

""""""
input FilterUpdateOneItemWallInformationsMeshesPlacingBottomElevationInput {
  _id: MongoID
  elevation: Float
  reference: EnumItemWallInformationsMeshesPlacingBottomElevationReference
}

""""""
input FilterUpdateOneItemWallInformationsMeshesPlacingInput {
  beamDirection: EnumItemWallInformationsMeshesPlacingBeamDirection
  bottomElevation: FilterUpdateOneItemWallInformationsMeshesPlacingBottomElevationInput
  depthOffset: Float
  doorPostOffset: Float
  endContraction: Float
  endDepth: FilterUpdateOneItemWallInformationsMeshesPlacingStartDepthInput
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  moveVerticesAbove: Float
  pivotIsOnTop: Boolean
  placeEndPillarsDiagonally: Boolean
  repetitionFilter: EnumItemWallInformationsMeshesPlacingRepetitionFilter
  startDepth: FilterUpdateOneItemWallInformationsMeshesPlacingStartDepthInput
  stretchVertically: Boolean
  topElevation: FilterUpdateOneItemWallInformationsMeshesPlacingBottomElevationInput
}

""""""
input FilterUpdateOneItemWallInformationsMeshesPlacingStartDepthInput {
  _id: MongoID
  depth: Float
  plusOnTop: Float
  reference: EnumItemWallInformationsMeshesPlacingStartDepthReference
}

""""""
input FilterUpdateOneItemWallInformationsMeshesSegmentTypesInput {
  doors: Boolean
  walls: Boolean
  windows: Boolean
}

""""""
input FilterUpdateOneItemWallInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
  swapUV: Boolean
}

input FilterUpdateOneItem_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneItemsGroupInput {
  AND: [FilterUpdateOneItemsGroupInput!]
  OR: [FilterUpdateOneItemsGroupInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneItemsGroupOperatorsInput
  brandId: MongoID
  choiceIsMandatory: Boolean
  generated: Boolean
  itemsIds: [MongoID!]
  name: String
  option: FilterUpdateOneItemsGroupOptionInput
  publicNameTranslations: Translations
  shouldBeOpenInGUI: Boolean
  thumbnailPictureName: String
  type: EnumItemsGroupType
}

input FilterUpdateOneItemsGroupNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneItemsGroupOperatorsInput {
  _id: FilterUpdateOneItemsGroup_idOperatorsInput
  name: FilterUpdateOneItemsGroupNameOperatorsInput
}

""""""
input FilterUpdateOneItemsGroupOptionInput {
  _id: MongoID
  baseItemId: MongoID
  choiceIsMandatory: Boolean
  disableDefaultChoice: Boolean
  positions: [FilterUpdateOneItemsGroupOptionPositionsInput!]
}

""""""
input FilterUpdateOneItemsGroupOptionPositionsInput {
  _id: MongoID
  margins: FilterUpdateOneItemsGroupOptionPositionsMarginsInput
  placement: EnumItemsGroupOptionPositionsPlacement
  rotation: EnumItemsGroupOptionPositionsRotation
}

""""""
input FilterUpdateOneItemsGroupOptionPositionsMarginsInput {
  x: Float
  y: Float
  z: Float
}

input FilterUpdateOneItemsGroup_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOnePaletteColorsInput {
  _id: MongoID
  a: Float
  b: Float
  code: String
  g: Float
  metallic: Float
  nameTranslations: Translations
  r: Float
  roughness: Float
}

""""""
input FilterUpdateOnePaletteInput {
  AND: [FilterUpdateOnePaletteInput!]
  OR: [FilterUpdateOnePaletteInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOnePaletteOperatorsInput
  brandId: MongoID
  colors: [FilterUpdateOnePaletteColorsInput]
  name: String
  type: EnumPaletteType
}

input FilterUpdateOnePaletteNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOnePaletteOperatorsInput {
  _id: FilterUpdateOnePalette_idOperatorsInput
  name: FilterUpdateOnePaletteNameOperatorsInput
}

input FilterUpdateOnePalette_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOnePictureInput {
  AND: [FilterUpdateOnePictureInput!]
  OR: [FilterUpdateOnePictureInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOnePictureOperatorsInput
  brandId: MongoID
  name: String
  size: Float
  url: String
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOnePictureOperatorsInput {
  _id: FilterUpdateOnePicture_idOperatorsInput
}

input FilterUpdateOnePicture_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterUpdateOnePipelineJobDeadlineJobIdOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterUpdateOnePipelineJobInput {
  AND: [FilterUpdateOnePipelineJobInput!]
  OR: [FilterUpdateOnePipelineJobInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOnePipelineJobOperatorsInput
  brandId: MongoID
  completedDate: Date
  deadlineJobId: String
  settings: FilterUpdateOnePipelineJobSettingsInput
  startDate: Date
  state: EnumPipelineJobState
  submitDate: Date
  type: EnumPipelineJobType
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOnePipelineJobOperatorsInput {
  _id: FilterUpdateOnePipelineJob_idOperatorsInput
  deadlineJobId: FilterUpdateOnePipelineJobDeadlineJobIdOperatorsInput
}

""""""
input FilterUpdateOnePipelineJobSettingsConvertPBRMaterialToAssetBundleInput {
  _id: MongoID
  assetUrl: String
  itemId: MongoID
}

""""""
input FilterUpdateOnePipelineJobSettingsInput {
  _id: MongoID
  convertPBRMaterialToAssetBundle: FilterUpdateOnePipelineJobSettingsConvertPBRMaterialToAssetBundleInput
}

input FilterUpdateOnePipelineJob_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOnePlannedMaintenanceInput {
  AND: [FilterUpdateOnePlannedMaintenanceInput!]
  OR: [FilterUpdateOnePlannedMaintenanceInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOnePlannedMaintenanceOperatorsInput
  durationHours: Float
  reasonTranslations: Translations
  startDate: Date
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOnePlannedMaintenanceOperatorsInput {
  _id: FilterUpdateOnePlannedMaintenance_idOperatorsInput
}

input FilterUpdateOnePlannedMaintenance_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOnePriceTableInput {
  AND: [FilterUpdateOnePriceTableInput!]
  OR: [FilterUpdateOnePriceTableInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOnePriceTableOperatorsInput
  brandId: MongoID
  currencyName: String
  displayEan: Boolean
  globalDiscount: Float
  moniker: String
  multiplyingCoefficient: Float
  name: String
  prices: [FilterUpdateOnePriceTablePricesInput]
  symbol: String
  vatRate: Float
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOnePriceTableOperatorsInput {
  _id: FilterUpdateOnePriceTable_idOperatorsInput
}

""""""
input FilterUpdateOnePriceTablePricesInput {
  _id: MongoID
  articleIdentifier: String
  ean: String
  itemsIds: [MongoID]
  price: Float
  sourceItemId: MongoID
}

input FilterUpdateOnePriceTable_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneProductScanInput {
  AND: [FilterUpdateOneProductScanInput!]
  OR: [FilterUpdateOneProductScanInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneProductScanOperatorsInput
  brandId: MongoID
  creationDate: Date
  metallic: Float
  notes: String
  productName: String
  reference: String
  scans: [FilterUpdateOneProductScanScansInput]
  size: FilterUpdateOneProductScanSizeInput
  state: EnumProductScanState
  thumbnail: FilterUpdateOneProductScanScansInputImagesInput
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneProductScanOperatorsInput {
  _id: FilterUpdateOneProductScan_idOperatorsInput
}

""""""
input FilterUpdateOneProductScanScansInput {
  _id: MongoID
  generatedImages: [FilterUpdateOneProductScanScansInputImagesInput]
  inputImages: [FilterUpdateOneProductScanScansInputImagesInput]
  name: String
  type: EnumProductScanScansType
}

""""""
input FilterUpdateOneProductScanScansInputImagesInput {
  _id: MongoID
  format: String!
  name: String!
  url: String!
}

""""""
input FilterUpdateOneProductScanSizeInput {
  height: String
  length: String
  width: String
}

input FilterUpdateOneProductScan_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterUpdateOneSalesRecordBrandIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterUpdateOneSalesRecordCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterUpdateOneSalesRecordCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneSalesRecordInput {
  AND: [FilterUpdateOneSalesRecordInput!]
  OR: [FilterUpdateOneSalesRecordInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneSalesRecordOperatorsInput
  brandId: MongoID
  createdAt: Date
  createdById: MongoID
  finalCustomerMetadata: Metadata
  metadata: Metadata
  saveId: MongoID
  updatedAt: Date
  updatedById: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneSalesRecordOperatorsInput {
  _id: FilterUpdateOneSalesRecord_idOperatorsInput
  brandId: FilterUpdateOneSalesRecordBrandIdOperatorsInput
  createdAt: FilterUpdateOneSalesRecordCreatedAtOperatorsInput
  createdById: FilterUpdateOneSalesRecordCreatedByIdOperatorsInput
  updatedAt: FilterUpdateOneSalesRecordUpdatedAtOperatorsInput
}

input FilterUpdateOneSalesRecordUpdatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterUpdateOneSalesRecord_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterUpdateOneSaveCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterUpdateOneSaveCreatedByOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneSaveFolderInput {
  AND: [FilterUpdateOneSaveFolderInput!]
  OR: [FilterUpdateOneSaveFolderInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneSaveFolderOperatorsInput
  brandId: MongoID
  createdAt: Date
  name: String
  parentId: MongoID
  slug: String
  updatedAt: Date
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneSaveFolderOperatorsInput {
  _id: FilterUpdateOneSaveFolder_idOperatorsInput
}

input FilterUpdateOneSaveFolder_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneSaveInput {
  AND: [FilterUpdateOneSaveInput!]
  OR: [FilterUpdateOneSaveInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneSaveOperatorsInput
  additionalInfo: JSON
  apartmentUnitTypeId: MongoID
  brandId: MongoID
  chosenStylePresetId: MongoID
  createdAt: Date
  createdBy: MongoID
  createdFromAP: MongoID
  customerId: MongoID
  data: String
  dataFormatVersion: Int
  dataUrl: String
  description: String
  isReadonly: Boolean
  isTemplate: Boolean
  metadata: Metadata
  moduleKitchenCustomData: String
  name: String
  parent: MongoID
  quantitySurveyJSON: String
  saveFolderId: MongoID
  storageBytesUsage: Float
  stylePresetGroupId: MongoID
  tags: [String]
  thumbnailUrl: String
  tunnelState: JSON
  type: EnumSaveType
  updatedAt: Date
  updatedBy: MongoID
  visitViewpoints: [FilterUpdateOneSaveVisitViewpointsInput!]
}

input FilterUpdateOneSaveIsTemplateOperatorsInput {
  exists: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nin: [Boolean]
}

input FilterUpdateOneSaveNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneSaveOperatorsInput {
  _id: FilterUpdateOneSave_idOperatorsInput
  createdAt: FilterUpdateOneSaveCreatedAtOperatorsInput
  createdBy: FilterUpdateOneSaveCreatedByOperatorsInput
  isTemplate: FilterUpdateOneSaveIsTemplateOperatorsInput
  name: FilterUpdateOneSaveNameOperatorsInput
  updatedAt: FilterUpdateOneSaveUpdatedAtOperatorsInput
}

input FilterUpdateOneSaveUpdatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

""""""
input FilterUpdateOneSaveVisitViewpointsInput {
  _id: MongoID
  orientation: FilterUpdateOneSaveVisitViewpointsOrientationInput
  position: FilterUpdateOneSaveVisitViewpointsPositionInput
}

""""""
input FilterUpdateOneSaveVisitViewpointsOrientationInput {
  x: Float
  y: Float
  z: Float
}

""""""
input FilterUpdateOneSaveVisitViewpointsPositionInput {
  x: Float
  y: Float
  z: Float
}

input FilterUpdateOneSave_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneSavesGroupInput {
  AND: [FilterUpdateOneSavesGroupInput!]
  OR: [FilterUpdateOneSavesGroupInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneSavesGroupOperatorsInput
  brandId: MongoID
  name: String
  publicNameTranslations: Translations
  savesIds: [MongoID]
  thumbnailPictureName: String
  type: EnumSavesGroupType
}

input FilterUpdateOneSavesGroupNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneSavesGroupOperatorsInput {
  _id: FilterUpdateOneSavesGroup_idOperatorsInput
  name: FilterUpdateOneSavesGroupNameOperatorsInput
}

input FilterUpdateOneSavesGroup_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterUpdateOneStylePresetCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

""""""
input FilterUpdateOneStylePresetCustomisationPresetsInput {
  _id: MongoID
  chosenItemId: MongoID
  customisationNameId: String
  filterTag: String
  rotationCondition: EnumStylePresetCustomisationPresetsRotationCondition
}

""""""
input FilterUpdateOneStylePresetGroupInput {
  AND: [FilterUpdateOneStylePresetGroupInput!]
  OR: [FilterUpdateOneStylePresetGroupInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneStylePresetGroupOperatorsInput
  brandId: MongoID
  name: String
  stylePresetIds: [MongoID]
}

input FilterUpdateOneStylePresetGroupNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneStylePresetGroupOperatorsInput {
  _id: FilterUpdateOneStylePresetGroup_idOperatorsInput
  name: FilterUpdateOneStylePresetGroupNameOperatorsInput
}

input FilterUpdateOneStylePresetGroup_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneStylePresetInput {
  AND: [FilterUpdateOneStylePresetInput!]
  OR: [FilterUpdateOneStylePresetInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneStylePresetOperatorsInput
  brandId: MongoID
  createdAt: Date
  customisationPresets: [FilterUpdateOneStylePresetCustomisationPresetsInput]
  name: String
  publicNameTranslations: Translations
  updatedAt: Date
}

input FilterUpdateOneStylePresetNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneStylePresetOperatorsInput {
  _id: FilterUpdateOneStylePreset_idOperatorsInput
  createdAt: FilterUpdateOneStylePresetCreatedAtOperatorsInput
  name: FilterUpdateOneStylePresetNameOperatorsInput
  updatedAt: FilterUpdateOneStylePresetUpdatedAtOperatorsInput
}

input FilterUpdateOneStylePresetUpdatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterUpdateOneStylePreset_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

""""""
input FilterUpdateOneTutorialInput {
  AND: [FilterUpdateOneTutorialInput!]
  OR: [FilterUpdateOneTutorialInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneTutorialOperatorsInput
  brandId: MongoID
  displayOnlyOnce: Boolean
  name: String
  points: [FilterUpdateOneTutorialPointInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneTutorialOperatorsInput {
  _id: FilterUpdateOneTutorial_idOperatorsInput
}

""""""
input FilterUpdateOneTutorialPointInput {
  _id: MongoID
  illustration: String
  target: EnumTutorialPointTarget
  textTranslations: Translations
  titleTranslations: Translations
}

input FilterUpdateOneTutorial_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterUpdateOneUserCreatedAtOperatorsInput {
  exists: Boolean
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input FilterUpdateOneUserCreatedByIdOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

input FilterUpdateOneUserEmailOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

""""""
input FilterUpdateOneUserInput {
  AND: [FilterUpdateOneUserInput!]
  OR: [FilterUpdateOneUserInput!]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneUserOperatorsInput
  createdAt: Date
  createdById: MongoID
  email: String
  favoriteItemsIds: [MongoID!]
  favoriteSavesIds: [MongoID!]
  name: String
  roles: [String!]
  updatedAt: Date
}

input FilterUpdateOneUserNameOperatorsInput {
  exists: Boolean
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nin: [String]
  regex: RegExpAsString
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneUserOperatorsInput {
  _id: FilterUpdateOneUser_idOperatorsInput
  createdAt: FilterUpdateOneUserCreatedAtOperatorsInput
  createdById: FilterUpdateOneUserCreatedByIdOperatorsInput
  email: FilterUpdateOneUserEmailOperatorsInput
  name: FilterUpdateOneUserNameOperatorsInput
}

input FilterUpdateOneUser_idOperatorsInput {
  exists: Boolean
  gt: MongoID
  gte: MongoID
  in: [MongoID]
  lt: MongoID
  lte: MongoID
  ne: MongoID
  nin: [MongoID]
}

type HealthCheckQueueJob implements Job {
  """A unique ID for the job."""
  _id: String!

  """When the job was created."""
  createdAt: Date!

  """When the job finished (completed or failed)."""
  finishedAt: Date

  """The name-type of the job. A queue may have multiple job types."""
  name: String!

  """When the job was processed (started)."""
  processedAt: Date

  """Job queue this job is in."""
  queue: String!

  """
  Resulting value of a completed job. Null if the job is not in completed state.
  """
  result: [SystemPrerequisite!]
  state: JobState!
}

type ImageUploadCredentials {
  expiry: Date!
  fileUrl: String!
  sasUrl: String!
}

"""Configures the parameters of one or multiple chunks in the document."""
type InputDocumentChunkManifest {
  """
  Render-time parameters object, implementing the chunk's parameters schema as given in the output manifest. The type of this property is loosely-typed in GraphQL, but verified at runtime against that schema. If the parameters passed are invalid against the schema, the chunk will be disabled and a manifest warning will be issued.
  """
  parameters: JSONObject

  """
  A path selector to target one or multiple chunks, since it can be a bash-like glob pattern, ex. "/my-section/my-chunk-123", "/my-section/my-chunk-*", "/**/my-chunk-*", etc.
  """
  path: String!

  """
  Defines whether the chunk should be rendered in the document. If set "false" on a group chunk, it applies to its children recursively.
  """
  render: Boolean!
}

"""Configures the parameters of one or multiple chunks in the document."""
input InputDocumentChunkManifestInput {
  """
  Render-time parameters object, implementing the chunk's parameters schema as given in the output manifest. The type of this property is loosely-typed in GraphQL, but verified at runtime against that schema. If the parameters passed are invalid against the schema, the chunk will be disabled and a manifest warning will be issued.
  """
  parameters: JSONObject

  """
  A path selector to target one or multiple chunks, since it can be a bash-like glob pattern, ex. "/my-section/my-chunk-123", "/my-section/my-chunk-*", "/**/my-chunk-*", etc.
  """
  path: String!

  """
  Defines whether the chunk should be rendered in the document. If set "false" on a group chunk, it applies to its children recursively.
  """
  render: Boolean! = true
}

"""
Allows to customize some parameters and variables for the generated document.
"""
input InputDocumentManifestInput {
  chunks: [InputDocumentChunkManifestInput!]

  """
  Locale code to use for the document, if supported by the document (ex. "en", "fr-fr", etc).
  If left empty, one will be inferred from a compatible request header if any, otherwise "en-us" will be used.
  """
  locale: String

  """
  Offset in minutes from UTC, to use for date/time formatting, if supported by the document.
  If left empty, one will be inferred from a compatible request header if any, otherwise UTC (+0) will be used.
  """
  timeZoneOffset: Int

  """
  Title of the PDF document. It is usually displayed in the PDF reader's title bar and used to name the generated file.
  If left empty, a default title will be chosen by the generator, depending on the context.
  """
  title: String
}

type Item {
  _id: MongoID!
  accessToken: String!
  articleCode: String
  brand: Brand!
  brandId: MongoID!
  buildingWingInfos: String
  canBeCutAlongHeight: Boolean
  canBeCutAlongLength: Boolean
  canBeCutAlongWidth: Boolean
  canBeDroppedOnZones: [EnumItemCanBeDroppedOnZones!]!
  categories(
    """Filter by fields"""
    filter: FilterFindManyCategoryInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyCategoryInput
  ): [Category!]!
  categoriesIds: [MongoID!]!
  compositeInfos: String
  consideredAsDroppableZones: [EnumItemConsideredAsDroppableZones!]!
  createdAt: Date
  createdBy: User
  createdById: MongoID
  customisationByItemsGroup: ItemsGroup
  customisationByItemsGroupId: MongoID
  customisationCountertop: customisationCountertop
  customisationCoverPlanes: [ItemCustomisationCoverPlanes!]!
  customisationMaterials: [ItemCustomisationMaterials!]!
  customisationSubObjects: [ItemCustomisationSubObjects!]!
  customisationSymbolicRepresentation: ItemCustomisationSymbolicRepresentation
  deleted: Boolean
  ean: String
  factSheet: ItemFactSheet!
  guardrailInformations: ItemGuardrailInformations
  metadata: [ItemMetadata!]!
  minimumPricedDimensions: ItemMinimumPricedDimensions

  """
  Base64-encoded SHA-256 hash of the blob pointed by modelUrl.
  Null if modelUrl is null, never null otherwise.
  """
  modelSha256: String

  """
  Size in bytes of the blob pointed by modelUrl.
  If modelUrl is null, this value will be 0.
  """
  modelSize: Int!
  modelUrl: String
  name: String!
  outputAssets: ItemOutputAssets
  physicalHeight: String
  physicalLength: String
  physicalWidth: String
  pillarInformations: ItemPillarInformations
  priceCoefExclusion: Boolean
  priceGeneration: EnumItemPriceGeneration
  priceUnit: EnumItemPriceUnit
  publicName(locale: String): String!
  publicNameTranslations: Translations!
  roofInformations: ItemRoofInformations
  scrapperTag: String
  slug: String
  stairsInformations: ItemStairsInformations
  tags: [String!]!
  thumbnailUrl: String
  tooltip3D(locale: String): String!
  tooltip3DTranslations: Translations!
  type: EnumItemType
  updatedAt: Date
  updatedById: MongoID
  vegetationInformations: ItemVegetationInformations
  wallInformations: ItemWallInformations
}

type ItemCustomisationCoverPlanes {
  _id: MongoID
  associatedItem: MongoID
  hideForSingleObject: Boolean
  mode: EnumItemCustomisationCoverPlanesMode
  nameId: String
  positions: ItemCustomisationCoverPlanesPositions
  showOnStart: Boolean
  weight: Float
}

input ItemCustomisationCoverPlanesInput {
  _id: MongoID
  associatedItem: MongoID
  hideForSingleObject: Boolean
  mode: EnumItemCustomisationCoverPlanesMode
  nameId: String
  positions: ItemCustomisationCoverPlanesPositionsInput
  showOnStart: Boolean
  weight: Float
}

type ItemCustomisationCoverPlanesPositions {
  above: Boolean
  behind: Boolean
  front: Boolean
  left: Boolean
  right: Boolean
}

input ItemCustomisationCoverPlanesPositionsInput {
  above: Boolean
  behind: Boolean
  front: Boolean
  left: Boolean
  right: Boolean
}

type ItemCustomisationMaterials {
  _id: MongoID
  associatedItemsGroup: MongoID
  associatedPalette: MongoID
  materials: [String]
  name(locale: String): String!
  nameId: String
  nameTranslations: Translations!
  showOnStart: Boolean
  type: EnumItemCustomisationMaterialsType
  weight: Float
}

input ItemCustomisationMaterialsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  associatedPalette: MongoID
  materials: [String]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  type: EnumItemCustomisationMaterialsType
  weight: Float
}

type ItemCustomisationSubObjects {
  _id: MongoID
  associatedItemsGroup: MongoID
  hooks: [ItemCustomisationSubObjectsHooks]
  name(locale: String): String!
  nameId: String
  nameTranslations: Translations!
  showOnStart: Boolean
  weight: Float
}

type ItemCustomisationSubObjectsHooks {
  _id: MongoID
  orientation: ItemCustomisationSubObjectsHooksOrientation
  position: ItemCustomisationSubObjectsHooksPosition
  type: EnumItemCustomisationSubObjectsHooksType
}

input ItemCustomisationSubObjectsHooksInput {
  _id: MongoID
  orientation: ItemCustomisationSubObjectsHooksOrientationInput
  position: ItemCustomisationSubObjectsHooksPositionInput
  type: EnumItemCustomisationSubObjectsHooksType
}

type ItemCustomisationSubObjectsHooksOrientation {
  x: Float
  y: Float
  z: Float
}

input ItemCustomisationSubObjectsHooksOrientationInput {
  x: Float
  y: Float
  z: Float
}

type ItemCustomisationSubObjectsHooksPosition {
  x: Float
  y: Float
  z: Float
}

input ItemCustomisationSubObjectsHooksPositionInput {
  x: Float
  y: Float
  z: Float
}

input ItemCustomisationSubObjectsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  hooks: [ItemCustomisationSubObjectsHooksInput]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  weight: Float
}

type ItemCustomisationSymbolicRepresentation {
  _id: MongoID
  anglePositionIsRight: Boolean
  break3D: Boolean
  colors: EnumItemCustomisationSymbolicRepresentationColors
  displayDiagonals: Boolean
  doorType: EnumItemCustomisationSymbolicRepresentationDoorType
  drawerCount: Float
  symbolicIcon: EnumItemCustomisationSymbolicRepresentationSymbolicIcon
  symbolicIconShape: EnumItemCustomisationSymbolicRepresentationSymbolicIconShape
  symbolicIconSubType: EnumItemCustomisationSymbolicRepresentationSymbolicIconSubType
  type: EnumItemCustomisationSymbolicRepresentationType
}

input ItemCustomisationSymbolicRepresentationInput {
  _id: MongoID
  anglePositionIsRight: Boolean
  break3D: Boolean
  colors: EnumItemCustomisationSymbolicRepresentationColors
  displayDiagonals: Boolean
  doorType: EnumItemCustomisationSymbolicRepresentationDoorType
  drawerCount: Float
  symbolicIcon: EnumItemCustomisationSymbolicRepresentationSymbolicIcon
  symbolicIconShape: EnumItemCustomisationSymbolicRepresentationSymbolicIconShape
  symbolicIconSubType: EnumItemCustomisationSymbolicRepresentationSymbolicIconSubType
  type: EnumItemCustomisationSymbolicRepresentationType
}

type ItemFactSheet {
  _id: MongoID
  descriptionHtml: String
  descriptionJson: JSONObject
  logoPicture: String
  pictureUrl: String
}

input ItemFactSheetInput {
  _id: MongoID
  descriptionJson: JSONObject
  logoPicture: String
  pictureUrl: String
}

type ItemGuardrailInformations {
  _id: MongoID
  meshes: [ItemGuardrailInformationsMeshes]
}

input ItemGuardrailInformationsInput {
  _id: MongoID
  meshes: [ItemGuardrailInformationsMeshesInput]
}

type ItemGuardrailInformationsMeshes {
  _id: MongoID
  dimensions: ItemGuardrailInformationsMeshesDimensions
  materialId: MongoID
  meshId: MongoID
  options: ItemGuardrailInformationsMeshesOptions
  placing: ItemGuardrailInformationsMeshesPlacing
  surface: ItemGuardrailInformationsMeshesSurface
  type: EnumItemGuardrailInformationsMeshesType
}

type ItemGuardrailInformationsMeshesDimensions {
  height: Float
  length: Float
  thickness: Float
}

input ItemGuardrailInformationsMeshesDimensionsInput {
  height: Float
  length: Float
  thickness: Float
}

input ItemGuardrailInformationsMeshesInput {
  _id: MongoID
  dimensions: ItemGuardrailInformationsMeshesDimensionsInput
  materialId: MongoID
  meshId: MongoID
  options: ItemGuardrailInformationsMeshesOptionsInput
  placing: ItemGuardrailInformationsMeshesPlacingInput
  surface: ItemGuardrailInformationsMeshesSurfaceInput
  type: EnumItemGuardrailInformationsMeshesType
}

type ItemGuardrailInformationsMeshesOptions {
  closeBottom: Boolean
  closeTop: Boolean
  shape: EnumItemGuardrailInformationsMeshesOptionsShape
}

input ItemGuardrailInformationsMeshesOptionsInput {
  closeBottom: Boolean
  closeTop: Boolean
  shape: EnumItemGuardrailInformationsMeshesOptionsShape
}

type ItemGuardrailInformationsMeshesPlacing {
  elevation: Float
  endContraction: Float
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  placeEndPillarsDiagonally: Boolean
}

input ItemGuardrailInformationsMeshesPlacingInput {
  elevation: Float
  endContraction: Float
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  placeEndPillarsDiagonally: Boolean
}

type ItemGuardrailInformationsMeshesSurface {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
}

input ItemGuardrailInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
}

type ItemMetadata {
  _id: MongoID
  key: String
  value: String
}

input ItemMetadataInput {
  _id: MongoID
  key: String
  value: String
}

type ItemMinimumPricedDimensions {
  _id: MongoID
  depth: String
  width: String
}

input ItemMinimumPricedDimensionsInput {
  _id: MongoID
  depth: String
  width: String
}

type ItemOutputAssets {
  _id: MongoID
  coatingVariants: [ItemOutputAssetsCoatingVariants]
}

type ItemOutputAssetsCoatingVariants {
  _id: MongoID
  albedo: ItemOutputAssetsCoatingVariantsAlbedo
  metallic: ItemOutputAssetsCoatingVariantsAlbedo
  name: String
  normal: ItemOutputAssetsCoatingVariantsAlbedo
  smoothness: ItemOutputAssetsCoatingVariantsAlbedo
}

type ItemOutputAssetsCoatingVariantsAlbedo {
  _id: MongoID
  name: String
  type: String
  url: String!
}

input ItemOutputAssetsCoatingVariantsAlbedoInput {
  _id: MongoID
  name: String
  type: String
  url: String!
}

input ItemOutputAssetsCoatingVariantsInput {
  _id: MongoID
  albedo: ItemOutputAssetsCoatingVariantsAlbedoInput
  metallic: ItemOutputAssetsCoatingVariantsAlbedoInput
  name: String
  normal: ItemOutputAssetsCoatingVariantsAlbedoInput
  smoothness: ItemOutputAssetsCoatingVariantsAlbedoInput
}

input ItemOutputAssetsInput {
  _id: MongoID
  coatingVariants: [ItemOutputAssetsCoatingVariantsInput]
}

type ItemPillarInformations {
  _id: MongoID
  cylinderSides: Float
  materials: [ItemPillarInformationsMaterials]
  models: [ItemPillarInformationsModels]
  necking: ItemPillarInformationsNecking
}

input ItemPillarInformationsInput {
  _id: MongoID
  cylinderSides: Float
  materials: [ItemPillarInformationsMaterialsInput]
  models: [ItemPillarInformationsModelsInput]
  necking: ItemPillarInformationsNeckingInput
}

type ItemPillarInformationsMaterials {
  _id: MongoID
  materialId: MongoID
  type: EnumItemPillarInformationsMaterialsType
}

input ItemPillarInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemPillarInformationsMaterialsType
}

type ItemPillarInformationsModels {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemPillarInformationsModelsType
  width: Float
}

input ItemPillarInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemPillarInformationsModelsType
  width: Float
}

type ItemPillarInformationsNecking {
  crossSection: ItemPillarInformationsNeckingCrossSection
  distanceToTop: Float
}

type ItemPillarInformationsNeckingCrossSection {
  height: Float
  width: Float
}

input ItemPillarInformationsNeckingCrossSectionInput {
  height: Float
  width: Float
}

input ItemPillarInformationsNeckingInput {
  crossSection: ItemPillarInformationsNeckingCrossSectionInput
  distanceToTop: Float
}

type ItemRoofInformations {
  _id: MongoID
  covering: ItemRoofInformationsCovering
  eavesStyle: ItemRoofInformationsEavesStyle
  flatRoof: ItemRoofInformationsFlatRoof
  framing: ItemRoofInformationsFraming
  gutter: ItemRoofInformationsGutter
  materials: [ItemRoofInformationsMaterials]
  models: [ItemRoofInformationsModels]
  overhang: ItemRoofInformationsOverhang
  purlins: ItemRoofInformationsPurlins
  rafters: ItemRoofInformationsRafters
  ridgeBoard: ItemRoofInformationsRidgeBoard
  solarPanels: ItemRoofInformationsSolarPanels
  topPlate: ItemRoofInformationsTopPlate
}

type ItemRoofInformationsCovering {
  included: Boolean
  ridgeTiles: ItemRoofInformationsCoveringRidgeTiles
  sealingThickness: Float
  spaceBetweenSealingAndTiles: Float
  tilesThickness: Float
}

input ItemRoofInformationsCoveringInput {
  included: Boolean
  ridgeTiles: ItemRoofInformationsCoveringRidgeTilesInput
  sealingThickness: Float
  spaceBetweenSealingAndTiles: Float
  tilesThickness: Float
}

type ItemRoofInformationsCoveringRidgeTiles {
  innerRadius: Float
  length: Float
  radius: Float
}

input ItemRoofInformationsCoveringRidgeTilesInput {
  innerRadius: Float
  length: Float
  radius: Float
}

type ItemRoofInformationsEavesStyle {
  type: EnumItemRoofInformationsEavesStyleType
}

input ItemRoofInformationsEavesStyleInput {
  type: EnumItemRoofInformationsEavesStyleType
}

type ItemRoofInformationsFlatRoof {
  borderDimensions: ItemRoofInformationsFlatRoofBorderDimensions
  gravelThickness: Float
  included: Boolean
}

type ItemRoofInformationsFlatRoofBorderDimensions {
  height: Float
  width: Float
}

input ItemRoofInformationsFlatRoofBorderDimensionsInput {
  height: Float
  width: Float
}

input ItemRoofInformationsFlatRoofInput {
  borderDimensions: ItemRoofInformationsFlatRoofBorderDimensionsInput
  gravelThickness: Float
  included: Boolean
}

type ItemRoofInformationsFraming {
  included: Boolean
  pieces: [ItemRoofInformationsFramingPieces]
  type: EnumItemRoofInformationsFramingType
}

input ItemRoofInformationsFramingInput {
  included: Boolean
  pieces: [ItemRoofInformationsFramingPiecesInput]
  type: EnumItemRoofInformationsFramingType
}

type ItemRoofInformationsFramingPieces {
  _id: MongoID
  end_coordinate: ItemRoofInformationsFramingPiecesEnd_coordinate
  name: String
  start_coordinate: ItemRoofInformationsFramingPiecesStart_coordinate
  type: EnumItemRoofInformationsFramingPiecesType
}

type ItemRoofInformationsFramingPiecesEnd_coordinate {
  x: Float
  y: Float
}

input ItemRoofInformationsFramingPiecesEnd_coordinateInput {
  x: Float
  y: Float
}

input ItemRoofInformationsFramingPiecesInput {
  _id: MongoID
  end_coordinate: ItemRoofInformationsFramingPiecesEnd_coordinateInput
  name: String
  start_coordinate: ItemRoofInformationsFramingPiecesStart_coordinateInput
  type: EnumItemRoofInformationsFramingPiecesType
}

type ItemRoofInformationsFramingPiecesStart_coordinate {
  x: Float
  y: Float
}

input ItemRoofInformationsFramingPiecesStart_coordinateInput {
  x: Float
  y: Float
}

type ItemRoofInformationsGutter {
  included: Boolean
  innerRadius: Float
  radius: Float
}

input ItemRoofInformationsGutterInput {
  included: Boolean
  innerRadius: Float
  radius: Float
}

input ItemRoofInformationsInput {
  _id: MongoID
  covering: ItemRoofInformationsCoveringInput
  eavesStyle: ItemRoofInformationsEavesStyleInput
  flatRoof: ItemRoofInformationsFlatRoofInput
  framing: ItemRoofInformationsFramingInput
  gutter: ItemRoofInformationsGutterInput
  materials: [ItemRoofInformationsMaterialsInput]
  models: [ItemRoofInformationsModelsInput]
  overhang: ItemRoofInformationsOverhangInput
  purlins: ItemRoofInformationsPurlinsInput
  rafters: ItemRoofInformationsRaftersInput
  ridgeBoard: ItemRoofInformationsRidgeBoardInput
  solarPanels: ItemRoofInformationsSolarPanelsInput
  topPlate: ItemRoofInformationsTopPlateInput
}

type ItemRoofInformationsMaterials {
  _id: MongoID
  materialId: MongoID
  type: EnumItemRoofInformationsMaterialsType
}

input ItemRoofInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemRoofInformationsMaterialsType
}

type ItemRoofInformationsModels {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemRoofInformationsModelsType
  width: Float
}

input ItemRoofInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemRoofInformationsModelsType
  width: Float
}

type ItemRoofInformationsOverhang {
  bargeboard: Float
  bargeboardPurlins: Float
  bargeboardRafters: Float
  eave: Float
  included: Boolean
}

input ItemRoofInformationsOverhangInput {
  bargeboard: Float
  bargeboardPurlins: Float
  bargeboardRafters: Float
  eave: Float
  included: Boolean
}

type ItemRoofInformationsPurlins {
  bottom: ItemRoofInformationsPurlinsBottom
  included: Boolean
  intermediate: ItemRoofInformationsPurlinsIntermediate
  ridge: ItemRoofInformationsPurlinsRidge
}

type ItemRoofInformationsPurlinsBottom {
  height: Float
  width: Float
}

input ItemRoofInformationsPurlinsBottomInput {
  height: Float
  width: Float
}

input ItemRoofInformationsPurlinsInput {
  bottom: ItemRoofInformationsPurlinsBottomInput
  included: Boolean
  intermediate: ItemRoofInformationsPurlinsIntermediateInput
  ridge: ItemRoofInformationsPurlinsRidgeInput
}

type ItemRoofInformationsPurlinsIntermediate {
  height: Float
  width: Float
}

input ItemRoofInformationsPurlinsIntermediateInput {
  height: Float
  width: Float
}

type ItemRoofInformationsPurlinsRidge {
  height: Float
  width: Float
}

input ItemRoofInformationsPurlinsRidgeInput {
  height: Float
  width: Float
}

type ItemRoofInformationsRafters {
  crossSection: ItemRoofInformationsRaftersCrossSection
  included: Boolean
  typicalDistance: Float
}

type ItemRoofInformationsRaftersCrossSection {
  height: Float
  width: Float
}

input ItemRoofInformationsRaftersCrossSectionInput {
  height: Float
  width: Float
}

input ItemRoofInformationsRaftersInput {
  crossSection: ItemRoofInformationsRaftersCrossSectionInput
  included: Boolean
  typicalDistance: Float
}

type ItemRoofInformationsRidgeBoard {
  crossSection: ItemRoofInformationsRidgeBoardCrossSection
  included: Boolean
}

type ItemRoofInformationsRidgeBoardCrossSection {
  height: Float
  width: Float
}

input ItemRoofInformationsRidgeBoardCrossSectionInput {
  height: Float
  width: Float
}

input ItemRoofInformationsRidgeBoardInput {
  crossSection: ItemRoofInformationsRidgeBoardCrossSectionInput
  included: Boolean
}

type ItemRoofInformationsSolarPanels {
  distanceToRoof: Float
  frame: ItemRoofInformationsSolarPanelsFrame
  height: Float
  included: Boolean
  thickness: Float
  width: Float
}

type ItemRoofInformationsSolarPanelsFrame {
  thickness: Float
  width: Float
}

input ItemRoofInformationsSolarPanelsFrameInput {
  thickness: Float
  width: Float
}

input ItemRoofInformationsSolarPanelsInput {
  distanceToRoof: Float
  frame: ItemRoofInformationsSolarPanelsFrameInput
  height: Float
  included: Boolean
  thickness: Float
  width: Float
}

type ItemRoofInformationsTopPlate {
  crossSection: ItemRoofInformationsTopPlateCrossSection
  included: Boolean
}

type ItemRoofInformationsTopPlateCrossSection {
  height: Float
  width: Float
}

input ItemRoofInformationsTopPlateCrossSectionInput {
  height: Float
  width: Float
}

input ItemRoofInformationsTopPlateInput {
  crossSection: ItemRoofInformationsTopPlateCrossSectionInput
  included: Boolean
}

type ItemStairsInformations {
  _id: MongoID
  landing: ItemStairsInformationsLanding
  materials: [ItemStairsInformationsMaterials]
  models: [ItemStairsInformationsModels]
  railing: ItemStairsInformationsRailing
  steps: ItemStairsInformationsSteps
  stringers: ItemStairsInformationsStringers
}

input ItemStairsInformationsInput {
  _id: MongoID
  landing: ItemStairsInformationsLandingInput
  materials: [ItemStairsInformationsMaterialsInput]
  models: [ItemStairsInformationsModelsInput]
  railing: ItemStairsInformationsRailingInput
  steps: ItemStairsInformationsStepsInput
  stringers: ItemStairsInformationsStringersInput
}

type ItemStairsInformationsLanding {
  height: Float
}

input ItemStairsInformationsLandingInput {
  height: Float
}

type ItemStairsInformationsMaterials {
  _id: MongoID
  materialId: MongoID
  type: EnumItemStairsInformationsMaterialsType
}

input ItemStairsInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemStairsInformationsMaterialsType
}

type ItemStairsInformationsModels {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemStairsInformationsModelsType
  width: Float
}

input ItemStairsInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemStairsInformationsModelsType
  width: Float
}

type ItemStairsInformationsRailing {
  balusters: ItemStairsInformationsRailingBalusters
  handrail: ItemStairsInformationsRailingHandrail
  posts: ItemStairsInformationsRailingPosts
}

type ItemStairsInformationsRailingBalusters {
  radius: Float
  typicalDistance: Float
}

input ItemStairsInformationsRailingBalustersInput {
  radius: Float
  typicalDistance: Float
}

type ItemStairsInformationsRailingHandrail {
  crossSection: ItemStairsInformationsRailingHandrailCrossSection
  elevation: Float
}

type ItemStairsInformationsRailingHandrailCrossSection {
  height: Float
  width: Float
}

input ItemStairsInformationsRailingHandrailCrossSectionInput {
  height: Float
  width: Float
}

input ItemStairsInformationsRailingHandrailInput {
  crossSection: ItemStairsInformationsRailingHandrailCrossSectionInput
  elevation: Float
}

input ItemStairsInformationsRailingInput {
  balusters: ItemStairsInformationsRailingBalustersInput
  handrail: ItemStairsInformationsRailingHandrailInput
  posts: ItemStairsInformationsRailingPostsInput
}

type ItemStairsInformationsRailingPosts {
  crossSection: ItemStairsInformationsRailingPostsCrossSection
}

type ItemStairsInformationsRailingPostsCrossSection {
  height: Float
  width: Float
}

input ItemStairsInformationsRailingPostsCrossSectionInput {
  height: Float
  width: Float
}

input ItemStairsInformationsRailingPostsInput {
  crossSection: ItemStairsInformationsRailingPostsCrossSectionInput
}

type ItemStairsInformationsSteps {
  risers: ItemStairsInformationsStepsRisers
  treats: ItemStairsInformationsStepsTreats
}

input ItemStairsInformationsStepsInput {
  risers: ItemStairsInformationsStepsRisersInput
  treats: ItemStairsInformationsStepsTreatsInput
}

type ItemStairsInformationsStepsRisers {
  height: Float
  thickness: Float
}

input ItemStairsInformationsStepsRisersInput {
  height: Float
  thickness: Float
}

type ItemStairsInformationsStepsTreats {
  height: Float
  nose: Float
}

input ItemStairsInformationsStepsTreatsInput {
  height: Float
  nose: Float
}

type ItemStairsInformationsStringers {
  crossSection: ItemStairsInformationsStringersCrossSection
  overTreat: Float
}

type ItemStairsInformationsStringersCrossSection {
  height: Float
  width: Float
}

input ItemStairsInformationsStringersCrossSectionInput {
  height: Float
  width: Float
}

input ItemStairsInformationsStringersInput {
  crossSection: ItemStairsInformationsStringersCrossSectionInput
  overTreat: Float
}

type ItemVegetationInformations {
  _id: MongoID
  canBeSelected: Boolean!
}

input ItemVegetationInformationsInput {
  _id: MongoID
  canBeSelected: Boolean
}

type ItemWallInformations {
  _id: MongoID
  application: ItemWallInformationsApplication
  class: EnumItemWallInformationsClass
  meshes: [ItemWallInformationsMeshes]
}

type ItemWallInformationsApplication {
  bothSides: Boolean
  exteriorFacesExteriorWalls: Boolean
  interiorFacesExteriorWalls: Boolean
  interiorWalls: Boolean
  overRegularWall: Boolean
}

input ItemWallInformationsApplicationInput {
  bothSides: Boolean
  exteriorFacesExteriorWalls: Boolean
  interiorFacesExteriorWalls: Boolean
  interiorWalls: Boolean
  overRegularWall: Boolean
}

input ItemWallInformationsInput {
  _id: MongoID
  application: ItemWallInformationsApplicationInput
  class: EnumItemWallInformationsClass
  meshes: [ItemWallInformationsMeshesInput]
}

type ItemWallInformationsMeshes {
  _id: MongoID
  buildingMaterial: EnumItemWallInformationsMeshesBuildingMaterial
  dimensions: ItemWallInformationsMeshesDimensions
  display: ItemWallInformationsMeshesDisplay
  materialId: MongoID
  meshId: MongoID
  name: String
  options: ItemWallInformationsMeshesOptions
  overlapPriority: Float
  placing: ItemWallInformationsMeshesPlacing
  segmentTypes: ItemWallInformationsMeshesSegmentTypes
  surface: ItemWallInformationsMeshesSurface
  type: EnumItemWallInformationsMeshesType
}

type ItemWallInformationsMeshesDimensions {
  length: Float
  thickness: Float
}

input ItemWallInformationsMeshesDimensionsInput {
  length: Float
  thickness: Float
}

type ItemWallInformationsMeshesDisplay {
  autoCut: Boolean
  whenWallsHigh: Boolean
  whenWallsLow: Boolean
}

input ItemWallInformationsMeshesDisplayInput {
  autoCut: Boolean
  whenWallsHigh: Boolean
  whenWallsLow: Boolean
}

input ItemWallInformationsMeshesInput {
  _id: MongoID
  buildingMaterial: EnumItemWallInformationsMeshesBuildingMaterial
  dimensions: ItemWallInformationsMeshesDimensionsInput
  display: ItemWallInformationsMeshesDisplayInput
  materialId: MongoID
  meshId: MongoID
  name: String
  options: ItemWallInformationsMeshesOptionsInput
  overlapPriority: Float
  placing: ItemWallInformationsMeshesPlacingInput
  segmentTypes: ItemWallInformationsMeshesSegmentTypesInput
  surface: ItemWallInformationsMeshesSurfaceInput
  type: EnumItemWallInformationsMeshesType
}

type ItemWallInformationsMeshesOptions {
  closeBack: Boolean
  closeBottom: Boolean
  closeFront: Boolean
  closeSides: Boolean
  closeTop: Boolean
  hidden: Boolean
  nextToDoorsAndWindows: Boolean
  paintable: Boolean
  shape: EnumItemWallInformationsMeshesOptionsShape
  skewOnCorners: Boolean
}

input ItemWallInformationsMeshesOptionsInput {
  closeBack: Boolean
  closeBottom: Boolean
  closeFront: Boolean
  closeSides: Boolean
  closeTop: Boolean
  hidden: Boolean
  nextToDoorsAndWindows: Boolean
  paintable: Boolean
  shape: EnumItemWallInformationsMeshesOptionsShape
  skewOnCorners: Boolean
}

type ItemWallInformationsMeshesPlacing {
  beamDirection: EnumItemWallInformationsMeshesPlacingBeamDirection
  bottomElevation: ItemWallInformationsMeshesPlacingBottomElevation
  depthOffset: Float
  doorPostOffset: Float
  endContraction: Float
  endDepth: ItemWallInformationsMeshesPlacingStartDepth
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  moveVerticesAbove: Float
  pivotIsOnTop: Boolean
  placeEndPillarsDiagonally: Boolean
  repetitionFilter: EnumItemWallInformationsMeshesPlacingRepetitionFilter
  startDepth: ItemWallInformationsMeshesPlacingStartDepth
  stretchVertically: Boolean
  topElevation: ItemWallInformationsMeshesPlacingBottomElevation
}

type ItemWallInformationsMeshesPlacingBottomElevation {
  _id: MongoID
  elevation: Float
  reference: EnumItemWallInformationsMeshesPlacingBottomElevationReference
}

input ItemWallInformationsMeshesPlacingBottomElevationInput {
  _id: MongoID
  elevation: Float
  reference: EnumItemWallInformationsMeshesPlacingBottomElevationReference
}

input ItemWallInformationsMeshesPlacingInput {
  beamDirection: EnumItemWallInformationsMeshesPlacingBeamDirection
  bottomElevation: ItemWallInformationsMeshesPlacingBottomElevationInput
  depthOffset: Float
  doorPostOffset: Float
  endContraction: Float
  endDepth: ItemWallInformationsMeshesPlacingStartDepthInput
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  moveVerticesAbove: Float
  pivotIsOnTop: Boolean
  placeEndPillarsDiagonally: Boolean
  repetitionFilter: EnumItemWallInformationsMeshesPlacingRepetitionFilter
  startDepth: ItemWallInformationsMeshesPlacingStartDepthInput
  stretchVertically: Boolean
  topElevation: ItemWallInformationsMeshesPlacingBottomElevationInput
}

type ItemWallInformationsMeshesPlacingStartDepth {
  _id: MongoID
  depth: Float
  plusOnTop: Float
  reference: EnumItemWallInformationsMeshesPlacingStartDepthReference
}

input ItemWallInformationsMeshesPlacingStartDepthInput {
  _id: MongoID
  depth: Float
  plusOnTop: Float
  reference: EnumItemWallInformationsMeshesPlacingStartDepthReference
}

type ItemWallInformationsMeshesSegmentTypes {
  doors: Boolean
  walls: Boolean
  windows: Boolean
}

input ItemWallInformationsMeshesSegmentTypesInput {
  doors: Boolean
  walls: Boolean
  windows: Boolean
}

type ItemWallInformationsMeshesSurface {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
  swapUV: Boolean
}

input ItemWallInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
  swapUV: Boolean
}

type ItemsGroup {
  _id: MongoID!
  brandId: MongoID!
  choiceIsMandatory: Boolean!
  generated: Boolean!
  items: [Item!]!
  itemsIds: [MongoID!]!
  name: String!
  option: ItemsGroupOption
  publicName(locale: String): String!
  publicNameTranslations: Translations!
  shouldBeOpenInGUI: Boolean!
  thumbnailPictureName: String
  type: EnumItemsGroupType!
}

type ItemsGroupOption {
  _id: MongoID
  baseItem: Item
  baseItemId: MongoID
  choiceIsMandatory: Boolean
  disableDefaultChoice: Boolean
  positions: [ItemsGroupOptionPositions!]!
}

input ItemsGroupOptionInput {
  _id: MongoID
  baseItemId: MongoID
  choiceIsMandatory: Boolean
  disableDefaultChoice: Boolean
  positions: [ItemsGroupOptionPositionsInput!]
}

type ItemsGroupOptionPositions {
  _id: MongoID
  margins: ItemsGroupOptionPositionsMargins
  placement: EnumItemsGroupOptionPositionsPlacement!
  rotation: EnumItemsGroupOptionPositionsRotation!
}

input ItemsGroupOptionPositionsInput {
  _id: MongoID
  margins: ItemsGroupOptionPositionsMarginsInput
  placement: EnumItemsGroupOptionPositionsPlacement!
  rotation: EnumItemsGroupOptionPositionsRotation!
}

type ItemsGroupOptionPositionsMargins {
  x: Float!
  y: Float!
  z: Float!
}

input ItemsGroupOptionPositionsMarginsInput {
  x: Float!
  y: Float!
  z: Float!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

interface Job {
  """A unique ID for the job."""
  _id: String!

  """When the job was created."""
  createdAt: Date!

  """When the job finished (completed or failed)."""
  finishedAt: Date

  """The name-type of the job. A queue may have multiple job types."""
  name: String!

  """When the job was processed (started)."""
  processedAt: Date

  """Job queue this job is in."""
  queue: String!
  state: JobState!
}

enum JobState {
  ACTIVE
  COMPLETED
  DELAYED
  FAILED
  UNKNOWN
  WAITING
  WAITING_CHILDREN
}

"""
String token that can be returned by some operations triggering jobs, that allows further access to the job's state via job queries taking this token in input.
"""
scalar JobToken

"""
The `Metadata` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Metadata

"""
The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

type Mutation {
  """
  Creates a copy of a given AccessPoint, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  accessPointCloneById(_id: MongoID!): CreateOneAccessPointPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  accessPointCreateOne(record: CreateOneAccessPointInput!): CreateOneAccessPointPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  accessPointRemoveById(_id: MongoID!): RemoveByIdAccessPointPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  accessPointRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneAccessPointInput
    sort: SortRemoveOneAccessPointInput
  ): RemoveOneAccessPointPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  accessPointUpdateById(_id: MongoID!, record: UpdateByIdAccessPointInput!): UpdateByIdAccessPointPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  accessPointUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneAccessPointInput
    record: UpdateOneAccessPointInput!
    skip: Int
    sort: SortUpdateOneAccessPointInput
  ): UpdateOneAccessPointPayload

  """
  Creates a copy of a given Applet, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  appletCloneById(_id: MongoID!): CreateOneAppletPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  appletCreateOne(record: CreateOneAppletInput!): CreateOneAppletPayload

  """
  Creates a copy of a given BarcodeCollection, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  barcodeCollectionCloneById(_id: MongoID!): CreateOneBarcodeCollectionPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  barcodeCollectionCreateOne(record: CreateOneBarcodeCollectionInput!): CreateOneBarcodeCollectionPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  barcodeCollectionRemoveById(_id: MongoID!): RemoveByIdBarcodeCollectionPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  barcodeCollectionRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneBarcodeCollectionInput
    sort: SortRemoveOneBarcodeCollectionInput
  ): RemoveOneBarcodeCollectionPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  barcodeCollectionUpdateById(_id: MongoID!, record: UpdateByIdBarcodeCollectionInput!): UpdateByIdBarcodeCollectionPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  barcodeCollectionUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneBarcodeCollectionInput
    record: UpdateOneBarcodeCollectionInput!
    skip: Int
    sort: SortUpdateOneBarcodeCollectionInput
  ): UpdateOneBarcodeCollectionPayload

  """
  Creates a copy of a given Brand, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  brandCloneById(_id: MongoID!): CreateOneBrandPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  brandCreateOne(record: CreateOneBrandInput!): CreateOneBrandPayload

  """
  Creates a copy of a given PriceTable, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  brandParametersPriceTableCloneById(_id: MongoID!): CreateOnePriceTablePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  brandParametersPriceTableCreateOne(record: CreateOnePriceTableInput!): CreateOnePriceTablePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  brandParametersPriceTableRemoveById(_id: MongoID!): RemoveByIdPriceTablePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  brandParametersPriceTableRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOnePriceTableInput
    sort: SortRemoveOnePriceTableInput
  ): RemoveOnePriceTablePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  brandParametersPriceTableUpdateById(_id: MongoID!, record: UpdateByIdPriceTableInput!): UpdateByIdPriceTablePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  brandParametersPriceTableUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOnePriceTableInput
    record: UpdateOnePriceTableInput!
    skip: Int
    sort: SortUpdateOnePriceTableInput
  ): UpdateOnePriceTablePayload

  """Update some prices in a price table"""
  brandParametersPriceTableUpdatePrices(_id: MongoID!, prices: [PriceTablePricesInput], useArticleCode: Boolean!, useEan: Boolean!): PriceTable!

  """
  Creates a copy of a given BrandParametersPricing, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  brandParametersPricingCloneById(_id: MongoID!): CreateOneBrandParametersPricingPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  brandParametersPricingCreateOne(record: CreateOneBrandParametersPricingInput!): CreateOneBrandParametersPricingPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  brandParametersPricingRemoveById(_id: MongoID!): RemoveByIdBrandParametersPricingPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  brandParametersPricingRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneBrandParametersPricingInput
    sort: SortRemoveOneBrandParametersPricingInput
  ): RemoveOneBrandParametersPricingPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  brandParametersPricingUpdateById(_id: MongoID!, record: UpdateByIdBrandParametersPricingInput!): UpdateByIdBrandParametersPricingPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  brandParametersPricingUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneBrandParametersPricingInput
    record: UpdateOneBrandParametersPricingInput!
    skip: Int
    sort: SortUpdateOneBrandParametersPricingInput
  ): UpdateOneBrandParametersPricingPayload

  """
  Creates a copy of a given BrandParametersScrapper, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  brandParametersScrapperCloneById(_id: MongoID!): CreateOneBrandParametersScrapperPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  brandParametersScrapperCreateOne(record: CreateOneBrandParametersScrapperInput!): CreateOneBrandParametersScrapperPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  brandParametersScrapperRemoveById(_id: MongoID!): RemoveByIdBrandParametersScrapperPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  brandParametersScrapperRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneBrandParametersScrapperInput
    sort: SortRemoveOneBrandParametersScrapperInput
  ): RemoveOneBrandParametersScrapperPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  brandParametersScrapperUpdateById(_id: MongoID!, record: UpdateByIdBrandParametersScrapperInput!): UpdateByIdBrandParametersScrapperPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  brandParametersScrapperUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneBrandParametersScrapperInput
    record: UpdateOneBrandParametersScrapperInput!
    skip: Int
    sort: SortUpdateOneBrandParametersScrapperInput
  ): UpdateOneBrandParametersScrapperPayload

  """
  Creates a copy of a given BrandParametersTunnel, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  brandParametersTunnelCloneById(_id: MongoID!): CreateOneBrandParametersTunnelPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  brandParametersTunnelCreateOne(record: CreateOneBrandParametersTunnelInput!): CreateOneBrandParametersTunnelPayload

  """Empty the associated cache bundle of this tunnel."""
  brandParametersTunnelEmptyCacheResolver(_id: MongoID!): Success

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  brandParametersTunnelRemoveById(_id: MongoID!): RemoveByIdBrandParametersTunnelPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  brandParametersTunnelRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneBrandParametersTunnelInput
    sort: SortRemoveOneBrandParametersTunnelInput
  ): RemoveOneBrandParametersTunnelPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  brandParametersTunnelUpdateById(_id: MongoID!, record: UpdateByIdBrandParametersTunnelInput!): UpdateByIdBrandParametersTunnelPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  brandParametersTunnelUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneBrandParametersTunnelInput
    record: UpdateOneBrandParametersTunnelInput!
    skip: Int
    sort: SortUpdateOneBrandParametersTunnelInput
  ): UpdateOneBrandParametersTunnelPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  brandRemoveById(_id: MongoID!): RemoveByIdBrandPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  brandRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneBrandInput
    sort: SortRemoveOneBrandInput
  ): RemoveOneBrandPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  brandUpdateById(_id: MongoID!, record: UpdateByIdBrandInput!): UpdateByIdBrandPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  brandUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneBrandInput
    record: UpdateOneBrandInput!
    skip: Int
    sort: SortUpdateOneBrandInput
  ): UpdateOneBrandPayload

  """
  Adds an user to your brand, as a membership.
  Under the hood, the user can be either created or added from an existing account, [see the explainer](https://notion.so/6e51216632064582814ac8d19d509500#10679be7b4684e5f9093c2d5319c4b20).
  If the user was already part of your brand, an error will be thrown.
  """
  brandUsersAdd(brandId: MongoID!, record: BrandUsersAddRecord!): BrandMembership!

  """
  Attaches an anonymous save to a given user of your brand.
  This is useful when you let users create saves anonymously, but later want to reattach that save to the user when they have created an account, for example.
  Throws an error if the save was already claimed (except if it's already owned by the user you want to attach the save to).
  """
  brandUsersAttachSave(brandId: MongoID!, saveId: MongoID!, userId: MongoID!): Save!

  """
  Assigns a new set of roles to an user of your brand (the set specified here erases the previous set).
  Attention, an user with access to this query will be able to promote its own account to a more powerful set of roles, or demote other users. Users granted with such a power must be of trust.
  This operates on the membership document only, to modify the User itself use the `brandUsersUpdate` mutation instead.
  Do not forget you can run multiple mutations in a single request if you want to update both.
  """
  brandUsersGrant(
    brandId: MongoID!
    metadata: Metadata!
    roles: [String!]!

    """You can use either a membership or user ID here."""
    userId: MongoID!
  ): BrandMembership!

  """
  Creates an authorization token to log in as the given user, provided that the user is a member of your brand.
  This can be used to transparently log in one of your users on myDecoCloud Designer, or for other uses.
  The returned authorization token is scoped to the brand, and will provide access to resources of your brand only, and not to all the content the user may have access to (ie. in other brands).
  [See the explainer](https://notion.so/6e51216632064582814ac8d19d509500#10679be7b4684e5f9093c2d5319c4b20).
  """
  brandUsersLogin(
    brandId: MongoID!

    """You can use either a membership or user ID here."""
    userId: MongoID!
  ): BrandUsersLoginPayload!

  """
  Merges two users of your brand by reassigning everything the source user produced and modified in the scope of the brand to the target user. Finally, the source user is removed from the memberships of the brand.
  However, the source user still exists after that (and still has ownership of the content not belonging to the brand), but from the point of view of your brand, it'll be just like the source user was deleted.
  No changes are performed on the target user, nor on the target membership (e.g. billing settings), if needed those operations must be performed separately.
  
  The following contents in your brand will be updated to be reassigned to the target user:
  
  - Memberships (*added by* and then removal of the source user membership)
  - Saves (*created by*)
  - Virtual visits (*created by, updated by*)
  - When merging an administrator or other privileged users:
    - Barcode collections (*created by, updated by*)
    - Catalogs (*created by*)
    - Items (*created by*)
    - Sales records (*created by*)
  """
  brandUsersMerge(
    brandId: MongoID!

    """
    Whether to run in dry mode (simulation) to see what documents will be affected, or actually perform changes in the database.
    """
    dryMode: Boolean! = true

    """You can use either a membership or user ID here."""
    sourceUserId: MongoID!

    """You can use either a membership or user ID here."""
    targetUserId: MongoID!
  ): BrandUsersMergePayload!

  """
  Removes an user from your brand's memberships.
  Please note that the underlying user is not deleted. However, they won't be able to use private resources from your brand anymore.
  If the user was not part of your brand, an error will be thrown.
  """
  brandUsersRemove(
    brandId: MongoID!

    """You can use either a membership or user ID here."""
    userId: MongoID!
  ): Success!

  """
  Updates an user of your brand.
  To modify the user's membership instead (roles or metadata), use the `brandUsersGrant` mutation instead.
  Do not forget you can run multiple mutations in a single request if you want to update both.
  """
  brandUsersUpdate(
    brandId: MongoID!
    record: BrandUsersUpdateRecord!

    """You can use either a membership or user ID here."""
    userId: MongoID!
  ): User!

  """
  Creates a copy of a given CatalogFolder, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  catalogFolderCloneById(_id: MongoID!): CreateOneCatalogFolderPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  catalogFolderCreateOne(record: CreateOneCatalogFolderInput!): CreateOneCatalogFolderPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  catalogFolderRemoveById(_id: MongoID!): RemoveByIdCatalogFolderPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  catalogFolderRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneCatalogFolderInput
    sort: SortRemoveOneCatalogFolderInput
  ): RemoveOneCatalogFolderPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  catalogFolderUpdateById(_id: MongoID!, record: UpdateByIdCatalogFolderInput!): UpdateByIdCatalogFolderPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  catalogFolderUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneCatalogFolderInput
    record: UpdateOneCatalogFolderInput!
    skip: Int
    sort: SortUpdateOneCatalogFolderInput
  ): UpdateOneCatalogFolderPayload
  contactInformationChangeState(_id: MongoID!, interlocutor: String, state: EnumContactInformationState!): Success
  contactInformationNewContact(email: String!, fullName: String!, message: String!, phone: String): Success

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  contactInformationRemoveById(_id: MongoID!): RemoveByIdContactInformationPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  contactInformationUpdateById(_id: MongoID!, record: UpdateByIdContactInformationInput!): UpdateByIdContactInformationPayload

  """
  Creates a copy of a given Customer, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  customerCloneById(_id: MongoID!): CreateOneCustomerPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  customerCreateOne(record: CreateOneCustomerInput!): CreateOneCustomerPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  customerRemoveById(_id: MongoID!): RemoveByIdCustomerPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  customerRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneCustomerInput
    sort: SortRemoveOneCustomerInput
  ): RemoveOneCustomerPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  customerUpdateById(_id: MongoID!, record: UpdateByIdCustomerInput!): UpdateByIdCustomerPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  customerUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneCustomerInput
    record: UpdateOneCustomerInput!
    skip: Int
    sort: SortUpdateOneCustomerInput
  ): UpdateOneCustomerPayload

  """
  Creates a copy of a given Item, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  itemCloneById(_id: MongoID!): CreateOneItemPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  itemCreateOne(record: CreateOneItemInput!): CreateOneItemPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  itemRemoveById(_id: MongoID!): RemoveByIdItemPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  itemRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneItemInput
    sort: SortRemoveOneItemInput
  ): RemoveOneItemPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  itemUpdateById(_id: MongoID!, record: UpdateByIdItemInput!): UpdateByIdItemPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  itemUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneItemInput
    record: UpdateOneItemInput!
    skip: Int
    sort: SortUpdateOneItemInput
  ): UpdateOneItemPayload

  """
  Creates a copy of a given ItemsGroup, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  itemsGroupCloneById(_id: MongoID!): CreateOneItemsGroupPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  itemsGroupCreateOne(record: CreateOneItemsGroupInput!): CreateOneItemsGroupPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  itemsGroupRemoveById(_id: MongoID!): RemoveByIdItemsGroupPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  itemsGroupRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneItemsGroupInput
    sort: SortRemoveOneItemsGroupInput
  ): RemoveOneItemsGroupPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  itemsGroupUpdateById(_id: MongoID!, record: UpdateByIdItemsGroupInput!): UpdateByIdItemsGroupPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  itemsGroupUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneItemsGroupInput
    record: UpdateOneItemsGroupInput!
    skip: Int
    sort: SortUpdateOneItemsGroupInput
  ): UpdateOneItemsGroupPayload

  """
  Creates a copy of a given Palette, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  paletteCloneById(_id: MongoID!): CreateOnePalettePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  paletteCreateOne(record: CreateOnePaletteInput!): CreateOnePalettePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  paletteRemoveById(_id: MongoID!): RemoveByIdPalettePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  paletteRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOnePaletteInput
    sort: SortRemoveOnePaletteInput
  ): RemoveOnePalettePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  paletteUpdateById(_id: MongoID!, record: UpdateByIdPaletteInput!): UpdateByIdPalettePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  paletteUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOnePaletteInput
    record: UpdateOnePaletteInput!
    skip: Int
    sort: SortUpdateOnePaletteInput
  ): UpdateOnePalettePayload

  """
  Creates a copy of a given Picture, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  pictureCloneById(_id: MongoID!): CreateOnePicturePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  pictureCreateOne(record: CreateOnePictureInput!): CreateOnePicturePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  pictureRemoveById(_id: MongoID!): RemoveByIdPicturePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  pictureRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOnePictureInput
    sort: SortRemoveOnePictureInput
  ): RemoveOnePicturePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  pictureUpdateById(_id: MongoID!, record: UpdateByIdPictureInput!): UpdateByIdPicturePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  pictureUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOnePictureInput
    record: UpdateOnePictureInput!
    skip: Int
    sort: SortUpdateOnePictureInput
  ): UpdateOnePicturePayload

  """Submit a new asset conversion job"""
  pipelineConvertSubmit(itemId: MongoID!): MongoID!

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  pipelineJobRemoveById(_id: MongoID!): RemoveByIdPipelineJobPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  pipelineJobRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOnePipelineJobInput
    sort: SortRemoveOnePipelineJobInput
  ): RemoveOnePipelineJobPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  pipelineJobUpdateById(_id: MongoID!, record: UpdateByIdPipelineJobInput!): UpdateByIdPipelineJobPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  pipelineJobUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOnePipelineJobInput
    record: UpdateOnePipelineJobInput!
    skip: Int
    sort: SortUpdateOnePipelineJobInput
  ): UpdateOnePipelineJobPayload

  """
  Creates a copy of a given PlannedMaintenance, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  plannedMaintenanceCloneById(_id: MongoID!): CreateOnePlannedMaintenancePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  plannedMaintenanceCreateOne(record: CreateOnePlannedMaintenanceInput!): CreateOnePlannedMaintenancePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  plannedMaintenanceRemoveById(_id: MongoID!): RemoveByIdPlannedMaintenancePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  plannedMaintenanceRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOnePlannedMaintenanceInput
    sort: SortRemoveOnePlannedMaintenanceInput
  ): RemoveOnePlannedMaintenancePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  plannedMaintenanceUpdateById(_id: MongoID!, record: UpdateByIdPlannedMaintenanceInput!): UpdateByIdPlannedMaintenancePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  plannedMaintenanceUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOnePlannedMaintenanceInput
    record: UpdateOnePlannedMaintenanceInput!
    skip: Int
    sort: SortUpdateOnePlannedMaintenanceInput
  ): UpdateOnePlannedMaintenancePayload

  """
  Creates a copy of a given PriceTable, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  priceTableCloneById(_id: MongoID!): CreateOnePriceTablePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  priceTableCreateOne(record: CreateOnePriceTableInput!): CreateOnePriceTablePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  priceTableRemoveById(_id: MongoID!): RemoveByIdPriceTablePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  priceTableRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOnePriceTableInput
    sort: SortRemoveOnePriceTableInput
  ): RemoveOnePriceTablePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  priceTableUpdateById(_id: MongoID!, record: UpdateByIdPriceTableInput!): UpdateByIdPriceTablePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  priceTableUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOnePriceTableInput
    record: UpdateOnePriceTableInput!
    skip: Int
    sort: SortUpdateOnePriceTableInput
  ): UpdateOnePriceTablePayload

  """Update some prices in a price table"""
  priceTableUpdatePrices(_id: MongoID!, prices: [PriceTablePricesInput], useArticleCode: Boolean!, useEan: Boolean!): PriceTable!

  """
  [Required API Key: productScanConvert] Use this to add a generated image (the PBR result for example) to the ProductScan and get the shared key to upload it to azure
  """
  productScanAddGeneratedImage(imageExtension: String!, imageName: String!, materialScanName: String!, productScanId: MongoID!): ImageUploadCredentials

  """
  [Required API Key: productScanUpload] Use this to add a BANE scan image to the ProductScan and get the shared key to upload it to azure
  """
  productScanAddInputImage(imageExtension: String!, imageName: String!, materialScanName: String!, materialScanType: EnumProductScanScansType!, productScanId: MongoID!): ImageUploadCredentials

  """
  [Required API Key: productScanUpload] Use this to add a thumbnail image to the ProductScan and get the shared key to upload it to azure
  """
  productScanAddThumbnailImage(imageExtension: String!, imageName: String!, productScanId: MongoID!): ImageUploadCredentials

  """
  Creates a copy of a given ProductScan, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  productScanCloneById(_id: MongoID!): CreateOneProductScanPayload

  """
  [Required API Key: productScanUpload] Create a product-scan from the BANE device.
  """
  productScanCreateOne(productScanToArchive: MongoID, record: CreateOneProductScanInput!): CreateOneProductScanPayload

  """
  [Required API Key: productScanUpload] When all the images in the ProductScan has been downloaded, use this to notify it is complete
  """
  productScanMarkAsComplete(productScanId: MongoID!): Boolean

  "\n        [Required API Key: productScanConvert]\n        When all the images in the ProductScan has been converted, use this to notify it is converted"
  productScanMarkAsConverted(productScanId: MongoID!): Boolean

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  productScanRemoveById(_id: MongoID!): RemoveByIdProductScanPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  productScanRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneProductScanInput
    sort: SortRemoveOneProductScanInput
  ): RemoveOneProductScanPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  productScanUpdateById(_id: MongoID!, record: UpdateByIdProductScanInput!): UpdateByIdProductScanPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  productScanUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneProductScanInput
    record: UpdateOneProductScanInput!
    skip: Int
    sort: SortUpdateOneProductScanInput
  ): UpdateOneProductScanPayload

  """
  Creates a copy of a given PromoterApartmentUnit, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  promoterApartmentUnitCloneById(_id: MongoID!): CreateOnePromoterApartmentUnitPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  promoterApartmentUnitCreateOne(record: CreateOnePromoterApartmentUnitInput!): CreateOnePromoterApartmentUnitPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  promoterApartmentUnitRemoveById(_id: MongoID!): RemoveByIdPromoterApartmentUnitPayload
  promoterApartmentUnitSendChangesNotificationEmail(_id: MongoID!): Success

  """
  Creates a copy of a given PromoterApartmentUnitType, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  promoterApartmentUnitTypeCloneById(_id: MongoID!): CreateOnePromoterApartmentUnitTypePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  promoterApartmentUnitTypeCreateOne(record: CreateOnePromoterApartmentUnitTypeInput!): CreateOnePromoterApartmentUnitTypePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  promoterApartmentUnitTypeRemoveById(_id: MongoID!): RemoveByIdPromoterApartmentUnitTypePayload
  promoterApartmentUnitTypeSendChangesNotificationEmail(_id: MongoID!, programId: MongoID!): Success

  """
  Transfers all units of the given type to another type in a single batch call. Returns the amount of transferred units.
  """
  promoterApartmentUnitTypeTransferUnits(deleteSourceUnitType: Boolean! = false, sourceUnitTypeId: MongoID!, targetUnitTypeId: MongoID!): PromoterApartmentUnitTypeTransferUnitsResult

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  promoterApartmentUnitTypeUpdateById(_id: MongoID!, record: UpdateByIdPromoterApartmentUnitTypeInput!): UpdateByIdPromoterApartmentUnitTypePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  promoterApartmentUnitUpdateById(_id: MongoID!, record: UpdateByIdPromoterApartmentUnitInput!): UpdateByIdPromoterApartmentUnitPayload

  """
  Creates a copy of a given PromoterProgram, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  promoterProgramCloneById(_id: MongoID!): CreateOnePromoterProgramPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  promoterProgramCreateOne(record: CreateOnePromoterProgramInput!): CreateOnePromoterProgramPayload

  """
  Renders plans from the plan editor from myDecoCloud RED, in a PDF file. Returns a job token to follow generation progress and/or retrieve the resulting URL of PDF.
  """
  promoterProgramPlansDocumentCreate(manifest: InputDocumentManifestInput, programId: MongoID!): JobToken!

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  promoterProgramRemoveById(_id: MongoID!): RemoveByIdPromoterProgramPayload

  """
  Creates a PDF report for the given program. Reports are not a generic feature, generating a report must be specifically supported for brand the program is in. Returns a job token to follow generation progress and/or retrieve the resulting URL of PDF.
  """
  promoterProgramReportDocumentCreate(manifest: InputDocumentManifestInput, programId: MongoID!): JobToken!

  """
  Removes all units from a program, and eventually unit types and unit enumeration tool data too.
  """
  promoterProgramResetUnits(programId: MongoID!, resetPlanEditorData: Boolean! = false, resetUnitTypes: Boolean! = false): PromoterProgramResetUnitsResult
  promoterProgramSyncSatelliteApartmentUnitEnumeration(dryMode: Boolean! = false, programId: MongoID!): Success

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  promoterProgramUpdateById(_id: MongoID!, record: UpdateByIdPromoterProgramInput!): UpdateByIdPromoterProgramPayload

  """
  Creates a copy of a given SalesRecord, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  salesRecordCloneById(_id: MongoID!): CreateOneSalesRecordPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  salesRecordCreateOne(record: CreateOneSalesRecordInput!): CreateOneSalesRecordPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  salesRecordRemoveById(_id: MongoID!): RemoveByIdSalesRecordPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  salesRecordRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneSalesRecordInput
    sort: SortRemoveOneSalesRecordInput
  ): RemoveOneSalesRecordPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  salesRecordUpdateById(_id: MongoID!, record: UpdateByIdSalesRecordInput!): UpdateByIdSalesRecordPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  salesRecordUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneSalesRecordInput
    record: UpdateOneSalesRecordInput!
    skip: Int
    sort: SortUpdateOneSalesRecordInput
  ): UpdateOneSalesRecordPayload

  """
  Creates a copy of a given Construction, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  saveCloneById(_id: MongoID!): CreateOneSavePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  saveCreateOne(record: CreateOneSaveInput!): CreateOneSavePayload

  """
  Creates a copy of a given SaveFolder, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  saveFolderCloneById(_id: MongoID!): CreateOneSaveFolderPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  saveFolderCreateOne(record: CreateOneSaveFolderInput!): CreateOneSaveFolderPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  saveFolderRemoveById(_id: MongoID!): RemoveByIdSaveFolderPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  saveFolderRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneSaveFolderInput
    sort: SortRemoveOneSaveFolderInput
  ): RemoveOneSaveFolderPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  saveFolderUpdateById(_id: MongoID!, record: UpdateByIdSaveFolderInput!): UpdateByIdSaveFolderPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  saveFolderUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneSaveFolderInput
    record: UpdateOneSaveFolderInput!
    skip: Int
    sort: SortUpdateOneSaveFolderInput
  ): UpdateOneSaveFolderPayload

  """Given a save ID, sets `Save.lastSuccessfulLoadAt` to the current date."""
  saveMarkSuccessfulLoad(_id: MongoID!): Success!

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  saveRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneSaveInput
    sort: SortRemoveOneSaveInput
  ): RemoveOneSavePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  saveUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneSaveInput
    record: UpdateOneSaveInput!
    skip: Int
    sort: SortUpdateOneSaveInput
    updateToken: String
  ): UpdateOneSavePayload

  """
  Creates a copy of a given SavesGroup, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  savesGroupCloneById(_id: MongoID!): CreateOneSavesGroupPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  savesGroupCreateOne(record: CreateOneSavesGroupInput!): CreateOneSavesGroupPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  savesGroupRemoveById(_id: MongoID!): RemoveByIdSavesGroupPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  savesGroupRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneSavesGroupInput
    sort: SortRemoveOneSavesGroupInput
  ): RemoveOneSavesGroupPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  savesGroupUpdateById(_id: MongoID!, record: UpdateByIdSavesGroupInput!): UpdateByIdSavesGroupPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  savesGroupUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneSavesGroupInput
    record: UpdateOneSavesGroupInput!
    skip: Int
    sort: SortUpdateOneSavesGroupInput
  ): UpdateOneSavesGroupPayload

  """
  Creates a copy of a given Setting, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  settingCloneById(_id: MongoID!): CreateOneSettingPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  settingCreateOne(record: CreateOneSettingInput!): CreateOneSettingPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  settingRemoveById(_id: String!): RemoveByIdSettingPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  settingUpdateById(_id: String!, record: UpdateByIdSettingInput!): UpdateByIdSettingPayload

  """
  Creates a copy of a given StylePreset, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  stylePresetCloneById(_id: MongoID!): CreateOneStylePresetPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  stylePresetCreateOne(record: CreateOneStylePresetInput!): CreateOneStylePresetPayload

  """
  Creates a copy of a given StylePresetGroup, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  stylePresetGroupCloneById(_id: MongoID!): CreateOneStylePresetGroupPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  stylePresetGroupCreateOne(record: CreateOneStylePresetGroupInput!): CreateOneStylePresetGroupPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  stylePresetGroupRemoveById(_id: MongoID!): RemoveByIdStylePresetGroupPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  stylePresetGroupRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneStylePresetGroupInput
    sort: SortRemoveOneStylePresetGroupInput
  ): RemoveOneStylePresetGroupPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  stylePresetGroupUpdateById(_id: MongoID!, record: UpdateByIdStylePresetGroupInput!): UpdateByIdStylePresetGroupPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  stylePresetGroupUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneStylePresetGroupInput
    record: UpdateOneStylePresetGroupInput!
    skip: Int
    sort: SortUpdateOneStylePresetGroupInput
  ): UpdateOneStylePresetGroupPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  stylePresetRemoveById(_id: MongoID!): RemoveByIdStylePresetPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  stylePresetRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneStylePresetInput
    sort: SortRemoveOneStylePresetInput
  ): RemoveOneStylePresetPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  stylePresetUpdateById(_id: MongoID!, record: UpdateByIdStylePresetInput!): UpdateByIdStylePresetPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  stylePresetUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneStylePresetInput
    record: UpdateOneStylePresetInput!
    skip: Int
    sort: SortUpdateOneStylePresetInput
  ): UpdateOneStylePresetPayload

  """
  Creates a copy of a given Tutorial, and returns the new document.
  However, when present, some metadata properties like _id, createdAt, createdById, updatedAt, updatedById and slug will be reset.
  The _id property of sub-documents will also be reset to a new value.
  """
  tutorialCloneById(_id: MongoID!): CreateOneTutorialPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  tutorialCreateOne(record: CreateOneTutorialInput!): CreateOneTutorialPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  tutorialRemoveById(_id: MongoID!): RemoveByIdTutorialPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  tutorialRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneTutorialInput
    sort: SortRemoveOneTutorialInput
  ): RemoveOneTutorialPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  tutorialUpdateById(_id: MongoID!, record: UpdateByIdTutorialInput!): UpdateByIdTutorialPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  tutorialUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneTutorialInput
    record: UpdateOneTutorialInput!
    skip: Int
    sort: SortUpdateOneTutorialInput
  ): UpdateOneTutorialPayload
  userAccountLogin(email: String!): UserAccountLogin!
  userAccountLoginWithPassword(email: String!, password: String!): UserAccountLogin!
  userAccountLoginWithTotpToken(email: String!, totp: String!): UserAccountLogin!
  userAccountSendVolatileTotpTokenByEmail(email: String!): Success

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  userRemoveById(_id: MongoID!): RemoveByIdUserPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  userRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneUserInput
    sort: SortRemoveOneUserInput
  ): RemoveOneUserPayload
  userSetItemFavorite(isFavorite: Boolean!, itemId: MongoID!): Success
  userSetPassword(
    password: String!

    """
    ID of the user to update the password for. If left empty (null), the user represented by the current login token will be used.
    """
    userId: MongoID
  ): User!
  userSetSaveFavorite(isFavorite: Boolean!, saveId: MongoID!): Success

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  userUpdateById(_id: MongoID!, record: UpdateByIdUserInput!): UpdateByIdUserPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  userUpdateOne(
    """Filter by fields"""
    filter: FilterUpdateOneUserInput
    record: UpdateOneUserInput!
    skip: Int
    sort: SortUpdateOneUserInput
  ): UpdateOneUserPayload
  watsonCluesWitness(clues: [JSONObject!]!): Success
}

"""Describes the parameters of one chunk in the document."""
type OutputDocumentChunkManifest {
  """
  Parameters currently set for that chunk. This will be the chunk's default parameters unless they have been overriden by the user in the input manifest. The value here implements the schema defined by `parametersJtd`.
  """
  parameters: JSONObject

  """
  A JSON Type Definition (RFC 8927, https://jsontypedef.com) schema of the parameters that the chunk accepts or requires for render. Parameter values chosen by the user are to be sent within the input manifest.
  """
  parametersJtd: JSONObject

  """
  Index of the parent chunk in the list (OutputDocumentManifest.chunks), or null if the chunk is at the root of the document
  """
  parent: Int

  """
  An absolute ID for the chunk in the document, than can notably be used in InputDocumentManifest.selector. It is not necessarily unique (implementation-dependent).
  """
  path: String!

  """Will the chunk be rendered in the document?"""
  render: Boolean!
  title: String!
  warnings: [OutputDocumentChunkManifestWarning!]!
}

"""
A generation warning that might signal a configuration mistake, missing data, etc.
"""
type OutputDocumentChunkManifestWarning {
  """A link to fix the problem, if applicable."""
  link: String
  message: String!
}

"""
Contains info about the generated document, like its title or authors, and the list of chunk it contains with the parameters they accept, or eventual (pre-)generation warnings.
"""
type OutputDocumentManifest {
  """All warnings from all chunks condensed in one list."""
  allWarnings: [OutputDocumentChunkManifestWarning!]!
  author: String!
  chunks: [OutputDocumentChunkManifest!]!
  document: String!
  locale: String!
  timeZoneOffset: Int!
  title: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type PaginationInfo {
  currentPage: Int!
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  itemCount: Int
  pageCount: Int
  perPage: Int!
}

type Palette {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  colors: [PaletteColors]
  name: String!
  type: EnumPaletteType!
}

type PaletteColors {
  _id: MongoID
  a: Float
  b: Float!
  code: String
  g: Float!
  metallic: Float
  name(locale: String): String!
  nameTranslations: Translations!
  r: Float!
  roughness: Float
}

input PaletteColorsInput {
  _id: MongoID
  a: Float
  b: Float!
  code: String
  g: Float!
  metallic: Float
  nameTranslations: Translations
  r: Float!
  roughness: Float
}

"""A connection to a list of items."""
type PaletteConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [PaletteEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PaletteEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Palette!
}

"""List of items with pagination."""
type PalettePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Palette!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Picture {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  name: String!
  size: Float!
  url: String!
}

"""A connection to a list of items."""
type PictureConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [PictureEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PictureEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Picture!
}

"""List of items with pagination."""
type PicturePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Picture!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type PipelineJob {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  completedDate: Date
  deadlineJobId: String!
  settings: PipelineJobSettings
  startDate: Date
  state: EnumPipelineJobState
  submitDate: Date
  type: EnumPipelineJobType
}

"""A connection to a list of items."""
type PipelineJobConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [PipelineJobEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PipelineJobEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: PipelineJob!
}

"""List of items with pagination."""
type PipelineJobPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [PipelineJob!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type PipelineJobSettings {
  _id: MongoID
  convertPBRMaterialToAssetBundle: PipelineJobSettingsConvertPBRMaterialToAssetBundle
}

type PipelineJobSettingsConvertPBRMaterialToAssetBundle {
  _id: MongoID
  assetUrl: String!
  itemId: MongoID!
}

type PlannedMaintenance {
  _id: MongoID!
  durationHours: Float!
  reason(locale: String): String!
  reasonTranslations: Translations!
  startDate: Date!
}

"""A connection to a list of items."""
type PlannedMaintenanceConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [PlannedMaintenanceEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PlannedMaintenanceEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: PlannedMaintenance!
}

"""List of items with pagination."""
type PlannedMaintenancePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [PlannedMaintenance!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type PriceTable {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  currencyName: String
  displayEan: Boolean!
  globalDiscount: Float
  moniker: String
  multiplyingCoefficient: Float!
  name: String
  prices: [PriceTablePrices]!
  symbol: String
  vatRate: Float!
}

type PriceTablePrices {
  _id: MongoID
  articleIdentifier: String
  ean: String
  itemsIds: [MongoID]
  price: Float
  sourceItemId: MongoID
}

input PriceTablePricesInput {
  _id: MongoID
  articleIdentifier: String
  ean: String
  itemsIds: [MongoID]
  price: Float
  sourceItemId: MongoID
}

type ProductScan {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  creationDate: Date
  metallic: Float!
  notes: String
  productName: String!
  reference: String!
  scans: [ProductScanScans]
  size: ProductScanSize
  state: EnumProductScanState
  thumbnail: ProductScanScansInputImages
}

"""A connection to a list of items."""
type ProductScanConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [ProductScanEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ProductScanEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ProductScan!
}

"""List of items with pagination."""
type ProductScanPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [ProductScan!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type ProductScanScans {
  _id: MongoID
  generatedImages: [ProductScanScansInputImages]
  inputImages: [ProductScanScansInputImages]
  name: String!
  type: EnumProductScanScansType
}

input ProductScanScansInput {
  _id: MongoID
  generatedImages: [ProductScanScansInputImagesInput]
  inputImages: [ProductScanScansInputImagesInput]
  name: String!
  type: EnumProductScanScansType
}

type ProductScanScansInputImages {
  _id: MongoID
  format: String!
  name: String!
  url: String!
}

input ProductScanScansInputImagesInput {
  _id: MongoID
  format: String!
  name: String!
  url: String!
}

type ProductScanSize {
  height: String!
  length: String!
  width: String!
}

input ProductScanSizeInput {
  height: String!
  length: String!
  width: String!
}

type PromoterApartmentUnit {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  buildingNumber: String
  comment: String
  createdAt: Date
  createdBy: User
  createdById: MongoID
  floor: String
  metadata: Metadata!
  purchaserFirstName: String
  purchaserMail: String
  purchaserSurname: String
  save: Save
  saveId: MongoID
  state: EnumPromoterApartmentUnitState!
  unitNumber: String!
  unitType: PromoterApartmentUnitType!
  unitTypeId: MongoID!
  updatedAt: Date
  updatedBy: User
  updatedById: MongoID
}

"""A connection to a list of items."""
type PromoterApartmentUnitConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [PromoterApartmentUnitEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PromoterApartmentUnitEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: PromoterApartmentUnit!
}

"""List of items with pagination."""
type PromoterApartmentUnitPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [PromoterApartmentUnit!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type PromoterApartmentUnitType {
  _id: MongoID!
  apartmentUnits(
    """Filter by fields"""
    filter: FilterFindManyPromoterApartmentUnitInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPromoterApartmentUnitInput
  ): [PromoterApartmentUnit!]!
  brand: Brand!
  brandId: MongoID!
  createdAt: Date
  createdBy: User
  createdById: MongoID
  currentVersion: Int!
  descriptionHtml: String
  descriptionJson: JSONObject
  history: [PromoterApartmentUnitTypeHistory!]!
  metadata: Metadata!
  name: String!
  program: PromoterProgram!
  programId: MongoID!
  saveFolder: SaveFolder
  saveFolderId: MongoID
  state: EnumPromoterApartmentUnitTypeState!
  updatedAt: Date
  updatedBy: User
  updatedById: MongoID
}

"""A connection to a list of items."""
type PromoterApartmentUnitTypeConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [PromoterApartmentUnitTypeEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PromoterApartmentUnitTypeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: PromoterApartmentUnitType!
}

type PromoterApartmentUnitTypeHistory {
  _id: MongoID
  comment: String
  save: Save
  saveId: MongoID
  state: EnumPromoterApartmentUnitTypeHistoryState!
  version: Int!
}

input PromoterApartmentUnitTypeHistoryInput {
  _id: MongoID
  comment: String
  saveId: MongoID
  state: EnumPromoterApartmentUnitTypeHistoryState
  version: Int!
}

"""List of items with pagination."""
type PromoterApartmentUnitTypePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [PromoterApartmentUnitType!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type PromoterApartmentUnitTypeTransferUnitsResult {
  sourceUnitType: PromoterApartmentUnitType!
  targetUnitType: PromoterApartmentUnitType!
  transferredUnitsCount: Int!
}

type PromoterProgram {
  _id: MongoID!
  address: String
  apartmentUnitTypes(
    """Filter by fields"""
    filter: FilterFindManyPromoterApartmentUnitTypeInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPromoterApartmentUnitTypeInput
  ): [PromoterApartmentUnitType!]!
  brand: Brand!
  brandId: MongoID!
  city: String
  createdAt: Date
  createdBy: User
  createdById: MongoID
  isArchived: Boolean!
  itemFilter: PromoterProgramItemFilter!
  metadata: Metadata!
  name: String!
  planEditor: PromoterProgramPlanEditor!
  planUrls: [String!]!
  promoter: User
  promoterId: MongoID
  saveFolder: SaveFolder
  saveFolderId: MongoID
  slug: String
  state: EnumPromoterProgramState!
  stylePresetGroup: StylePresetGroup
  stylePresetGroupId: MongoID
  updatedAt: Date
  updatedBy: User
  updatedById: MongoID
  zipCode: Float
}

"""A connection to a list of items."""
type PromoterProgramConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [PromoterProgramEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PromoterProgramEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: PromoterProgram!
}

type PromoterProgramItemFilter {
  itemWhiteList: [MongoID!]!
  whiteListItems: [Item!]!
}

input PromoterProgramItemFilterInput {
  itemWhiteList: [MongoID!]
}

"""List of items with pagination."""
type PromoterProgramPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [PromoterProgram!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type PromoterProgramPlanEditor {
  data: JSON!
  dataFormatVersion: Int!
}

input PromoterProgramPlanEditorInput {
  data: JSON!
  dataFormatVersion: Int
}

type PromoterProgramResetUnitsResult {
  deletedUnitTypesCount: Int!
  deletedUnitsCount: Int!
  program: PromoterProgram!
}

""""""
type PublicUser {
  _id: MongoID!
  email: String!
  name: String!
}

type PuppeteerPdfQueueJob implements Job {
  """A unique ID for the job."""
  _id: String!

  """When the job was created."""
  createdAt: Date!

  """When the job finished (completed or failed)."""
  finishedAt: Date

  """The name-type of the job. A queue may have multiple job types."""
  name: String!

  """When the job was processed (started)."""
  processedAt: Date

  """Job queue this job is in."""
  queue: String!

  """
  Resulting value of a completed job. Null if the job is not in completed state.
  """
  result: PuppeteerPdfQueueResult
  state: JobState!
}

type PuppeteerPdfQueueResult {
  """
  URL of the generated PDF, or its base64 representation depending on generation options.
  """
  pdf: String!
}

type Query {
  accessPointConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyAccessPointInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionAccessPointEnum = _ID_DESC
  ): AccessPointConnection
  accessPointFindById(_id: MongoID!): AccessPoint
  accessPointFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsAccessPointInput): [AccessPoint!]!
  accessPointFindMany(
    """Filter by fields"""
    filter: FilterFindManyAccessPointInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyAccessPointInput
  ): [AccessPoint!]!
  accessPointFindOne(
    """Filter by fields"""
    filter: FilterFindOneAccessPointInput
    skip: Int
    sort: SortFindOneAccessPointInput
  ): AccessPoint
  accessPointPagination(
    """Filter by fields"""
    filter: FilterFindManyAccessPointInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyAccessPointInput
  ): AccessPointPagination
  appletConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyAppletInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionAppletEnum = _ID_DESC
  ): AppletConnection
  appletFindById(_id: MongoID!): Applet
  appletFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsAppletInput): [Applet!]!

  """
  Find an Applet by version (use "latest" for the current one), and following version redirect(s).
  """
  appletFindByVersion(
    """
    Use an applet version hash or "latest" to get the current active version.
    """
    version: String!
  ): Applet
  appletFindMany(
    """Filter by fields"""
    filter: FilterFindManyAppletInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyAppletInput
  ): [Applet!]!
  appletFindOne(
    """Filter by fields"""
    filter: FilterFindOneAppletInput
    skip: Int
    sort: SortFindOneAppletInput
  ): Applet
  appletPagination(
    """Filter by fields"""
    filter: FilterFindManyAppletInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyAppletInput
  ): AppletPagination
  barcodeCollectionConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyBarcodeCollectionInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionBarcodeCollectionEnum = _ID_DESC
  ): BarcodeCollectionConnection
  barcodeCollectionFindById(_id: MongoID!): BarcodeCollection
  barcodeCollectionFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsBarcodeCollectionInput): [BarcodeCollection!]!
  barcodeCollectionFindMany(
    """Filter by fields"""
    filter: FilterFindManyBarcodeCollectionInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyBarcodeCollectionInput
  ): [BarcodeCollection!]!
  barcodeCollectionFindOne(
    """Filter by fields"""
    filter: FilterFindOneBarcodeCollectionInput
    skip: Int
    sort: SortFindOneBarcodeCollectionInput
  ): BarcodeCollection
  barcodeCollectionPagination(
    """Filter by fields"""
    filter: FilterFindManyBarcodeCollectionInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyBarcodeCollectionInput
  ): BarcodeCollectionPagination
  brandConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyBrandInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionBrandEnum = _ID_DESC
  ): BrandConnection
  brandFindById(_id: MongoID!): Brand
  brandFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsBrandInput): [Brand!]!
  brandFindMany(
    """Filter by fields"""
    filter: FilterFindManyBrandInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyBrandInput
  ): [Brand!]!
  brandFindOne(
    """Filter by fields"""
    filter: FilterFindOneBrandInput
    skip: Int
    sort: SortFindOneBrandInput
  ): Brand

  """Find public info from a brand by id"""
  brandFindPublicInfoById(_id: MongoID!): BrandPublicInfo
  brandPagination(
    """Filter by fields"""
    filter: FilterFindManyBrandInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyBrandInput
  ): BrandPagination
  brandParametersPriceTableFindById(_id: MongoID!): PriceTable
  brandParametersPriceTableFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsPriceTableInput): [PriceTable!]!
  brandParametersPriceTableFindMany(
    """Filter by fields"""
    filter: FilterFindManyPriceTableInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPriceTableInput
  ): [PriceTable!]!
  brandParametersPriceTableFindOne(
    """Filter by fields"""
    filter: FilterFindOnePriceTableInput
    skip: Int
    sort: SortFindOnePriceTableInput
  ): PriceTable
  brandParametersPricingFindById(_id: MongoID!): BrandParametersPricing
  brandParametersPricingFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsBrandParametersPricingInput): [BrandParametersPricing!]!
  brandParametersPricingFindMany(
    """Filter by fields"""
    filter: FilterFindManyBrandParametersPricingInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyBrandParametersPricingInput
  ): [BrandParametersPricing!]!
  brandParametersScrapperConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyBrandParametersScrapperInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionBrandParametersScrapperEnum = _ID_DESC
  ): BrandParametersScrapperConnection
  brandParametersScrapperFindById(_id: MongoID!): BrandParametersScrapper
  brandParametersScrapperFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsBrandParametersScrapperInput): [BrandParametersScrapper!]!
  brandParametersScrapperFindMany(
    """Filter by fields"""
    filter: FilterFindManyBrandParametersScrapperInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyBrandParametersScrapperInput
  ): [BrandParametersScrapper!]!
  brandParametersScrapperFindOne(
    """Filter by fields"""
    filter: FilterFindOneBrandParametersScrapperInput
    skip: Int
    sort: SortFindOneBrandParametersScrapperInput
  ): BrandParametersScrapper
  brandParametersScrapperPagination(
    """Filter by fields"""
    filter: FilterFindManyBrandParametersScrapperInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyBrandParametersScrapperInput
  ): BrandParametersScrapperPagination
  brandParametersTunnelFindById(_id: MongoID!): BrandParametersTunnel
  brandParametersTunnelFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsBrandParametersTunnelInput): [BrandParametersTunnel!]!
  brandParametersTunnelFindMany(
    """Filter by fields"""
    filter: FilterFindManyBrandParametersTunnelInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyBrandParametersTunnelInput
  ): [BrandParametersTunnel!]!
  catalogFolderFindById(_id: MongoID!): CatalogFolder
  catalogFolderFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsCatalogFolderInput): [CatalogFolder!]!
  catalogFolderFindMany(
    """Filter by fields"""
    filter: FilterFindManyCatalogFolderInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyCatalogFolderInput
  ): [CatalogFolder!]!
  catalogFolderFindOne(
    """Filter by fields"""
    filter: FilterFindOneCatalogFolderInput
    skip: Int
    sort: SortFindOneCatalogFolderInput
  ): CatalogFolder
  contactInformationFindById(_id: MongoID!): ContactInformation
  contactInformationFindMany(
    """Filter by fields"""
    filter: FilterFindManyContactInformationInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyContactInformationInput
  ): [ContactInformation!]!
  contactInformationPagination(
    """Filter by fields"""
    filter: FilterFindManyContactInformationInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyContactInformationInput
  ): ContactInformationPagination
  customerConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyCustomerInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionCustomerEnum = _ID_DESC
  ): CustomerConnection
  customerFindById(_id: MongoID!): Customer
  customerFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsCustomerInput): [Customer!]!
  customerFindMany(
    """Filter by fields"""
    filter: FilterFindManyCustomerInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyCustomerInput
  ): [Customer!]!
  customerFindOne(
    """Filter by fields"""
    filter: FilterFindOneCustomerInput
    skip: Int
    sort: SortFindOneCustomerInput
  ): Customer
  customerPagination(
    """Filter by fields"""
    filter: FilterFindManyCustomerInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyCustomerInput
  ): CustomerPagination
  itemCategoryFindById(_id: MongoID!): Category
  itemCategoryFindMany(
    """Filter by fields"""
    filter: FilterFindManyCategoryInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyCategoryInput
  ): [Category!]!
  itemFindById(_id: MongoID!): Item
  itemFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsItemInput): [Item!]!
  itemFindMany(
    """Filter by fields"""
    filter: FilterFindManyItemInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyItemInput
  ): [Item!]!
  itemFindOne(
    """Filter by fields"""
    filter: FilterFindOneItemInput
    skip: Int
    sort: SortFindOneItemInput
  ): Item
  itemsGroupFindById(_id: MongoID!): ItemsGroup
  itemsGroupFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsItemsGroupInput): [ItemsGroup!]!
  itemsGroupFindMany(
    """Filter by fields"""
    filter: FilterFindManyItemsGroupInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyItemsGroupInput
  ): [ItemsGroup!]!
  itemsGroupFindOne(
    """Filter by fields"""
    filter: FilterFindOneItemsGroupInput
    skip: Int
    sort: SortFindOneItemsGroupInput
  ): ItemsGroup

  """Retrieves a job from a token you've got in a response."""
  jobFindFromToken(token: JobToken!): AnyJob
  monitoringSystemPrerequisitesList(cache: Boolean): [SystemPrerequisite!]!
  monitoringSystemPrerequisitesSummary(cache: Boolean): SystemPrerequisitesSummary!
  paletteConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyPaletteInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionPaletteEnum = _ID_DESC
  ): PaletteConnection
  paletteFindById(_id: MongoID!): Palette
  paletteFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsPaletteInput): [Palette!]!
  paletteFindMany(
    """Filter by fields"""
    filter: FilterFindManyPaletteInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPaletteInput
  ): [Palette!]!
  paletteFindOne(
    """Filter by fields"""
    filter: FilterFindOnePaletteInput
    skip: Int
    sort: SortFindOnePaletteInput
  ): Palette
  palettePagination(
    """Filter by fields"""
    filter: FilterFindManyPaletteInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyPaletteInput
  ): PalettePagination
  pictureConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyPictureInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionPictureEnum = _ID_DESC
  ): PictureConnection
  pictureFindById(_id: MongoID!): Picture
  pictureFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsPictureInput): [Picture!]!
  pictureFindMany(
    """Filter by fields"""
    filter: FilterFindManyPictureInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPictureInput
  ): [Picture!]!
  pictureFindOne(
    """Filter by fields"""
    filter: FilterFindOnePictureInput
    skip: Int
    sort: SortFindOnePictureInput
  ): Picture

  """
  Find the system image from the given brand or the default image from the default brand
  """
  pictureFindSystemPicture(brandId: MongoID!, defaultName: String!, name: String!): Picture
  picturePagination(
    """Filter by fields"""
    filter: FilterFindManyPictureInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyPictureInput
  ): PicturePagination
  pipelineJobConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyPipelineJobInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionPipelineJobEnum = _ID_DESC
  ): PipelineJobConnection
  pipelineJobFindById(_id: MongoID!): PipelineJob
  pipelineJobFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsPipelineJobInput): [PipelineJob!]!
  pipelineJobFindMany(
    """Filter by fields"""
    filter: FilterFindManyPipelineJobInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPipelineJobInput
  ): [PipelineJob!]!
  pipelineJobFindOne(
    """Filter by fields"""
    filter: FilterFindOnePipelineJobInput
    skip: Int
    sort: SortFindOnePipelineJobInput
  ): PipelineJob
  pipelineJobPagination(
    """Filter by fields"""
    filter: FilterFindManyPipelineJobInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyPipelineJobInput
  ): PipelineJobPagination
  plannedMaintenanceConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyPlannedMaintenanceInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionPlannedMaintenanceEnum = _ID_DESC
  ): PlannedMaintenanceConnection
  plannedMaintenanceFindById(_id: MongoID!): PlannedMaintenance
  plannedMaintenanceFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsPlannedMaintenanceInput): [PlannedMaintenance!]!
  plannedMaintenanceFindMany(
    """Filter by fields"""
    filter: FilterFindManyPlannedMaintenanceInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPlannedMaintenanceInput
  ): [PlannedMaintenance!]!
  plannedMaintenanceFindNextToDisplay: PlannedMaintenance
  plannedMaintenanceFindOne(
    """Filter by fields"""
    filter: FilterFindOnePlannedMaintenanceInput
    skip: Int
    sort: SortFindOnePlannedMaintenanceInput
  ): PlannedMaintenance
  plannedMaintenancePagination(
    """Filter by fields"""
    filter: FilterFindManyPlannedMaintenanceInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyPlannedMaintenanceInput
  ): PlannedMaintenancePagination
  priceTableFindById(_id: MongoID!): PriceTable
  priceTableFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsPriceTableInput): [PriceTable!]!
  priceTableFindMany(
    """Filter by fields"""
    filter: FilterFindManyPriceTableInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPriceTableInput
  ): [PriceTable!]!
  priceTableFindOne(
    """Filter by fields"""
    filter: FilterFindOnePriceTableInput
    skip: Int
    sort: SortFindOnePriceTableInput
  ): PriceTable
  productScanConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyProductScanInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionProductScanEnum = _ID_DESC
  ): ProductScanConnection
  productScanFindById(_id: MongoID!): ProductScan
  productScanFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsProductScanInput): [ProductScan!]!
  productScanFindMany(
    """Filter by fields"""
    filter: FilterFindManyProductScanInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyProductScanInput
  ): [ProductScan!]!

  """
  Get the productScan in state "to_convert". This resolver is for API keys of type "productScanConvert"
  """
  productScanFindManyToConvert(
    """Filter by fields"""
    filter: FilterFindManyProductScanInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyProductScanInput
  ): [ProductScan!]!
  productScanFindOne(
    """Filter by fields"""
    filter: FilterFindOneProductScanInput
    skip: Int
    sort: SortFindOneProductScanInput
  ): ProductScan
  productScanPagination(
    """Filter by fields"""
    filter: FilterFindManyProductScanInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyProductScanInput
  ): ProductScanPagination
  promoterApartmentUnitConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyPromoterApartmentUnitInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionPromoterApartmentUnitEnum = _ID_DESC
  ): PromoterApartmentUnitConnection
  promoterApartmentUnitFindById(_id: MongoID!): PromoterApartmentUnit
  promoterApartmentUnitFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsPromoterApartmentUnitInput): [PromoterApartmentUnit!]!
  promoterApartmentUnitFindMany(
    """Filter by fields"""
    filter: FilterFindManyPromoterApartmentUnitInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPromoterApartmentUnitInput
  ): [PromoterApartmentUnit!]!
  promoterApartmentUnitFindOne(
    """Filter by fields"""
    filter: FilterFindOnePromoterApartmentUnitInput
    skip: Int
    sort: SortFindOnePromoterApartmentUnitInput
  ): PromoterApartmentUnit
  promoterApartmentUnitPagination(
    """Filter by fields"""
    filter: FilterFindManyPromoterApartmentUnitInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyPromoterApartmentUnitInput
  ): PromoterApartmentUnitPagination
  promoterApartmentUnitTypeConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyPromoterApartmentUnitTypeInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionPromoterApartmentUnitTypeEnum = _ID_DESC
  ): PromoterApartmentUnitTypeConnection
  promoterApartmentUnitTypeFindById(_id: MongoID!): PromoterApartmentUnitType
  promoterApartmentUnitTypeFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsPromoterApartmentUnitTypeInput): [PromoterApartmentUnitType!]!
  promoterApartmentUnitTypeFindMany(
    """Filter by fields"""
    filter: FilterFindManyPromoterApartmentUnitTypeInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPromoterApartmentUnitTypeInput
  ): [PromoterApartmentUnitType!]!
  promoterApartmentUnitTypeFindOne(
    """Filter by fields"""
    filter: FilterFindOnePromoterApartmentUnitTypeInput
    skip: Int
    sort: SortFindOnePromoterApartmentUnitTypeInput
  ): PromoterApartmentUnitType
  promoterApartmentUnitTypePagination(
    """Filter by fields"""
    filter: FilterFindManyPromoterApartmentUnitTypeInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyPromoterApartmentUnitTypeInput
  ): PromoterApartmentUnitTypePagination
  promoterProgramConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyPromoterProgramInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionPromoterProgramEnum = _ID_DESC
  ): PromoterProgramConnection
  promoterProgramFindById(_id: MongoID!): PromoterProgram
  promoterProgramFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsPromoterProgramInput): [PromoterProgram!]!
  promoterProgramFindMany(
    """Filter by fields"""
    filter: FilterFindManyPromoterProgramInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyPromoterProgramInput
  ): [PromoterProgram!]!
  promoterProgramFindOne(
    """Filter by fields"""
    filter: FilterFindOnePromoterProgramInput
    skip: Int
    sort: SortFindOnePromoterProgramInput
  ): PromoterProgram
  promoterProgramPagination(
    """Filter by fields"""
    filter: FilterFindManyPromoterProgramInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyPromoterProgramInput
  ): PromoterProgramPagination

  """
  Allows to obtain a document manifest for the "create" mutation counterpart of this document.
  """
  promoterProgramPlansDocumentManifest(manifest: InputDocumentManifestInput, programId: MongoID!): OutputDocumentManifest!

  """
  Allows to obtain a document manifest for the "create" mutation counterpart of this document.
  """
  promoterProgramReportDocumentManifest(manifest: InputDocumentManifestInput, programId: MongoID!): OutputDocumentManifest!
  salesRecordConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManySalesRecordInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionSalesRecordEnum = _ID_DESC
  ): SalesRecordConnection
  salesRecordFindById(_id: MongoID!): SalesRecord
  salesRecordFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsSalesRecordInput): [SalesRecord!]!
  salesRecordFindMany(
    """Filter by fields"""
    filter: FilterFindManySalesRecordInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManySalesRecordInput
  ): [SalesRecord!]!
  salesRecordFindOne(
    """Filter by fields"""
    filter: FilterFindOneSalesRecordInput
    skip: Int
    sort: SortFindOneSalesRecordInput
  ): SalesRecord
  salesRecordPagination(
    """Filter by fields"""
    filter: FilterFindManySalesRecordInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManySalesRecordInput
  ): SalesRecordPagination
  saveConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManySaveInput

    """Forward pagination argument for returning at most first edges"""
    first: Int
    isTemplate: Boolean!

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionSaveEnum = _ID_DESC
  ): SaveConnection
  saveFindById(_id: MongoID!): Save
  saveFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsSaveInput): [Save!]!
  saveFindMany(
    """Filter by fields"""
    filter: FilterFindManySaveInput
    isTemplate: Boolean!
    limit: Int = 1000
    skip: Int
    sort: [SortFindManySaveInput!]
  ): [Save!]!
  saveFolderFindById(_id: MongoID!): SaveFolder
  saveFolderFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsSaveFolderInput): [SaveFolder!]!
  saveFolderFindMany(
    """Filter by fields"""
    filter: FilterFindManySaveFolderInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManySaveFolderInput
  ): [SaveFolder!]!
  savePagination(
    """Filter by fields"""
    filter: FilterFindManySaveInput
    isTemplate: Boolean!

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: [SortFindManySaveInput!]
  ): SavePagination
  savesGroupFindById(_id: MongoID!): SavesGroup
  savesGroupFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsSavesGroupInput): [SavesGroup!]!
  savesGroupFindMany(
    """Filter by fields"""
    filter: FilterFindManySavesGroupInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManySavesGroupInput
  ): [SavesGroup!]!
  settingFindById(_id: String!): Setting
  settingFindByIds(_ids: [String!]!, limit: Int = 1000, sort: SortFindByIdsSettingInput): [Setting!]!
  settingFindMany(
    """Filter by fields"""
    filter: FilterFindManySettingInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManySettingInput
  ): [Setting!]!
  stylePresetFindById(_id: MongoID!): StylePreset
  stylePresetFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsStylePresetInput): [StylePreset!]!
  stylePresetFindMany(
    """Filter by fields"""
    filter: FilterFindManyStylePresetInput
    limit: Int = 1000
    skip: Int
    sort: [SortFindManyStylePresetInput!]
  ): [StylePreset!]!
  stylePresetGroupFindById(_id: MongoID!): StylePresetGroup
  stylePresetGroupFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsStylePresetGroupInput): [StylePresetGroup!]!
  stylePresetGroupFindMany(
    """Filter by fields"""
    filter: FilterFindManyStylePresetGroupInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyStylePresetGroupInput
  ): [StylePresetGroup!]!
  stylePresetPagination(
    """Filter by fields"""
    filter: FilterFindManyStylePresetInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: [SortFindManyStylePresetInput!]
  ): StylePresetPagination
  tutorialConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyTutorialInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionTutorialEnum = _ID_DESC
  ): TutorialConnection
  tutorialFindById(_id: MongoID!): Tutorial
  tutorialFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsTutorialInput): [Tutorial!]!
  tutorialFindMany(
    """Filter by fields"""
    filter: FilterFindManyTutorialInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyTutorialInput
  ): [Tutorial!]!
  tutorialFindOne(
    """Filter by fields"""
    filter: FilterFindOneTutorialInput
    skip: Int
    sort: SortFindOneTutorialInput
  ): Tutorial
  tutorialPagination(
    """Filter by fields"""
    filter: FilterFindManyTutorialInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyTutorialInput
  ): TutorialPagination

  """
  Obtain basic information about an account, based on the email. Null if the account does not exists, always non-null otherwise.
  """
  userAccountLoginInfo(email: String!): UserAccountLoginInfo
  userConnection(
    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyUserInput

    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Sort argument for data ordering"""
    sort: SortConnectionUserEnum = _ID_DESC
  ): UserConnection

  """
  Get the current user using the authentication token set in the HTTP headers
  """
  userCurrent: User
  userFindById(_id: MongoID!): User
  userFindByIds(_ids: [MongoID!]!, limit: Int = 1000, sort: SortFindByIdsUserInput): [User!]!
  userFindMany(
    """Filter by fields"""
    filter: FilterFindManyUserInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyUserInput
  ): [User!]!
  userFindOne(
    """Filter by fields"""
    filter: FilterFindOneUserInput
    skip: Int
    sort: SortFindOneUserInput
  ): User
  userPagination(
    """Filter by fields"""
    filter: FilterFindManyUserInput

    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20
    sort: SortFindManyUserInput
  ): UserPagination

  """Run Sherlock's BrandEntryPointTraffic inference module"""
  watsonInferencesBrandEntryPointTraffic(params: BrandEntryPointTrafficInferenceParams!): BrandEntryPointTrafficInferenceOutput

  """Run Sherlock's BrandUniqueVisitors inference module"""
  watsonInferencesBrandUniqueVisitors(params: BrandUniqueVisitorsInferenceParams!): BrandUniqueVisitorsInferenceOutput

  """Run Sherlock's TunnelFunnel inference module"""
  watsonInferencesTunnelFunnel(params: TunnelFunnelInferenceParams!): TunnelFunnelInferenceOutput

  """Run Sherlock's TunnelStepChoices inference module"""
  watsonInferencesTunnelStepChoices(params: TunnelStepChoicesInferenceParams!): TunnelStepChoicesInferenceOutput

  """Run Sherlock's TunnelStepDuration inference module"""
  watsonInferencesTunnelStepDuration(params: TunnelStepDurationInferenceParams!): TunnelStepDurationInferenceOutput

  """Run Sherlock's UserActive inference module"""
  watsonInferencesUserActive(params: UserActiveInferenceParams!): UserActiveInferenceOutput

  """Run Sherlock's UserActivity inference module"""
  watsonInferencesUserActivity(params: UserActivityInferenceParams!): UserActivityInferenceOutput

  """Run Sherlock's UserSessionsCount inference module"""
  watsonInferencesUserSessionsCount(params: UserSessionsCountInferenceParams!): UserSessionsCountInferenceOutput
}

"""
The string representation of JavaScript regexp. You may provide it with flags "/^abc.*/i" or without flags like "^abc.*". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
"""
scalar RegExpAsString

type RemoveByIdAccessPointPayload {
  """Removed document"""
  record: AccessPoint

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdBarcodeCollectionPayload {
  """Removed document"""
  record: BarcodeCollection

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdBrandParametersPricingPayload {
  """Removed document"""
  record: BrandParametersPricing

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdBrandParametersScrapperPayload {
  """Removed document"""
  record: BrandParametersScrapper

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdBrandParametersTunnelPayload {
  """Removed document"""
  record: BrandParametersTunnel

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdBrandPayload {
  """Removed document"""
  record: Brand

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdCatalogFolderPayload {
  """Removed document"""
  record: CatalogFolder

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdContactInformationPayload {
  """Removed document"""
  record: ContactInformation

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdCustomerPayload {
  """Removed document"""
  record: Customer

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdItemPayload {
  """Removed document"""
  record: Item

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdItemsGroupPayload {
  """Removed document"""
  record: ItemsGroup

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdPalettePayload {
  """Removed document"""
  record: Palette

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdPicturePayload {
  """Removed document"""
  record: Picture

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdPipelineJobPayload {
  """Removed document"""
  record: PipelineJob

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdPlannedMaintenancePayload {
  """Removed document"""
  record: PlannedMaintenance

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdPriceTablePayload {
  """Removed document"""
  record: PriceTable

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdProductScanPayload {
  """Removed document"""
  record: ProductScan

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdPromoterApartmentUnitPayload {
  """Removed document"""
  record: PromoterApartmentUnit

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdPromoterApartmentUnitTypePayload {
  """Removed document"""
  record: PromoterApartmentUnitType

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdPromoterProgramPayload {
  """Removed document"""
  record: PromoterProgram

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdSalesRecordPayload {
  """Removed document"""
  record: SalesRecord

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdSaveFolderPayload {
  """Removed document"""
  record: SaveFolder

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdSavesGroupPayload {
  """Removed document"""
  record: SavesGroup

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdSettingPayload {
  """Removed document"""
  record: Setting

  """Document ID"""
  recordId: String
}

type RemoveByIdStylePresetGroupPayload {
  """Removed document"""
  record: StylePresetGroup

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdStylePresetPayload {
  """Removed document"""
  record: StylePreset

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdTutorialPayload {
  """Removed document"""
  record: Tutorial

  """Document ID"""
  recordId: MongoID
}

type RemoveByIdUserPayload {
  """Removed document"""
  record: User

  """Document ID"""
  recordId: MongoID
}

type RemoveOneAccessPointPayload {
  """Removed document"""
  record: AccessPoint

  """Document ID"""
  recordId: MongoID
}

type RemoveOneBarcodeCollectionPayload {
  """Removed document"""
  record: BarcodeCollection

  """Document ID"""
  recordId: MongoID
}

type RemoveOneBrandParametersPricingPayload {
  """Removed document"""
  record: BrandParametersPricing

  """Document ID"""
  recordId: MongoID
}

type RemoveOneBrandParametersScrapperPayload {
  """Removed document"""
  record: BrandParametersScrapper

  """Document ID"""
  recordId: MongoID
}

type RemoveOneBrandParametersTunnelPayload {
  """Removed document"""
  record: BrandParametersTunnel

  """Document ID"""
  recordId: MongoID
}

type RemoveOneBrandPayload {
  """Removed document"""
  record: Brand

  """Document ID"""
  recordId: MongoID
}

type RemoveOneCatalogFolderPayload {
  """Removed document"""
  record: CatalogFolder

  """Document ID"""
  recordId: MongoID
}

type RemoveOneCustomerPayload {
  """Removed document"""
  record: Customer

  """Document ID"""
  recordId: MongoID
}

type RemoveOneItemPayload {
  """Removed document"""
  record: Item

  """Document ID"""
  recordId: MongoID
}

type RemoveOneItemsGroupPayload {
  """Removed document"""
  record: ItemsGroup

  """Document ID"""
  recordId: MongoID
}

type RemoveOnePalettePayload {
  """Removed document"""
  record: Palette

  """Document ID"""
  recordId: MongoID
}

type RemoveOnePicturePayload {
  """Removed document"""
  record: Picture

  """Document ID"""
  recordId: MongoID
}

type RemoveOnePipelineJobPayload {
  """Removed document"""
  record: PipelineJob

  """Document ID"""
  recordId: MongoID
}

type RemoveOnePlannedMaintenancePayload {
  """Removed document"""
  record: PlannedMaintenance

  """Document ID"""
  recordId: MongoID
}

type RemoveOnePriceTablePayload {
  """Removed document"""
  record: PriceTable

  """Document ID"""
  recordId: MongoID
}

type RemoveOneProductScanPayload {
  """Removed document"""
  record: ProductScan

  """Document ID"""
  recordId: MongoID
}

type RemoveOneSalesRecordPayload {
  """Removed document"""
  record: SalesRecord

  """Document ID"""
  recordId: MongoID
}

type RemoveOneSaveFolderPayload {
  """Removed document"""
  record: SaveFolder

  """Document ID"""
  recordId: MongoID
}

type RemoveOneSavePayload {
  """Removed document"""
  record: Save

  """Document ID"""
  recordId: MongoID
}

type RemoveOneSavesGroupPayload {
  """Removed document"""
  record: SavesGroup

  """Document ID"""
  recordId: MongoID
}

type RemoveOneStylePresetGroupPayload {
  """Removed document"""
  record: StylePresetGroup

  """Document ID"""
  recordId: MongoID
}

type RemoveOneStylePresetPayload {
  """Removed document"""
  record: StylePreset

  """Document ID"""
  recordId: MongoID
}

type RemoveOneTutorialPayload {
  """Removed document"""
  record: Tutorial

  """Document ID"""
  recordId: MongoID
}

type RemoveOneUserPayload {
  """Removed document"""
  record: User

  """Document ID"""
  recordId: MongoID
}

type SalesRecord {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  createdAt: Date
  createdBy: User
  createdById: MongoID
  finalCustomerMetadata: Metadata
  metadata: Metadata!
  save: Save!
  saveId: MongoID!
  updatedAt: Date
  updatedBy: User
  updatedById: MongoID
}

"""A connection to a list of items."""
type SalesRecordConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [SalesRecordEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SalesRecordEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: SalesRecord!
}

"""List of items with pagination."""
type SalesRecordPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [SalesRecord!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Save {
  _id: MongoID!
  accessPointCreatedFrom: AccessPoint
  accessPointCreatedFromId: MongoID
  additionalInfo: JSON
  apartmentUnitType: PromoterApartmentUnitType
  apartmentUnitTypeId: MongoID
  brand: Brand
  brandId: MongoID

  """Find public info from a brand by id"""
  brandPublicInfo: BrandPublicInfo
  chosenStylePreset: StylePreset
  chosenStylePresetId: MongoID
  createdAt: Date
  createdBy: User
  createdById: MongoID
  createdByPublic: PublicUser
  createdFromAP: MongoID
  customer: Customer
  customerId: MongoID
  data: String!
  dataFormatVersion: Int!
  dataUrl: String
  description: String
  isReadonly: Boolean!
  isTemplate: Boolean!
  lastSuccessfulLoadAt: Date
  metadata: Metadata!
  moduleKitchenCustomData: String
  name: String!
  parent: Save
  parentId: MongoID
  quantitySurveyJSON: String
  referencedItemIds: [MongoID!]!
  referencedItems: [Item!]!
  saveFolderId: MongoID
  storageBytesUsage: Int!
  stylePresetGroup: StylePresetGroup
  stylePresetGroupId: MongoID
  tags: [String!]!
  thumbnailUrl: String
  tunnelState: JSON
  type: EnumSaveType!
  updatedAt: Date
  updatedBy: User
  updatedById: MongoID
  visitViewpoints: [SaveVisitViewpoints!]!
}

"""A connection to a list of items."""
type SaveConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [SaveEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SaveEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Save!
}

type SaveFolder {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  childrenFolders(
    """Filter by fields"""
    filter: FilterFindManySaveFolderInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManySaveFolderInput
  ): [SaveFolder!]!
  childrenSaves(
    """Filter by fields"""
    filter: FilterFindManySaveInput
    isTemplate: Boolean!
    limit: Int = 1000
    skip: Int
    sort: [SortFindManySaveInput!]
  ): [Save!]!
  createdAt: Date
  name: String!
  parent: SaveFolder
  parentId: MongoID
  slug: String
  updatedAt: Date
}

"""List of items with pagination."""
type SavePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Save!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type SaveVisitViewpoints {
  _id: MongoID
  orientation: SaveVisitViewpointsOrientation!
  position: SaveVisitViewpointsPosition!
}

input SaveVisitViewpointsInput {
  _id: MongoID
  orientation: SaveVisitViewpointsOrientationInput!
  position: SaveVisitViewpointsPositionInput!
}

type SaveVisitViewpointsOrientation {
  x: Float!
  y: Float!
  z: Float!
}

input SaveVisitViewpointsOrientationInput {
  x: Float!
  y: Float!
  z: Float!
}

type SaveVisitViewpointsPosition {
  x: Float!
  y: Float!
  z: Float!
}

input SaveVisitViewpointsPositionInput {
  x: Float!
  y: Float!
  z: Float!
}

type SavesGroup {
  _id: MongoID!
  brandId: MongoID!
  name: String!
  publicName(locale: String): String!
  publicNameTranslations: Translations!
  saves: [Save!]!
  savesIds: [MongoID]
  thumbnailPictureName: String
  type: EnumSavesGroupType!
}

type Setting {
  _id: String!
  role: String
  value: JSON
}

enum SortConnectionAccessPointEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionAppletEnum {
  VERSION_ASC
  VERSION_DESC
  _ID_ASC
  _ID_DESC
}

enum SortConnectionBarcodeCollectionEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionBrandEnum {
  SHARECODE_ASC
  SHARECODE_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortConnectionBrandParametersScrapperEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionCustomerEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionPaletteEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionPictureEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionPipelineJobEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionPlannedMaintenanceEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionProductScanEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionPromoterApartmentUnitEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionPromoterApartmentUnitTypeEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionPromoterProgramEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionSalesRecordEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionSaveEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionTutorialEnum {
  _ID_ASC
  _ID_DESC
}

enum SortConnectionUserEnum {
  EMAIL_ASC
  EMAIL_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsAccessPointInput {
  BRANDID_ASC
  BRANDID_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsAppletInput {
  VERSION_ASC
  VERSION_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsBarcodeCollectionInput {
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsBrandInput {
  SHARECODE_ASC
  SHARECODE_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsBrandParametersPricingInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsBrandParametersScrapperInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsBrandParametersTunnelInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsCatalogFolderInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsCustomerInput {
  ADDRESS_ASC
  ADDRESS_DESC
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRSTNAMEADDITIONAL_ASC
  FIRSTNAMEADDITIONAL_DESC
  FIRSTNAME_ASC
  FIRSTNAME_DESC
  GENDERADDITIONAL_ASC
  GENDERADDITIONAL_DESC
  GENDER_ASC
  GENDER_DESC
  SURNAMEADDITIONAL_ASC
  SURNAMEADDITIONAL_DESC
  SURNAME_ASC
  SURNAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsItemInput {
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  NAME_ASC
  NAME_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsItemsGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsPaletteInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsPictureInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsPipelineJobInput {
  DEADLINEJOBID_ASC
  DEADLINEJOBID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsPlannedMaintenanceInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsPriceTableInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsProductScanInput {
  NAME_ASC
  NAME_DESC
  NAME__BRANDID_ASC
  NAME__BRANDID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsPromoterApartmentUnitInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  UNITTYPEID_ASC
  UNITTYPEID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsPromoterApartmentUnitTypeInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  PROGRAMID_ASC
  PROGRAMID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsPromoterProgramInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  NAME_ASC
  NAME_DESC
  PROMOTERID_ASC
  PROMOTERID_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsSalesRecordInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsSaveFolderInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsSaveInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBY_ASC
  CREATEDBY_DESC
  ISTEMPLATE_ASC
  ISTEMPLATE_DESC
  NAME_ASC
  NAME_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsSavesGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsSettingInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsStylePresetGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsStylePresetInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  NAME_ASC
  NAME_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsTutorialInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsUserInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  EMAIL_ASC
  EMAIL_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyAccessPointInput {
  BRANDID_ASC
  BRANDID_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyAppletInput {
  VERSION_ASC
  VERSION_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyBarcodeCollectionInput {
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyBrandInput {
  SHARECODE_ASC
  SHARECODE_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyBrandParametersPricingInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyBrandParametersScrapperInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyBrandParametersTunnelInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyCatalogFolderInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyCategoryInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyContactInformationInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyCustomerInput {
  ADDRESS_ASC
  ADDRESS_DESC
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRSTNAMEADDITIONAL_ASC
  FIRSTNAMEADDITIONAL_DESC
  FIRSTNAME_ASC
  FIRSTNAME_DESC
  GENDERADDITIONAL_ASC
  GENDERADDITIONAL_DESC
  GENDER_ASC
  GENDER_DESC
  SURNAMEADDITIONAL_ASC
  SURNAMEADDITIONAL_DESC
  SURNAME_ASC
  SURNAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyItemInput {
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  NAME_ASC
  NAME_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyItemsGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyPaletteInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyPictureInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyPipelineJobInput {
  DEADLINEJOBID_ASC
  DEADLINEJOBID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyPlannedMaintenanceInput {
  START_DATE_ASC
  START_DATE_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyPriceTableInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyProductScanInput {
  NAME_ASC
  NAME_DESC
  NAME__BRANDID_ASC
  NAME__BRANDID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyPromoterApartmentUnitInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  UNITTYPEID_ASC
  UNITTYPEID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyPromoterApartmentUnitTypeInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  PROGRAMID_ASC
  PROGRAMID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyPromoterProgramInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  NAME_ASC
  NAME_DESC
  PROMOTERID_ASC
  PROMOTERID_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManySalesRecordInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManySaveFolderInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManySaveInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBY_ASC
  CREATEDBY_DESC
  ISTEMPLATE_ASC
  ISTEMPLATE_DESC
  NAME_ASC
  NAME_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManySavesGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManySettingInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyStylePresetGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyStylePresetInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  NAME_ASC
  NAME_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindManyTutorialInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyUserInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  EMAIL_ASC
  EMAIL_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOneAccessPointInput {
  BRANDID_ASC
  BRANDID_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOneAppletInput {
  VERSION_ASC
  VERSION_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOneBarcodeCollectionInput {
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOneBrandInput {
  SHARECODE_ASC
  SHARECODE_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOneBrandParametersScrapperInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneCatalogFolderInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneCustomerInput {
  ADDRESS_ASC
  ADDRESS_DESC
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRSTNAMEADDITIONAL_ASC
  FIRSTNAMEADDITIONAL_DESC
  FIRSTNAME_ASC
  FIRSTNAME_DESC
  GENDERADDITIONAL_ASC
  GENDERADDITIONAL_DESC
  GENDER_ASC
  GENDER_DESC
  SURNAMEADDITIONAL_ASC
  SURNAMEADDITIONAL_DESC
  SURNAME_ASC
  SURNAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOneItemInput {
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  NAME_ASC
  NAME_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOneItemsGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOnePaletteInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOnePictureInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOnePipelineJobInput {
  DEADLINEJOBID_ASC
  DEADLINEJOBID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOnePlannedMaintenanceInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOnePriceTableInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneProductScanInput {
  NAME_ASC
  NAME_DESC
  NAME__BRANDID_ASC
  NAME__BRANDID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOnePromoterApartmentUnitInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  UNITTYPEID_ASC
  UNITTYPEID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOnePromoterApartmentUnitTypeInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  PROGRAMID_ASC
  PROGRAMID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOnePromoterProgramInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  NAME_ASC
  NAME_DESC
  PROMOTERID_ASC
  PROMOTERID_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOneSalesRecordInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortFindOneTutorialInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneUserInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  EMAIL_ASC
  EMAIL_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneAccessPointInput {
  BRANDID_ASC
  BRANDID_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneBarcodeCollectionInput {
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneBrandInput {
  SHARECODE_ASC
  SHARECODE_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneBrandParametersPricingInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneBrandParametersScrapperInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneBrandParametersTunnelInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneCatalogFolderInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneCustomerInput {
  ADDRESS_ASC
  ADDRESS_DESC
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRSTNAMEADDITIONAL_ASC
  FIRSTNAMEADDITIONAL_DESC
  FIRSTNAME_ASC
  FIRSTNAME_DESC
  GENDERADDITIONAL_ASC
  GENDERADDITIONAL_DESC
  GENDER_ASC
  GENDER_DESC
  SURNAMEADDITIONAL_ASC
  SURNAMEADDITIONAL_DESC
  SURNAME_ASC
  SURNAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneItemInput {
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  NAME_ASC
  NAME_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneItemsGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOnePaletteInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOnePictureInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOnePipelineJobInput {
  DEADLINEJOBID_ASC
  DEADLINEJOBID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOnePlannedMaintenanceInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOnePriceTableInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneProductScanInput {
  NAME_ASC
  NAME_DESC
  NAME__BRANDID_ASC
  NAME__BRANDID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneSalesRecordInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneSaveFolderInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneSaveInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBY_ASC
  CREATEDBY_DESC
  ISTEMPLATE_ASC
  ISTEMPLATE_DESC
  NAME_ASC
  NAME_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneSavesGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneStylePresetGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneStylePresetInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  NAME_ASC
  NAME_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneTutorialInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneUserInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  EMAIL_ASC
  EMAIL_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneAccessPointInput {
  BRANDID_ASC
  BRANDID_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneBarcodeCollectionInput {
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneBrandInput {
  SHARECODE_ASC
  SHARECODE_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneBrandParametersPricingInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneBrandParametersScrapperInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneBrandParametersTunnelInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneCatalogFolderInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneCustomerInput {
  ADDRESS_ASC
  ADDRESS_DESC
  BRANDID_ASC
  BRANDID_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRSTNAMEADDITIONAL_ASC
  FIRSTNAMEADDITIONAL_DESC
  FIRSTNAME_ASC
  FIRSTNAME_DESC
  GENDERADDITIONAL_ASC
  GENDERADDITIONAL_DESC
  GENDER_ASC
  GENDER_DESC
  SURNAMEADDITIONAL_ASC
  SURNAMEADDITIONAL_DESC
  SURNAME_ASC
  SURNAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneItemInput {
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  NAME_ASC
  NAME_DESC
  SLUG_ASC
  SLUG_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneItemsGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOnePaletteInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOnePictureInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOnePipelineJobInput {
  DEADLINEJOBID_ASC
  DEADLINEJOBID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOnePlannedMaintenanceInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOnePriceTableInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneProductScanInput {
  NAME_ASC
  NAME_DESC
  NAME__BRANDID_ASC
  NAME__BRANDID_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneSalesRecordInput {
  BRANDID_ASC
  BRANDID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneSaveFolderInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneSaveInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBY_ASC
  CREATEDBY_DESC
  ISTEMPLATE_ASC
  ISTEMPLATE_DESC
  NAME_ASC
  NAME_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneSavesGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneStylePresetGroupInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneStylePresetInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  NAME_ASC
  NAME_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneTutorialInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneUserInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDBYID_ASC
  CREATEDBYID_DESC
  EMAIL_ASC
  EMAIL_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

type StylePreset {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  createdAt: Date
  customisationPresets: [StylePresetCustomisationPresets]
  name: String!
  publicName(locale: String): String!
  publicNameTranslations: Translations!
  updatedAt: Date
}

type StylePresetCustomisationPresets {
  _id: MongoID
  chosenItemId: MongoID
  customisationNameId: String!
  filterTag: String
  rotationCondition: EnumStylePresetCustomisationPresetsRotationCondition
}

input StylePresetCustomisationPresetsInput {
  _id: MongoID
  chosenItemId: MongoID
  customisationNameId: String!
  filterTag: String
  rotationCondition: EnumStylePresetCustomisationPresetsRotationCondition
}

type StylePresetGroup {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  name: String!
  stylePresetIds: [MongoID]
  stylePresets: [StylePreset!]!
}

"""List of items with pagination."""
type StylePresetPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [StylePreset!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Subscription {
  """
  Retrieves a job from a token you've got in a response, and receive updates. The subscription is not cancelled server-side after your job completes or fails (because, for example, it could be retried if the queue policy allows it), so you should cancel your subscription client-side, when appropriate.
  """
  jobSubscribeFromToken(token: JobToken!): AnyJob
}

"""Like Unit.Default in .NET: like a void, but it's a value"""
scalar Success

type SystemPrerequisite {
  """
  Which system prerequisite this one depends on. If the linked system prerquisite is not implemented or does not exist, this one will not be executed.
  """
  dependsOn: String

  """What is the system prerequisite checking."""
  description: String!

  """
  An optional diagnostic message to help the user understand what's actually good or not.
  """
  diagnostic: String

  """If any, the related error stack trace."""
  error: String

  """
  Has the system prerequisite been validated? This property is driven by the status.
  """
  implemented: Boolean!

  """The system prerequisite identifier."""
  key: String!

  """More details about the system prerequisite execution."""
  status: SystemPrerequisiteStatus!
}

enum SystemPrerequisiteStatus {
  CRASHED
  IMPLEMENTED
  NOT_CHECKED
  NOT_IMPLEMENTED
}

type SystemPrerequisitesSummary {
  failing: [String!]!
  implementedCount: Int!
  totalCount: Int!
}

type TilePriceInfo {
  currencyName: String
  hasMoreThanOnePrice: Boolean
  lowestPriceWithDiscountInCents: Float
  lowestPriceWithoutDiscountInCents: Float
  moniker: String
  symbol: String
}

"""
The `Translations` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Translations

type TunnelFunnelInferenceOutput {
  survivorsByStep: [TunnelFunnelSurvivorsByStep!]!
  tunnelName: String!
}

input TunnelFunnelInferenceParams {
  from: Date
  to: Date
  tunnelId: String!
}

type TunnelFunnelSurvivorsByStep {
  stepId: MongoID!
  stepName: String
  survivorsCount: Int
}

type TunnelStepChoicesByStep {
  areChoicesAnalyticsEnabled: Boolean!
  choices: [TunnelStepChoicesByStepChoice!]!
  stepId: MongoID!
  stepName: String
}

type TunnelStepChoicesByStepChoice {
  choice: String!
  timesChosen: Int!
}

type TunnelStepChoicesInferenceOutput {
  choicesByStep: [TunnelStepChoicesByStep!]!
  tunnelName: String!
}

input TunnelStepChoicesInferenceParams {
  from: Date
  to: Date
  tunnelId: String!
}

type TunnelStepDurationDurationByStep {
  percentile25: Float
  percentile50: Float
  percentile75: Float
  stepId: MongoID!
  stepName: String
}

type TunnelStepDurationInferenceOutput {
  durationByStep: [TunnelStepDurationDurationByStep!]!
  tunnelName: String!
}

input TunnelStepDurationInferenceParams {
  from: Date
  to: Date
  tunnelId: String!
}

type Tutorial {
  _id: MongoID!
  brand: Brand!
  brandId: MongoID!
  displayOnlyOnce: Boolean
  name: String!
  points: [TutorialPoint!]!
}

"""A connection to a list of items."""
type TutorialConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [TutorialEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type TutorialEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Tutorial!
}

"""List of items with pagination."""
type TutorialPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Tutorial!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type TutorialPoint {
  _id: MongoID
  illustration: String
  target: EnumTutorialPointTarget!
  text(locale: String): String!
  textTranslations: Translations!
  title(locale: String): String!
  titleTranslations: Translations!
}

input TutorialPointInput {
  _id: MongoID
  illustration: String
  target: EnumTutorialPointTarget
  textTranslations: Translations
  titleTranslations: Translations
}

""""""
input UpdateByIdAccessPointInput {
  areSavesPubliclyAvailableById: Boolean
  authorizedCatalogIds: [MongoID]
  brandId: MongoID
  ecotaxePriceTableId: MongoID
  name: String
  parametersScrapperId: MongoID
  parametersTunnelId: MongoID
  priceTableId: MongoID
  supportButton: UpdateByIdAccessPointSupportButtonInput
}

type UpdateByIdAccessPointPayload {
  """Updated document"""
  record: AccessPoint

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdAccessPointSupportButtonInput {
  icon: EnumAccessPointSupportButtonIcon
  tooltipTranslations: Translations
  type: EnumAccessPointSupportButtonType
  value: String
}

""""""
input UpdateByIdBarcodeCollectionBarcodeReferencesInput {
  _id: MongoID
  ean: String
  id: String
}

""""""
input UpdateByIdBarcodeCollectionInput {
  barcodeReferences: [UpdateByIdBarcodeCollectionBarcodeReferencesInput!]
  createdAt: Date
  createdById: MongoID
  name: String
  updatedAt: Date
  updatedById: MongoID
}

type UpdateByIdBarcodeCollectionPayload {
  """Updated document"""
  record: BarcodeCollection

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdBrandColorsInput {
  dataProtection: String
  legalNotice: String
  loadingScreenBackground: String
  loadingScreenLogoPicture: String
  loadingScreenProgressBarBackground: String
  loadingScreenProgressBarBorder: String
  loadingScreenProgressBarContent: String
  loadingScreenText: String
  meshes: UpdateByIdBrandColorsMeshesInput
  planElement: UpdateByIdBrandColorsPlanElementInput
  primary: String
  questHeaderBackground: String
  questHeaderBody: String
  questHeaderTitle: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

""""""
input UpdateByIdBrandColorsMeshesInput {
  wallCut: String
}

""""""
input UpdateByIdBrandColorsPlanElementInput {
  floor: String
  wall: String
  window: String
}

""""""
input UpdateByIdBrandInput {
  colors: UpdateByIdBrandColorsInput
  createdAt: Date
  name: String
  promoterWebsiteConfiguration: UpdateByIdBrandPromoterWebsiteConfigurationInput
  satelliteConfiguration: UpdateByIdBrandSatelliteConfigurationInput
  shareCode: String
  slug: String
  updatedAt: Date
}

""""""
input UpdateByIdBrandParametersPricingInput {
  brandId: MongoID
  enabled: Boolean
  useArticleCode: Boolean
  useEAN: Boolean
}

type UpdateByIdBrandParametersPricingPayload {
  """Updated document"""
  record: BrandParametersPricing

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdBrandParametersScrapperInput {
  allowAnonymousSave: Boolean
  brandId: MongoID
  enabled: Boolean
  export: Boolean
  geometry: Boolean
  name: String
  objects: Boolean
  postManualSaveTriggerSteps: [UpdateByIdBrandParametersScrapperPostManualSaveTriggerStepsInput!]
  screenshots: Boolean
  steps: [UpdateByIdBrandParametersScrapperStepsInput!]
  watermark: UpdateByIdBrandParametersScrapperWatermarkInput
}

type UpdateByIdBrandParametersScrapperPayload {
  """Updated document"""
  record: BrandParametersScrapper

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdBrandParametersScrapperPostManualSaveTriggerStepsInput {
  _id: MongoID
  triggerPopup: UpdateByIdBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput
  type: EnumBrandParametersScrapperPostManualSaveTriggerStepsType
}

""""""
input UpdateByIdBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput {
  _id: MongoID
  buttonType: EnumBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupButtonType
  textTranslations: Translations
  titleTranslations: Translations
  yesNoButtons: UpdateByIdBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput
}

""""""
input UpdateByIdBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput {
  stateProperty: String
}

""""""
input UpdateByIdBrandParametersScrapperStepsFilterInput {
  expression: String
}

""""""
input UpdateByIdBrandParametersScrapperStepsInput {
  _id: MongoID
  filter: UpdateByIdBrandParametersScrapperStepsFilterInput
  map: UpdateByIdBrandParametersScrapperStepsMapInput
  stepType: EnumBrandParametersScrapperStepsStepType
  stepVerb: String
  tap: UpdateByIdBrandParametersScrapperStepsTapInput
  verbFilter: EnumBrandParametersScrapperStepsVerbFilter
  verbMap: EnumBrandParametersScrapperStepsVerbMap
  verbTap: EnumBrandParametersScrapperStepsVerbTap
}

""""""
input UpdateByIdBrandParametersScrapperStepsMapInput {
  kitchenPricer: UpdateByIdBrandParametersScrapperStepsMapKitchenPricerInput
  payloadGenerator: UpdateByIdBrandParametersScrapperStepsMapPayloadGeneratorInput
  pdfReportGenerator: UpdateByIdBrandParametersScrapperStepsMapPdfReportGeneratorInput
  plinthCalculator: UpdateByIdBrandParametersScrapperStepsMapPlinthCalculatorInput
  reportGenerator: UpdateByIdBrandParametersScrapperStepsMapReportGeneratorInput
  terracePricer: UpdateByIdBrandParametersScrapperStepsMapTerracePricerInput
}

""""""
input UpdateByIdBrandParametersScrapperStepsMapKitchenPricerInput {
  apiToken: String
  apiUrl: String
  barcodeCollectionId: MongoID
  projectBaseUrl: String
}

""""""
input UpdateByIdBrandParametersScrapperStepsMapPayloadGeneratorInput {
  addSaveName: Boolean
  addUpdateToken: Boolean
  dynamicParameterForTunnelStateInformation: String
  tunnelStateKeys: [String!]
}

""""""
input UpdateByIdBrandParametersScrapperStepsMapPdfReportGeneratorInput {
  payloadType: EnumBrandParametersScrapperStepsMapPdfReportGeneratorPayloadType
}

""""""
input UpdateByIdBrandParametersScrapperStepsMapPlinthCalculatorInput {
  bigPlinthId: MongoID
  littlePlinthId: MongoID
}

""""""
input UpdateByIdBrandParametersScrapperStepsMapReportGeneratorInput {
  chunksManifest: [UpdateByIdInputDocumentChunkManifestInput!]
  documentName: String
  htmlTemplate: String
  mode: EnumBrandParametersScrapperStepsMapReportGeneratorMode
}

""""""
input UpdateByIdBrandParametersScrapperStepsMapTerracePricerInput {
  itemsCatalogId: MongoID
}

""""""
input UpdateByIdBrandParametersScrapperStepsTapInput {
  outputToApi: UpdateByIdBrandParametersScrapperStepsTapOutputToApiInput
  sendEmail: UpdateByIdBrandParametersScrapperStepsTapSendEmailInput
}

""""""
input UpdateByIdBrandParametersScrapperStepsTapOutputToApiInput {
  apiToken: String
  apiUrl: String
  signPayload: Boolean
}

""""""
input UpdateByIdBrandParametersScrapperStepsTapSendEmailInput {
  attachmentName: String
  dynamicParameterEmailAdress: String
  emailSourceType: EnumBrandParametersScrapperStepsTapSendEmailEmailSourceType
  sendReportAsAttachment: Boolean
  staticEmailAdress: String
  subject: String
  template: String
}

""""""
input UpdateByIdBrandParametersScrapperWatermarkInput {
  alpha: Float
  color: String
  enabled: Boolean
  picture: String
  repetition: Float
}

""""""
input UpdateByIdBrandParametersTunnelApertureParametersInput {
  doorClassicDefaultItem: String
  doorEntryDefaultItem: String
  doorEntrySidelightDefaultItem: String
  doorExteriorCustomisationItemsGroupId: String
  doorInteriorCustomisationItemsGroupId: String
  doubleDoorDefaultItem: String
  doubleDoorlikeWindowDefaultItem: String
  doubleSwingDoorDefaultItem: String
  doubleWindowDefaultItem: String
  garageDoorDefaultItem: String
  simpleDoorlikeWindowDefaultItem: String
  slitWindowDefaultItem: String
  tripleDoorlikeWindowDefaultItem: String
  tripleWindowDefaultItem: String
  windowCustomisationItemsGroupId: String
  windowDefaultItem: String
}

""""""
input UpdateByIdBrandParametersTunnelColorsParametersInput {
  nameHelpAtlas: String
  nameOptionsAtlas: String
  nameToolsAtlas: String
  primary: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

""""""
input UpdateByIdBrandParametersTunnelCustomLinkButtonInput {
  link: String
  name: String
}

""""""
input UpdateByIdBrandParametersTunnelDefaultCameraParametersInput {
  visitCameraParameters: UpdateByIdBrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput
}

""""""
input UpdateByIdBrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput {
  defaultVisitFieldOfView: Float
}

""""""
input UpdateByIdBrandParametersTunnelDefaultCoatingParametersInput {
  defaultExteriorFlooringId: MongoID
  defaultGardenFlooringId: MongoID
  defaultInteriorFlooringId: MongoID
}

""""""
input UpdateByIdBrandParametersTunnelInput {
  apertureParameters: UpdateByIdBrandParametersTunnelApertureParametersInput
  brandId: MongoID
  colorsParameters: UpdateByIdBrandParametersTunnelColorsParametersInput
  customLinkButton: UpdateByIdBrandParametersTunnelCustomLinkButtonInput
  defaultCameraParameters: UpdateByIdBrandParametersTunnelDefaultCameraParametersInput
  defaultCoatingParameters: UpdateByIdBrandParametersTunnelDefaultCoatingParametersInput
  defaultDayTime: Float
  defaultSnapDistance: Float
  disableHeaderShadow: Boolean
  displayCartItemNumber: Boolean
  displayCustomisationTagFurnitureOptions: Boolean
  displayFurnitureSubstitutesOptions: Boolean
  displaySaveName: Boolean
  displayStepsHeader: Boolean
  enabled: Boolean
  globalOptions: [String!]
  includeAllBrandItemsInCache: Boolean
  initialStepIfLoadingSave: Float
  isReloadFromLocalStorageEnabled: Boolean
  logoLinkOnClick: String
  logoPictureReference: String
  name: String
  persistentVariables: [UpdateByIdBrandParametersTunnelPersistentVariablesInput!]
  preload: Boolean
  savePanelParameters: UpdateByIdBrandParametersTunnelSavePanelParametersInput
  steps: [UpdateByIdBrandParametersTunnelStepInput!]
  wallParameters: UpdateByIdBrandParametersTunnelWallParametersInput
}

type UpdateByIdBrandParametersTunnelPayload {
  """Updated document"""
  record: BrandParametersTunnel

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdBrandParametersTunnelPersistentVariablesInput {
  config: JSON
  name: String
}

""""""
input UpdateByIdBrandParametersTunnelSavePanelParametersInput {
  isCustomerModuleEnabled: Boolean
  isExportButtonEnabled: Boolean
}

""""""
input UpdateByIdBrandParametersTunnelStepInput {
  _id: MongoID
  analytics: UpdateByIdBrandParametersTunnelStepsAnalyticsInput
  config: JSON
  description: String
  htmlTemplate: String
  isShownInStepper: Boolean
  module: EnumBrandParametersTunnelStepsModule
  name: String
  publicNameTranslations: Translations
  resetTunnelOnActivation: Boolean
}

""""""
input UpdateByIdBrandParametersTunnelStepsAnalyticsChoiceReducerInput {
  isEnabled: Boolean
  stateProperties: [String]
}

""""""
input UpdateByIdBrandParametersTunnelStepsAnalyticsInput {
  choiceReducer: UpdateByIdBrandParametersTunnelStepsAnalyticsChoiceReducerInput
}

""""""
input UpdateByIdBrandParametersTunnelWallParametersExteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

""""""
input UpdateByIdBrandParametersTunnelWallParametersInput {
  doorLintelLevel: Float
  exteriorCeilingLintelHeight: Float
  exteriorWallThickness: UpdateByIdBrandParametersTunnelWallParametersExteriorWallThicknessInput
  floorHeight: Float
  groundFloorLevel: Float
  innerHeight: Float
  interiorCeilingLintelHeight: Float
  interiorWallThickness: UpdateByIdBrandParametersTunnelWallParametersInteriorWallThicknessInput
  optionsPanelWallConfig: UpdateByIdBrandParametersTunnelWallParametersOptionsPanelWallConfigInput
  windowLintelLevel: Float
  windowSillLevel: Float
}

""""""
input UpdateByIdBrandParametersTunnelWallParametersInteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

""""""
input UpdateByIdBrandParametersTunnelWallParametersOptionsPanelWallConfigInput {
  displayOnlyWallType: Boolean
  displayWallHeightExteriorFloor: Boolean
  displayWallHeightInteriorFloor: Boolean
  displayWallThicknessDropdown: Boolean
  displayWallThicknessInput: Boolean
  usePartitionLabelForInteriorWall: Boolean
}

type UpdateByIdBrandPayload {
  """Updated document"""
  record: Brand

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdBrandPromoterWebsiteConfigurationInput {
  acquirerValidateUnitAccessPointId: MongoID
  metadataConfiguration: UpdateByIdBrandPromoterWebsiteConfigurationMetadataConfigurationInput
  operatorTypeAccessPointId: MongoID
  promoterValidateTypeAccessPointId: MongoID
  unitTypeSaveModelId: MongoID
}

""""""
input UpdateByIdBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataType
}

""""""
input UpdateByIdBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataType
}

""""""
input UpdateByIdBrandPromoterWebsiteConfigurationMetadataConfigurationInput {
  apartmentUnitMetadata: [UpdateByIdBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput!]
  apartmentUnitTypeIdMetadataKey: String
  apartmentUnitTypeMetadata: [UpdateByIdBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput!]
  programMetadata: [UpdateByIdBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput!]
}

""""""
input UpdateByIdBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataType
}

""""""
input UpdateByIdBrandSatelliteConfigurationInput {
  satelliteUrl: String
}

""""""
input UpdateByIdCatalogFolderInput {
  associatedEcotaxePriceTableId: MongoID
  associatedPriceTableId: MongoID
  brand: MongoID
  createdAt: Date
  iconId: Int
  metadata: [UpdateByIdCatalogFolderMetadataInput]
  name: String
  parent: MongoID
  public: Boolean
  publicNameTranslations: Translations
  published: Boolean
  rootId: MongoID
  sharedWithIds: [MongoID]
  thumbnailId: String
  thumbnailUrl: String
  tiles: [UpdateByIdCatalogFolderTilesInput]
  tilesBackgroundColor: String
  tilesColumnAmount: Float
  tilesColumnGap: Float
  tilesColumnSizes: [Float]
  tilesRowGap: Float
  tilesRowSizes: [Float]
  type: EnumCatalogFolderType
  updatedAt: Date
  virtual: Boolean
}

""""""
input UpdateByIdCatalogFolderMetadataInput {
  _id: MongoID
  key: String
  value: String
}

type UpdateByIdCatalogFolderPayload {
  """Updated document"""
  record: CatalogFolder

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdCatalogFolderTilesImagePlacementInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

""""""
input UpdateByIdCatalogFolderTilesInput {
  _id: MongoID
  advancedTextTranslations: Translations
  backgroundColor: String
  backgroundOpacity: Float
  borderRadius: Float
  catalogSourceId: MongoID
  construction: MongoID
  descriptionTextSize: Float
  folder: MongoID
  hasShadow: Boolean
  height: Float
  horizontalTextAlignement: EnumCatalogFolderTilesHorizontalTextAlignement
  imageId: String
  imagePlacement: UpdateByIdCatalogFolderTilesImagePlacementInput
  imageUrl: String
  isImagePlacementFree: Boolean
  isShownOnDesktop: Boolean
  isShownOnMobile: Boolean
  item: MongoID
  itemsGroup: MongoID
  mask: Boolean
  maskColor: String
  maskOpacity: Float
  metadata: [UpdateByIdCatalogFolderTilesMetadataInput]
  posX: Float
  posY: Float
  saveSelectedInTunnelStateVariable: String
  stylePresetId: MongoID
  textColor: String
  textDescriptionTranslations: Translations
  textPadding: UpdateByIdCatalogFolderTilesTextPaddingInput
  textTitleTranslations: Translations
  titleTextColor: String
  titleTextSize: Float
  tooltipTranslations: Translations
  type: EnumCatalogFolderTilesType
  useAdvancedText: Boolean
  verticalTextAlignement: EnumCatalogFolderTilesVerticalTextAlignement
  width: Float
}

""""""
input UpdateByIdCatalogFolderTilesMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input UpdateByIdCatalogFolderTilesTextPaddingInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

""""""
input UpdateByIdContactInformationInput {
  date: Date
  email: String
  fullname: String
  interlocutor: String
  message: String
  phone: String
  state: EnumContactInformationState
}

type UpdateByIdContactInformationPayload {
  """Updated document"""
  record: ContactInformation

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdCustomerInput {
  address: String
  brandId: MongoID
  city: String
  createdAt: Date
  createdById: MongoID
  email: String
  firstname: String
  firstnameAdditional: String
  gender: String
  genderAdditional: String
  mobilePhone: String
  phone: String
  surname: String
  surnameAdditional: String
  updatedAt: Date
  zipCode: String
}

type UpdateByIdCustomerPayload {
  """Updated document"""
  record: Customer

  """Document ID"""
  recordId: MongoID
}

"""Configures the parameters of one or multiple chunks in the document."""
input UpdateByIdInputDocumentChunkManifestInput {
  """
  Render-time parameters object, implementing the chunk's parameters schema as given in the output manifest. The type of this property is loosely-typed in GraphQL, but verified at runtime against that schema. If the parameters passed are invalid against the schema, the chunk will be disabled and a manifest warning will be issued.
  """
  parameters: JSONObject

  """
  A path selector to target one or multiple chunks, since it can be a bash-like glob pattern, ex. "/my-section/my-chunk-123", "/my-section/my-chunk-*", "/**/my-chunk-*", etc.
  """
  path: String

  """
  Defines whether the chunk should be rendered in the document. If set "false" on a group chunk, it applies to its children recursively.
  """
  render: Boolean = true
}

""""""
input UpdateByIdItemCustomisationCoverPlanesInput {
  _id: MongoID
  associatedItem: MongoID
  hideForSingleObject: Boolean
  mode: EnumItemCustomisationCoverPlanesMode
  nameId: String
  positions: UpdateByIdItemCustomisationCoverPlanesPositionsInput
  showOnStart: Boolean
  weight: Float
}

""""""
input UpdateByIdItemCustomisationCoverPlanesPositionsInput {
  above: Boolean
  behind: Boolean
  front: Boolean
  left: Boolean
  right: Boolean
}

""""""
input UpdateByIdItemCustomisationMaterialsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  associatedPalette: MongoID
  materials: [String]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  type: EnumItemCustomisationMaterialsType
  weight: Float
}

""""""
input UpdateByIdItemCustomisationSubObjectsHooksInput {
  _id: MongoID
  orientation: UpdateByIdItemCustomisationSubObjectsHooksOrientationInput
  position: UpdateByIdItemCustomisationSubObjectsHooksPositionInput
  type: EnumItemCustomisationSubObjectsHooksType
}

""""""
input UpdateByIdItemCustomisationSubObjectsHooksOrientationInput {
  x: Float
  y: Float
  z: Float
}

""""""
input UpdateByIdItemCustomisationSubObjectsHooksPositionInput {
  x: Float
  y: Float
  z: Float
}

""""""
input UpdateByIdItemCustomisationSubObjectsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  hooks: [UpdateByIdItemCustomisationSubObjectsHooksInput]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  weight: Float
}

""""""
input UpdateByIdItemCustomisationSymbolicRepresentationInput {
  _id: MongoID
  anglePositionIsRight: Boolean
  break3D: Boolean
  colors: EnumItemCustomisationSymbolicRepresentationColors
  displayDiagonals: Boolean
  doorType: EnumItemCustomisationSymbolicRepresentationDoorType
  drawerCount: Float
  symbolicIcon: EnumItemCustomisationSymbolicRepresentationSymbolicIcon
  symbolicIconShape: EnumItemCustomisationSymbolicRepresentationSymbolicIconShape
  symbolicIconSubType: EnumItemCustomisationSymbolicRepresentationSymbolicIconSubType
  type: EnumItemCustomisationSymbolicRepresentationType
}

""""""
input UpdateByIdItemFactSheetInput {
  _id: MongoID
  descriptionJson: JSONObject
  logoPicture: String
  pictureUrl: String
}

""""""
input UpdateByIdItemGuardrailInformationsInput {
  _id: MongoID
  meshes: [UpdateByIdItemGuardrailInformationsMeshesInput]
}

""""""
input UpdateByIdItemGuardrailInformationsMeshesDimensionsInput {
  height: Float
  length: Float
  thickness: Float
}

""""""
input UpdateByIdItemGuardrailInformationsMeshesInput {
  _id: MongoID
  dimensions: UpdateByIdItemGuardrailInformationsMeshesDimensionsInput
  materialId: MongoID
  meshId: MongoID
  options: UpdateByIdItemGuardrailInformationsMeshesOptionsInput
  placing: UpdateByIdItemGuardrailInformationsMeshesPlacingInput
  surface: UpdateByIdItemGuardrailInformationsMeshesSurfaceInput
  type: EnumItemGuardrailInformationsMeshesType
}

""""""
input UpdateByIdItemGuardrailInformationsMeshesOptionsInput {
  closeBottom: Boolean
  closeTop: Boolean
  shape: EnumItemGuardrailInformationsMeshesOptionsShape
}

""""""
input UpdateByIdItemGuardrailInformationsMeshesPlacingInput {
  elevation: Float
  endContraction: Float
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  placeEndPillarsDiagonally: Boolean
}

""""""
input UpdateByIdItemGuardrailInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
}

""""""
input UpdateByIdItemInput {
  articleCode: String
  brandId: MongoID
  buildingWingInfos: String
  canBeCutAlongHeight: Boolean
  canBeCutAlongLength: Boolean
  canBeCutAlongWidth: Boolean
  canBeDroppedOnZones: [EnumItemCanBeDroppedOnZones!]
  categoriesIds: [MongoID!]
  compositeInfos: String
  consideredAsDroppableZones: [EnumItemConsideredAsDroppableZones!]
  createdAt: Date
  createdById: MongoID
  customisationByItemsGroupId: MongoID
  customisationCoverPlanes: [UpdateByIdItemCustomisationCoverPlanesInput!]
  customisationMaterials: [UpdateByIdItemCustomisationMaterialsInput!]
  customisationSubObjects: [UpdateByIdItemCustomisationSubObjectsInput!]
  customisationSymbolicRepresentation: UpdateByIdItemCustomisationSymbolicRepresentationInput
  deleted: Boolean
  ean: String
  factSheet: UpdateByIdItemFactSheetInput
  guardrailInformations: UpdateByIdItemGuardrailInformationsInput
  metadata: [UpdateByIdItemMetadataInput!]
  minimumPricedDimensions: UpdateByIdItemMinimumPricedDimensionsInput
  modelUrl: String
  name: String
  outputAssets: UpdateByIdItemOutputAssetsInput
  physicalHeight: String
  physicalLength: String
  physicalWidth: String
  pillarInformations: UpdateByIdItemPillarInformationsInput
  priceCoefExclusion: Boolean
  priceGeneration: EnumItemPriceGeneration
  priceUnit: EnumItemPriceUnit
  publicNameTranslations: Translations
  roofInformations: UpdateByIdItemRoofInformationsInput
  scrapperTag: String
  slug: String
  stairsInformations: UpdateByIdItemStairsInformationsInput
  tags: [String!]
  thumbnailUrl: String
  tooltip3DTranslations: Translations
  type: EnumItemType
  updatedAt: Date
  updatedById: MongoID
  vegetationInformations: UpdateByIdItemVegetationInformationsInput
  wallInformations: UpdateByIdItemWallInformationsInput
}

""""""
input UpdateByIdItemMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input UpdateByIdItemMinimumPricedDimensionsInput {
  _id: MongoID
  depth: String
  width: String
}

""""""
input UpdateByIdItemOutputAssetsCoatingVariantsAlbedoInput {
  _id: MongoID
  name: String
  type: String
  url: String!
}

""""""
input UpdateByIdItemOutputAssetsCoatingVariantsInput {
  _id: MongoID
  albedo: UpdateByIdItemOutputAssetsCoatingVariantsAlbedoInput
  metallic: UpdateByIdItemOutputAssetsCoatingVariantsAlbedoInput
  name: String
  normal: UpdateByIdItemOutputAssetsCoatingVariantsAlbedoInput
  smoothness: UpdateByIdItemOutputAssetsCoatingVariantsAlbedoInput
}

""""""
input UpdateByIdItemOutputAssetsInput {
  _id: MongoID
  coatingVariants: [UpdateByIdItemOutputAssetsCoatingVariantsInput]
}

type UpdateByIdItemPayload {
  """Updated document"""
  record: Item

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdItemPillarInformationsInput {
  _id: MongoID
  cylinderSides: Float
  materials: [UpdateByIdItemPillarInformationsMaterialsInput]
  models: [UpdateByIdItemPillarInformationsModelsInput]
  necking: UpdateByIdItemPillarInformationsNeckingInput
}

""""""
input UpdateByIdItemPillarInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemPillarInformationsMaterialsType
}

""""""
input UpdateByIdItemPillarInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemPillarInformationsModelsType
  width: Float
}

""""""
input UpdateByIdItemPillarInformationsNeckingCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateByIdItemPillarInformationsNeckingInput {
  crossSection: UpdateByIdItemPillarInformationsNeckingCrossSectionInput
  distanceToTop: Float
}

""""""
input UpdateByIdItemRoofInformationsCoveringInput {
  included: Boolean
  ridgeTiles: UpdateByIdItemRoofInformationsCoveringRidgeTilesInput
  sealingThickness: Float
  spaceBetweenSealingAndTiles: Float
  tilesThickness: Float
}

""""""
input UpdateByIdItemRoofInformationsCoveringRidgeTilesInput {
  innerRadius: Float
  length: Float
  radius: Float
}

""""""
input UpdateByIdItemRoofInformationsEavesStyleInput {
  type: EnumItemRoofInformationsEavesStyleType
}

""""""
input UpdateByIdItemRoofInformationsFlatRoofBorderDimensionsInput {
  height: Float
  width: Float
}

""""""
input UpdateByIdItemRoofInformationsFlatRoofInput {
  borderDimensions: UpdateByIdItemRoofInformationsFlatRoofBorderDimensionsInput
  gravelThickness: Float
  included: Boolean
}

""""""
input UpdateByIdItemRoofInformationsFramingInput {
  included: Boolean
  pieces: [UpdateByIdItemRoofInformationsFramingPiecesInput]
  type: EnumItemRoofInformationsFramingType
}

""""""
input UpdateByIdItemRoofInformationsFramingPiecesEnd_coordinateInput {
  x: Float
  y: Float
}

""""""
input UpdateByIdItemRoofInformationsFramingPiecesInput {
  _id: MongoID
  end_coordinate: UpdateByIdItemRoofInformationsFramingPiecesEnd_coordinateInput
  name: String
  start_coordinate: UpdateByIdItemRoofInformationsFramingPiecesStart_coordinateInput
  type: EnumItemRoofInformationsFramingPiecesType
}

""""""
input UpdateByIdItemRoofInformationsFramingPiecesStart_coordinateInput {
  x: Float
  y: Float
}

""""""
input UpdateByIdItemRoofInformationsGutterInput {
  included: Boolean
  innerRadius: Float
  radius: Float
}

""""""
input UpdateByIdItemRoofInformationsInput {
  _id: MongoID
  covering: UpdateByIdItemRoofInformationsCoveringInput
  eavesStyle: UpdateByIdItemRoofInformationsEavesStyleInput
  flatRoof: UpdateByIdItemRoofInformationsFlatRoofInput
  framing: UpdateByIdItemRoofInformationsFramingInput
  gutter: UpdateByIdItemRoofInformationsGutterInput
  materials: [UpdateByIdItemRoofInformationsMaterialsInput]
  models: [UpdateByIdItemRoofInformationsModelsInput]
  overhang: UpdateByIdItemRoofInformationsOverhangInput
  purlins: UpdateByIdItemRoofInformationsPurlinsInput
  rafters: UpdateByIdItemRoofInformationsRaftersInput
  ridgeBoard: UpdateByIdItemRoofInformationsRidgeBoardInput
  solarPanels: UpdateByIdItemRoofInformationsSolarPanelsInput
  topPlate: UpdateByIdItemRoofInformationsTopPlateInput
}

""""""
input UpdateByIdItemRoofInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemRoofInformationsMaterialsType
}

""""""
input UpdateByIdItemRoofInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemRoofInformationsModelsType
  width: Float
}

""""""
input UpdateByIdItemRoofInformationsOverhangInput {
  bargeboard: Float
  bargeboardPurlins: Float
  bargeboardRafters: Float
  eave: Float
  included: Boolean
}

""""""
input UpdateByIdItemRoofInformationsPurlinsBottomInput {
  height: Float
  width: Float
}

""""""
input UpdateByIdItemRoofInformationsPurlinsInput {
  bottom: UpdateByIdItemRoofInformationsPurlinsBottomInput
  included: Boolean
  intermediate: UpdateByIdItemRoofInformationsPurlinsIntermediateInput
  ridge: UpdateByIdItemRoofInformationsPurlinsRidgeInput
}

""""""
input UpdateByIdItemRoofInformationsPurlinsIntermediateInput {
  height: Float
  width: Float
}

""""""
input UpdateByIdItemRoofInformationsPurlinsRidgeInput {
  height: Float
  width: Float
}

""""""
input UpdateByIdItemRoofInformationsRaftersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateByIdItemRoofInformationsRaftersInput {
  crossSection: UpdateByIdItemRoofInformationsRaftersCrossSectionInput
  included: Boolean
  typicalDistance: Float
}

""""""
input UpdateByIdItemRoofInformationsRidgeBoardCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateByIdItemRoofInformationsRidgeBoardInput {
  crossSection: UpdateByIdItemRoofInformationsRidgeBoardCrossSectionInput
  included: Boolean
}

""""""
input UpdateByIdItemRoofInformationsSolarPanelsFrameInput {
  thickness: Float
  width: Float
}

""""""
input UpdateByIdItemRoofInformationsSolarPanelsInput {
  distanceToRoof: Float
  frame: UpdateByIdItemRoofInformationsSolarPanelsFrameInput
  height: Float
  included: Boolean
  thickness: Float
  width: Float
}

""""""
input UpdateByIdItemRoofInformationsTopPlateCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateByIdItemRoofInformationsTopPlateInput {
  crossSection: UpdateByIdItemRoofInformationsTopPlateCrossSectionInput
  included: Boolean
}

""""""
input UpdateByIdItemStairsInformationsInput {
  _id: MongoID
  landing: UpdateByIdItemStairsInformationsLandingInput
  materials: [UpdateByIdItemStairsInformationsMaterialsInput]
  models: [UpdateByIdItemStairsInformationsModelsInput]
  railing: UpdateByIdItemStairsInformationsRailingInput
  steps: UpdateByIdItemStairsInformationsStepsInput
  stringers: UpdateByIdItemStairsInformationsStringersInput
}

""""""
input UpdateByIdItemStairsInformationsLandingInput {
  height: Float
}

""""""
input UpdateByIdItemStairsInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemStairsInformationsMaterialsType
}

""""""
input UpdateByIdItemStairsInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemStairsInformationsModelsType
  width: Float
}

""""""
input UpdateByIdItemStairsInformationsRailingBalustersInput {
  radius: Float
  typicalDistance: Float
}

""""""
input UpdateByIdItemStairsInformationsRailingHandrailCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateByIdItemStairsInformationsRailingHandrailInput {
  crossSection: UpdateByIdItemStairsInformationsRailingHandrailCrossSectionInput
  elevation: Float
}

""""""
input UpdateByIdItemStairsInformationsRailingInput {
  balusters: UpdateByIdItemStairsInformationsRailingBalustersInput
  handrail: UpdateByIdItemStairsInformationsRailingHandrailInput
  posts: UpdateByIdItemStairsInformationsRailingPostsInput
}

""""""
input UpdateByIdItemStairsInformationsRailingPostsCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateByIdItemStairsInformationsRailingPostsInput {
  crossSection: UpdateByIdItemStairsInformationsRailingPostsCrossSectionInput
}

""""""
input UpdateByIdItemStairsInformationsStepsInput {
  risers: UpdateByIdItemStairsInformationsStepsRisersInput
  treats: UpdateByIdItemStairsInformationsStepsTreatsInput
}

""""""
input UpdateByIdItemStairsInformationsStepsRisersInput {
  height: Float
  thickness: Float
}

""""""
input UpdateByIdItemStairsInformationsStepsTreatsInput {
  height: Float
  nose: Float
}

""""""
input UpdateByIdItemStairsInformationsStringersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateByIdItemStairsInformationsStringersInput {
  crossSection: UpdateByIdItemStairsInformationsStringersCrossSectionInput
  overTreat: Float
}

""""""
input UpdateByIdItemVegetationInformationsInput {
  _id: MongoID
  canBeSelected: Boolean
}

""""""
input UpdateByIdItemWallInformationsApplicationInput {
  bothSides: Boolean
  exteriorFacesExteriorWalls: Boolean
  interiorFacesExteriorWalls: Boolean
  interiorWalls: Boolean
  overRegularWall: Boolean
}

""""""
input UpdateByIdItemWallInformationsInput {
  _id: MongoID
  application: UpdateByIdItemWallInformationsApplicationInput
  class: EnumItemWallInformationsClass
  meshes: [UpdateByIdItemWallInformationsMeshesInput]
}

""""""
input UpdateByIdItemWallInformationsMeshesDimensionsInput {
  length: Float
  thickness: Float
}

""""""
input UpdateByIdItemWallInformationsMeshesDisplayInput {
  autoCut: Boolean
  whenWallsHigh: Boolean
  whenWallsLow: Boolean
}

""""""
input UpdateByIdItemWallInformationsMeshesInput {
  _id: MongoID
  buildingMaterial: EnumItemWallInformationsMeshesBuildingMaterial
  dimensions: UpdateByIdItemWallInformationsMeshesDimensionsInput
  display: UpdateByIdItemWallInformationsMeshesDisplayInput
  materialId: MongoID
  meshId: MongoID
  name: String
  options: UpdateByIdItemWallInformationsMeshesOptionsInput
  overlapPriority: Float
  placing: UpdateByIdItemWallInformationsMeshesPlacingInput
  segmentTypes: UpdateByIdItemWallInformationsMeshesSegmentTypesInput
  surface: UpdateByIdItemWallInformationsMeshesSurfaceInput
  type: EnumItemWallInformationsMeshesType
}

""""""
input UpdateByIdItemWallInformationsMeshesOptionsInput {
  closeBack: Boolean
  closeBottom: Boolean
  closeFront: Boolean
  closeSides: Boolean
  closeTop: Boolean
  hidden: Boolean
  nextToDoorsAndWindows: Boolean
  paintable: Boolean
  shape: EnumItemWallInformationsMeshesOptionsShape
  skewOnCorners: Boolean
}

""""""
input UpdateByIdItemWallInformationsMeshesPlacingBottomElevationInput {
  _id: MongoID
  elevation: Float
  reference: EnumItemWallInformationsMeshesPlacingBottomElevationReference
}

""""""
input UpdateByIdItemWallInformationsMeshesPlacingInput {
  beamDirection: EnumItemWallInformationsMeshesPlacingBeamDirection
  bottomElevation: UpdateByIdItemWallInformationsMeshesPlacingBottomElevationInput
  depthOffset: Float
  doorPostOffset: Float
  endContraction: Float
  endDepth: UpdateByIdItemWallInformationsMeshesPlacingStartDepthInput
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  moveVerticesAbove: Float
  pivotIsOnTop: Boolean
  placeEndPillarsDiagonally: Boolean
  repetitionFilter: EnumItemWallInformationsMeshesPlacingRepetitionFilter
  startDepth: UpdateByIdItemWallInformationsMeshesPlacingStartDepthInput
  stretchVertically: Boolean
  topElevation: UpdateByIdItemWallInformationsMeshesPlacingBottomElevationInput
}

""""""
input UpdateByIdItemWallInformationsMeshesPlacingStartDepthInput {
  _id: MongoID
  depth: Float
  plusOnTop: Float
  reference: EnumItemWallInformationsMeshesPlacingStartDepthReference
}

""""""
input UpdateByIdItemWallInformationsMeshesSegmentTypesInput {
  doors: Boolean
  walls: Boolean
  windows: Boolean
}

""""""
input UpdateByIdItemWallInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
  swapUV: Boolean
}

""""""
input UpdateByIdItemsGroupInput {
  brandId: MongoID
  choiceIsMandatory: Boolean
  generated: Boolean
  itemsIds: [MongoID!]
  name: String
  option: UpdateByIdItemsGroupOptionInput
  publicNameTranslations: Translations
  shouldBeOpenInGUI: Boolean
  thumbnailPictureName: String
  type: EnumItemsGroupType
}

""""""
input UpdateByIdItemsGroupOptionInput {
  _id: MongoID
  baseItemId: MongoID
  choiceIsMandatory: Boolean
  disableDefaultChoice: Boolean
  positions: [UpdateByIdItemsGroupOptionPositionsInput!]
}

""""""
input UpdateByIdItemsGroupOptionPositionsInput {
  _id: MongoID
  margins: UpdateByIdItemsGroupOptionPositionsMarginsInput
  placement: EnumItemsGroupOptionPositionsPlacement
  rotation: EnumItemsGroupOptionPositionsRotation
}

""""""
input UpdateByIdItemsGroupOptionPositionsMarginsInput {
  x: Float
  y: Float
  z: Float
}

type UpdateByIdItemsGroupPayload {
  """Updated document"""
  record: ItemsGroup

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdPaletteColorsInput {
  _id: MongoID
  a: Float
  b: Float
  code: String
  g: Float
  metallic: Float
  nameTranslations: Translations
  r: Float
  roughness: Float
}

""""""
input UpdateByIdPaletteInput {
  brandId: MongoID
  colors: [UpdateByIdPaletteColorsInput]
  name: String
  type: EnumPaletteType
}

type UpdateByIdPalettePayload {
  """Updated document"""
  record: Palette

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdPictureInput {
  brandId: MongoID
  name: String
  size: Float
  url: String
}

type UpdateByIdPicturePayload {
  """Updated document"""
  record: Picture

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdPipelineJobInput {
  _id: MongoID
  completedDate: Date
  settings: UpdateByIdPipelineJobSettingsInput
  startDate: Date
  state: EnumPipelineJobState
  submitDate: Date
  type: EnumPipelineJobType
}

type UpdateByIdPipelineJobPayload {
  """Updated document"""
  record: PipelineJob

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdPipelineJobSettingsConvertPBRMaterialToAssetBundleInput {
  _id: MongoID
  assetUrl: String
  itemId: MongoID
}

""""""
input UpdateByIdPipelineJobSettingsInput {
  _id: MongoID
  convertPBRMaterialToAssetBundle: UpdateByIdPipelineJobSettingsConvertPBRMaterialToAssetBundleInput
}

""""""
input UpdateByIdPlannedMaintenanceInput {
  durationHours: Float
  reasonTranslations: Translations
  startDate: Date
}

type UpdateByIdPlannedMaintenancePayload {
  """Updated document"""
  record: PlannedMaintenance

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdPriceTableInput {
  brandId: MongoID
  currencyName: String
  displayEan: Boolean
  globalDiscount: Float
  moniker: String
  multiplyingCoefficient: Float
  name: String
  prices: [UpdateByIdPriceTablePricesInput]
  symbol: String
  vatRate: Float
}

type UpdateByIdPriceTablePayload {
  """Updated document"""
  record: PriceTable

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdPriceTablePricesInput {
  _id: MongoID
  articleIdentifier: String
  ean: String
  itemsIds: [MongoID]
  price: Float
  sourceItemId: MongoID
}

""""""
input UpdateByIdProductScanInput {
  _id: MongoID
  creationDate: Date
  metallic: Float
  notes: String
  productName: String
  reference: String
  scans: [UpdateByIdProductScanScansInput]
  size: UpdateByIdProductScanSizeInput
  state: EnumProductScanState
  thumbnail: UpdateByIdProductScanScansInputImagesInput
}

type UpdateByIdProductScanPayload {
  """Updated document"""
  record: ProductScan

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdProductScanScansInput {
  _id: MongoID
  generatedImages: [UpdateByIdProductScanScansInputImagesInput]
  inputImages: [UpdateByIdProductScanScansInputImagesInput]
  name: String
  type: EnumProductScanScansType
}

""""""
input UpdateByIdProductScanScansInputImagesInput {
  _id: MongoID
  format: String!
  name: String!
  url: String!
}

""""""
input UpdateByIdProductScanSizeInput {
  height: String
  length: String
  width: String
}

""""""
input UpdateByIdPromoterApartmentUnitInput {
  buildingNumber: String
  comment: String
  floor: String
  metadata: Metadata
  purchaserFirstName: String
  purchaserMail: String
  purchaserSurname: String
  saveId: MongoID
  state: EnumPromoterApartmentUnitState
  unitNumber: String
  unitTypeId: MongoID
}

type UpdateByIdPromoterApartmentUnitPayload {
  """Updated document"""
  record: PromoterApartmentUnit

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdPromoterApartmentUnitTypeHistoryInput {
  _id: MongoID
  comment: String
  saveId: MongoID
  state: EnumPromoterApartmentUnitTypeHistoryState
  version: Int
}

""""""
input UpdateByIdPromoterApartmentUnitTypeInput {
  currentVersion: Int
  descriptionJson: JSONObject
  history: [UpdateByIdPromoterApartmentUnitTypeHistoryInput!]
  metadata: Metadata
  name: String
  saveFolderId: MongoID
  state: EnumPromoterApartmentUnitTypeState
}

type UpdateByIdPromoterApartmentUnitTypePayload {
  """Updated document"""
  record: PromoterApartmentUnitType

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdPromoterProgramInput {
  address: String
  city: String
  isArchived: Boolean
  itemFilter: UpdateByIdPromoterProgramItemFilterInput
  metadata: Metadata
  name: String
  planEditor: UpdateByIdPromoterProgramPlanEditorInput
  planUrls: [String!]
  promoterId: MongoID
  saveFolderId: MongoID
  slug: String
  state: EnumPromoterProgramState
  stylePresetGroupId: MongoID
  zipCode: Float
}

""""""
input UpdateByIdPromoterProgramItemFilterInput {
  itemWhiteList: [MongoID!]
}

type UpdateByIdPromoterProgramPayload {
  """Updated document"""
  record: PromoterProgram

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdPromoterProgramPlanEditorInput {
  data: JSON
  dataFormatVersion: Int
}

""""""
input UpdateByIdSalesRecordInput {
  _id: MongoID
  finalCustomerMetadata: Metadata
  metadata: Metadata
}

type UpdateByIdSalesRecordPayload {
  """Updated document"""
  record: SalesRecord

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdSaveFolderInput {
  brandId: MongoID
  createdAt: Date
  name: String
  parentId: MongoID
  slug: String
  updatedAt: Date
}

type UpdateByIdSaveFolderPayload {
  """Updated document"""
  record: SaveFolder

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdSavesGroupInput {
  brandId: MongoID
  name: String
  publicNameTranslations: Translations
  savesIds: [MongoID]
  thumbnailPictureName: String
  type: EnumSavesGroupType
}

type UpdateByIdSavesGroupPayload {
  """Updated document"""
  record: SavesGroup

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdSettingInput {
  role: String
  value: JSON
}

type UpdateByIdSettingPayload {
  """Updated document"""
  record: Setting

  """Document ID"""
  recordId: String
}

""""""
input UpdateByIdStylePresetCustomisationPresetsInput {
  _id: MongoID
  chosenItemId: MongoID
  customisationNameId: String
  filterTag: String
  rotationCondition: EnumStylePresetCustomisationPresetsRotationCondition
}

""""""
input UpdateByIdStylePresetGroupInput {
  brandId: MongoID
  name: String
  stylePresetIds: [MongoID]
}

type UpdateByIdStylePresetGroupPayload {
  """Updated document"""
  record: StylePresetGroup

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdStylePresetInput {
  brandId: MongoID
  createdAt: Date
  customisationPresets: [UpdateByIdStylePresetCustomisationPresetsInput]
  name: String
  publicNameTranslations: Translations
  updatedAt: Date
}

type UpdateByIdStylePresetPayload {
  """Updated document"""
  record: StylePreset

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdTutorialInput {
  brandId: MongoID
  displayOnlyOnce: Boolean
  name: String
  points: [UpdateByIdTutorialPointInput!]
}

type UpdateByIdTutorialPayload {
  """Updated document"""
  record: Tutorial

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateByIdTutorialPointInput {
  _id: MongoID
  illustration: String
  target: EnumTutorialPointTarget
  textTranslations: Translations
  titleTranslations: Translations
}

""""""
input UpdateByIdUserInput {
  createdAt: Date
  createdById: MongoID
  email: String
  favoriteItemsIds: [MongoID!]
  favoriteSavesIds: [MongoID!]
  name: String
  roles: [String!]
  updatedAt: Date
}

type UpdateByIdUserPayload {
  """Updated document"""
  record: User

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneAccessPointInput {
  areSavesPubliclyAvailableById: Boolean
  authorizedCatalogIds: [MongoID]
  brandId: MongoID
  ecotaxePriceTableId: MongoID
  name: String
  parametersScrapperId: MongoID
  parametersTunnelId: MongoID
  priceTableId: MongoID
  supportButton: UpdateOneAccessPointSupportButtonInput
}

type UpdateOneAccessPointPayload {
  """Updated document"""
  record: AccessPoint

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneAccessPointSupportButtonInput {
  icon: EnumAccessPointSupportButtonIcon
  tooltipTranslations: Translations
  type: EnumAccessPointSupportButtonType
  value: String
}

""""""
input UpdateOneBarcodeCollectionBarcodeReferencesInput {
  _id: MongoID
  ean: String
  id: String
}

""""""
input UpdateOneBarcodeCollectionInput {
  barcodeReferences: [UpdateOneBarcodeCollectionBarcodeReferencesInput!]
  createdAt: Date
  createdById: MongoID
  name: String
  updatedAt: Date
  updatedById: MongoID
}

type UpdateOneBarcodeCollectionPayload {
  """Updated document"""
  record: BarcodeCollection

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneBrandColorsInput {
  dataProtection: String
  legalNotice: String
  loadingScreenBackground: String
  loadingScreenLogoPicture: String
  loadingScreenProgressBarBackground: String
  loadingScreenProgressBarBorder: String
  loadingScreenProgressBarContent: String
  loadingScreenText: String
  meshes: UpdateOneBrandColorsMeshesInput
  planElement: UpdateOneBrandColorsPlanElementInput
  primary: String
  questHeaderBackground: String
  questHeaderBody: String
  questHeaderTitle: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

""""""
input UpdateOneBrandColorsMeshesInput {
  wallCut: String
}

""""""
input UpdateOneBrandColorsPlanElementInput {
  floor: String
  wall: String
  window: String
}

""""""
input UpdateOneBrandInput {
  colors: UpdateOneBrandColorsInput
  createdAt: Date
  name: String
  promoterWebsiteConfiguration: UpdateOneBrandPromoterWebsiteConfigurationInput
  satelliteConfiguration: UpdateOneBrandSatelliteConfigurationInput
  shareCode: String
  slug: String
  updatedAt: Date
}

""""""
input UpdateOneBrandParametersPricingInput {
  brandId: MongoID
  enabled: Boolean
  useArticleCode: Boolean
  useEAN: Boolean
}

type UpdateOneBrandParametersPricingPayload {
  """Updated document"""
  record: BrandParametersPricing

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneBrandParametersScrapperInput {
  allowAnonymousSave: Boolean
  brandId: MongoID
  enabled: Boolean
  export: Boolean
  geometry: Boolean
  name: String
  objects: Boolean
  postManualSaveTriggerSteps: [UpdateOneBrandParametersScrapperPostManualSaveTriggerStepsInput!]
  screenshots: Boolean
  steps: [UpdateOneBrandParametersScrapperStepsInput!]
  watermark: UpdateOneBrandParametersScrapperWatermarkInput
}

type UpdateOneBrandParametersScrapperPayload {
  """Updated document"""
  record: BrandParametersScrapper

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneBrandParametersScrapperPostManualSaveTriggerStepsInput {
  _id: MongoID
  triggerPopup: UpdateOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput
  type: EnumBrandParametersScrapperPostManualSaveTriggerStepsType
}

""""""
input UpdateOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupInput {
  _id: MongoID
  buttonType: EnumBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupButtonType
  textTranslations: Translations
  titleTranslations: Translations
  yesNoButtons: UpdateOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput
}

""""""
input UpdateOneBrandParametersScrapperPostManualSaveTriggerStepsTriggerPopupYesNoButtonsInput {
  stateProperty: String
}

""""""
input UpdateOneBrandParametersScrapperStepsFilterInput {
  expression: String
}

""""""
input UpdateOneBrandParametersScrapperStepsInput {
  _id: MongoID
  filter: UpdateOneBrandParametersScrapperStepsFilterInput
  map: UpdateOneBrandParametersScrapperStepsMapInput
  stepType: EnumBrandParametersScrapperStepsStepType
  stepVerb: String
  tap: UpdateOneBrandParametersScrapperStepsTapInput
  verbFilter: EnumBrandParametersScrapperStepsVerbFilter
  verbMap: EnumBrandParametersScrapperStepsVerbMap
  verbTap: EnumBrandParametersScrapperStepsVerbTap
}

""""""
input UpdateOneBrandParametersScrapperStepsMapInput {
  kitchenPricer: UpdateOneBrandParametersScrapperStepsMapKitchenPricerInput
  payloadGenerator: UpdateOneBrandParametersScrapperStepsMapPayloadGeneratorInput
  pdfReportGenerator: UpdateOneBrandParametersScrapperStepsMapPdfReportGeneratorInput
  plinthCalculator: UpdateOneBrandParametersScrapperStepsMapPlinthCalculatorInput
  reportGenerator: UpdateOneBrandParametersScrapperStepsMapReportGeneratorInput
  terracePricer: UpdateOneBrandParametersScrapperStepsMapTerracePricerInput
}

""""""
input UpdateOneBrandParametersScrapperStepsMapKitchenPricerInput {
  apiToken: String
  apiUrl: String
  barcodeCollectionId: MongoID
  projectBaseUrl: String
}

""""""
input UpdateOneBrandParametersScrapperStepsMapPayloadGeneratorInput {
  addSaveName: Boolean
  addUpdateToken: Boolean
  dynamicParameterForTunnelStateInformation: String
  tunnelStateKeys: [String!]
}

""""""
input UpdateOneBrandParametersScrapperStepsMapPdfReportGeneratorInput {
  payloadType: EnumBrandParametersScrapperStepsMapPdfReportGeneratorPayloadType
}

""""""
input UpdateOneBrandParametersScrapperStepsMapPlinthCalculatorInput {
  bigPlinthId: MongoID
  littlePlinthId: MongoID
}

""""""
input UpdateOneBrandParametersScrapperStepsMapReportGeneratorInput {
  chunksManifest: [UpdateOneInputDocumentChunkManifestInput!]
  documentName: String
  htmlTemplate: String
  mode: EnumBrandParametersScrapperStepsMapReportGeneratorMode
}

""""""
input UpdateOneBrandParametersScrapperStepsMapTerracePricerInput {
  itemsCatalogId: MongoID
}

""""""
input UpdateOneBrandParametersScrapperStepsTapInput {
  outputToApi: UpdateOneBrandParametersScrapperStepsTapOutputToApiInput
  sendEmail: UpdateOneBrandParametersScrapperStepsTapSendEmailInput
}

""""""
input UpdateOneBrandParametersScrapperStepsTapOutputToApiInput {
  apiToken: String
  apiUrl: String
  signPayload: Boolean
}

""""""
input UpdateOneBrandParametersScrapperStepsTapSendEmailInput {
  attachmentName: String
  dynamicParameterEmailAdress: String
  emailSourceType: EnumBrandParametersScrapperStepsTapSendEmailEmailSourceType
  sendReportAsAttachment: Boolean
  staticEmailAdress: String
  subject: String
  template: String
}

""""""
input UpdateOneBrandParametersScrapperWatermarkInput {
  alpha: Float
  color: String
  enabled: Boolean
  picture: String
  repetition: Float
}

""""""
input UpdateOneBrandParametersTunnelApertureParametersInput {
  doorClassicDefaultItem: String
  doorEntryDefaultItem: String
  doorEntrySidelightDefaultItem: String
  doorExteriorCustomisationItemsGroupId: String
  doorInteriorCustomisationItemsGroupId: String
  doubleDoorDefaultItem: String
  doubleDoorlikeWindowDefaultItem: String
  doubleSwingDoorDefaultItem: String
  doubleWindowDefaultItem: String
  garageDoorDefaultItem: String
  simpleDoorlikeWindowDefaultItem: String
  slitWindowDefaultItem: String
  tripleDoorlikeWindowDefaultItem: String
  tripleWindowDefaultItem: String
  windowCustomisationItemsGroupId: String
  windowDefaultItem: String
}

""""""
input UpdateOneBrandParametersTunnelColorsParametersInput {
  nameHelpAtlas: String
  nameOptionsAtlas: String
  nameToolsAtlas: String
  primary: String
  secondary: String
  stepperBackground: String
  stepperContent: String
  stepperText: String
  tertiary: String
}

""""""
input UpdateOneBrandParametersTunnelCustomLinkButtonInput {
  link: String
  name: String
}

""""""
input UpdateOneBrandParametersTunnelDefaultCameraParametersInput {
  visitCameraParameters: UpdateOneBrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput
}

""""""
input UpdateOneBrandParametersTunnelDefaultCameraParametersVisitCameraParametersInput {
  defaultVisitFieldOfView: Float
}

""""""
input UpdateOneBrandParametersTunnelDefaultCoatingParametersInput {
  defaultExteriorFlooringId: MongoID
  defaultGardenFlooringId: MongoID
  defaultInteriorFlooringId: MongoID
}

""""""
input UpdateOneBrandParametersTunnelInput {
  apertureParameters: UpdateOneBrandParametersTunnelApertureParametersInput
  brandId: MongoID
  colorsParameters: UpdateOneBrandParametersTunnelColorsParametersInput
  customLinkButton: UpdateOneBrandParametersTunnelCustomLinkButtonInput
  defaultCameraParameters: UpdateOneBrandParametersTunnelDefaultCameraParametersInput
  defaultCoatingParameters: UpdateOneBrandParametersTunnelDefaultCoatingParametersInput
  defaultDayTime: Float
  defaultSnapDistance: Float
  disableHeaderShadow: Boolean
  displayCartItemNumber: Boolean
  displayCustomisationTagFurnitureOptions: Boolean
  displayFurnitureSubstitutesOptions: Boolean
  displaySaveName: Boolean
  displayStepsHeader: Boolean
  enabled: Boolean
  globalOptions: [String!]
  includeAllBrandItemsInCache: Boolean
  initialStepIfLoadingSave: Float
  isReloadFromLocalStorageEnabled: Boolean
  logoLinkOnClick: String
  logoPictureReference: String
  name: String
  persistentVariables: [UpdateOneBrandParametersTunnelPersistentVariablesInput!]
  preload: Boolean
  savePanelParameters: UpdateOneBrandParametersTunnelSavePanelParametersInput
  steps: [UpdateOneBrandParametersTunnelStepInput!]
  wallParameters: UpdateOneBrandParametersTunnelWallParametersInput
}

type UpdateOneBrandParametersTunnelPayload {
  """Updated document"""
  record: BrandParametersTunnel

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneBrandParametersTunnelPersistentVariablesInput {
  config: JSON
  name: String
}

""""""
input UpdateOneBrandParametersTunnelSavePanelParametersInput {
  isCustomerModuleEnabled: Boolean
  isExportButtonEnabled: Boolean
}

""""""
input UpdateOneBrandParametersTunnelStepInput {
  _id: MongoID
  analytics: UpdateOneBrandParametersTunnelStepsAnalyticsInput
  config: JSON
  description: String
  htmlTemplate: String
  isShownInStepper: Boolean
  module: EnumBrandParametersTunnelStepsModule
  name: String
  publicNameTranslations: Translations
  resetTunnelOnActivation: Boolean
}

""""""
input UpdateOneBrandParametersTunnelStepsAnalyticsChoiceReducerInput {
  isEnabled: Boolean
  stateProperties: [String]
}

""""""
input UpdateOneBrandParametersTunnelStepsAnalyticsInput {
  choiceReducer: UpdateOneBrandParametersTunnelStepsAnalyticsChoiceReducerInput
}

""""""
input UpdateOneBrandParametersTunnelWallParametersExteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

""""""
input UpdateOneBrandParametersTunnelWallParametersInput {
  doorLintelLevel: Float
  exteriorCeilingLintelHeight: Float
  exteriorWallThickness: UpdateOneBrandParametersTunnelWallParametersExteriorWallThicknessInput
  floorHeight: Float
  groundFloorLevel: Float
  innerHeight: Float
  interiorCeilingLintelHeight: Float
  interiorWallThickness: UpdateOneBrandParametersTunnelWallParametersInteriorWallThicknessInput
  optionsPanelWallConfig: UpdateOneBrandParametersTunnelWallParametersOptionsPanelWallConfigInput
  windowLintelLevel: Float
  windowSillLevel: Float
}

""""""
input UpdateOneBrandParametersTunnelWallParametersInteriorWallThicknessInput {
  canUseCustomValue: Boolean
  defaultWallThickness: Float
  wallThicknessDropdownValues: [Float]
}

""""""
input UpdateOneBrandParametersTunnelWallParametersOptionsPanelWallConfigInput {
  displayOnlyWallType: Boolean
  displayWallHeightExteriorFloor: Boolean
  displayWallHeightInteriorFloor: Boolean
  displayWallThicknessDropdown: Boolean
  displayWallThicknessInput: Boolean
  usePartitionLabelForInteriorWall: Boolean
}

type UpdateOneBrandPayload {
  """Updated document"""
  record: Brand

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneBrandPromoterWebsiteConfigurationInput {
  acquirerValidateUnitAccessPointId: MongoID
  metadataConfiguration: UpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationInput
  operatorTypeAccessPointId: MongoID
  promoterValidateTypeAccessPointId: MongoID
  unitTypeSaveModelId: MongoID
}

""""""
input UpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataType
}

""""""
input UpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInEnumerationTool: Boolean
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataType
}

""""""
input UpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationInput {
  apartmentUnitMetadata: [UpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitMetadataInput!]
  apartmentUnitTypeIdMetadataKey: String
  apartmentUnitTypeMetadata: [UpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationApartmentUnitTypeMetadataInput!]
  programMetadata: [UpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput!]
}

""""""
input UpdateOneBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataInput {
  _id: MongoID
  label: String
  shouldDisplayInIndexTable: Boolean
  type: EnumBrandPromoterWebsiteConfigurationMetadataConfigurationProgramMetadataType
}

""""""
input UpdateOneBrandSatelliteConfigurationInput {
  satelliteUrl: String
}

""""""
input UpdateOneCatalogFolderInput {
  associatedEcotaxePriceTableId: MongoID
  associatedPriceTableId: MongoID
  brand: MongoID
  createdAt: Date
  iconId: Int
  metadata: [UpdateOneCatalogFolderMetadataInput]
  name: String
  parent: MongoID
  public: Boolean
  publicNameTranslations: Translations
  published: Boolean
  rootId: MongoID
  sharedWithIds: [MongoID]
  thumbnailId: String
  thumbnailUrl: String
  tiles: [UpdateOneCatalogFolderTilesInput]
  tilesBackgroundColor: String
  tilesColumnAmount: Float
  tilesColumnGap: Float
  tilesColumnSizes: [Float]
  tilesRowGap: Float
  tilesRowSizes: [Float]
  type: EnumCatalogFolderType
  updatedAt: Date
  virtual: Boolean
}

""""""
input UpdateOneCatalogFolderMetadataInput {
  _id: MongoID
  key: String
  value: String
}

type UpdateOneCatalogFolderPayload {
  """Updated document"""
  record: CatalogFolder

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneCatalogFolderTilesImagePlacementInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

""""""
input UpdateOneCatalogFolderTilesInput {
  _id: MongoID
  advancedTextTranslations: Translations
  backgroundColor: String
  backgroundOpacity: Float
  borderRadius: Float
  catalogSourceId: MongoID
  construction: MongoID
  descriptionTextSize: Float
  folder: MongoID
  hasShadow: Boolean
  height: Float
  horizontalTextAlignement: EnumCatalogFolderTilesHorizontalTextAlignement
  imageId: String
  imagePlacement: UpdateOneCatalogFolderTilesImagePlacementInput
  imageUrl: String
  isImagePlacementFree: Boolean
  isShownOnDesktop: Boolean
  isShownOnMobile: Boolean
  item: MongoID
  itemsGroup: MongoID
  mask: Boolean
  maskColor: String
  maskOpacity: Float
  metadata: [UpdateOneCatalogFolderTilesMetadataInput]
  posX: Float
  posY: Float
  saveSelectedInTunnelStateVariable: String
  stylePresetId: MongoID
  textColor: String
  textDescriptionTranslations: Translations
  textPadding: UpdateOneCatalogFolderTilesTextPaddingInput
  textTitleTranslations: Translations
  titleTextColor: String
  titleTextSize: Float
  tooltipTranslations: Translations
  type: EnumCatalogFolderTilesType
  useAdvancedText: Boolean
  verticalTextAlignement: EnumCatalogFolderTilesVerticalTextAlignement
  width: Float
}

""""""
input UpdateOneCatalogFolderTilesMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input UpdateOneCatalogFolderTilesTextPaddingInput {
  bottom: Float
  left: Float
  right: Float
  top: Float
}

""""""
input UpdateOneCustomerInput {
  address: String
  brandId: MongoID
  city: String
  createdAt: Date
  createdById: MongoID
  email: String
  firstname: String
  firstnameAdditional: String
  gender: String
  genderAdditional: String
  mobilePhone: String
  phone: String
  surname: String
  surnameAdditional: String
  updatedAt: Date
  zipCode: String
}

type UpdateOneCustomerPayload {
  """Updated document"""
  record: Customer

  """Document ID"""
  recordId: MongoID
}

"""Configures the parameters of one or multiple chunks in the document."""
input UpdateOneInputDocumentChunkManifestInput {
  """
  Render-time parameters object, implementing the chunk's parameters schema as given in the output manifest. The type of this property is loosely-typed in GraphQL, but verified at runtime against that schema. If the parameters passed are invalid against the schema, the chunk will be disabled and a manifest warning will be issued.
  """
  parameters: JSONObject

  """
  A path selector to target one or multiple chunks, since it can be a bash-like glob pattern, ex. "/my-section/my-chunk-123", "/my-section/my-chunk-*", "/**/my-chunk-*", etc.
  """
  path: String

  """
  Defines whether the chunk should be rendered in the document. If set "false" on a group chunk, it applies to its children recursively.
  """
  render: Boolean = true
}

""""""
input UpdateOneItemCustomisationCoverPlanesInput {
  _id: MongoID
  associatedItem: MongoID
  hideForSingleObject: Boolean
  mode: EnumItemCustomisationCoverPlanesMode
  nameId: String
  positions: UpdateOneItemCustomisationCoverPlanesPositionsInput
  showOnStart: Boolean
  weight: Float
}

""""""
input UpdateOneItemCustomisationCoverPlanesPositionsInput {
  above: Boolean
  behind: Boolean
  front: Boolean
  left: Boolean
  right: Boolean
}

""""""
input UpdateOneItemCustomisationMaterialsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  associatedPalette: MongoID
  materials: [String]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  type: EnumItemCustomisationMaterialsType
  weight: Float
}

""""""
input UpdateOneItemCustomisationSubObjectsHooksInput {
  _id: MongoID
  orientation: UpdateOneItemCustomisationSubObjectsHooksOrientationInput
  position: UpdateOneItemCustomisationSubObjectsHooksPositionInput
  type: EnumItemCustomisationSubObjectsHooksType
}

""""""
input UpdateOneItemCustomisationSubObjectsHooksOrientationInput {
  x: Float
  y: Float
  z: Float
}

""""""
input UpdateOneItemCustomisationSubObjectsHooksPositionInput {
  x: Float
  y: Float
  z: Float
}

""""""
input UpdateOneItemCustomisationSubObjectsInput {
  _id: MongoID
  associatedItemsGroup: MongoID
  hooks: [UpdateOneItemCustomisationSubObjectsHooksInput]
  nameId: String
  nameTranslations: Translations
  showOnStart: Boolean
  weight: Float
}

""""""
input UpdateOneItemCustomisationSymbolicRepresentationInput {
  _id: MongoID
  anglePositionIsRight: Boolean
  break3D: Boolean
  colors: EnumItemCustomisationSymbolicRepresentationColors
  displayDiagonals: Boolean
  doorType: EnumItemCustomisationSymbolicRepresentationDoorType
  drawerCount: Float
  symbolicIcon: EnumItemCustomisationSymbolicRepresentationSymbolicIcon
  symbolicIconShape: EnumItemCustomisationSymbolicRepresentationSymbolicIconShape
  symbolicIconSubType: EnumItemCustomisationSymbolicRepresentationSymbolicIconSubType
  type: EnumItemCustomisationSymbolicRepresentationType
}

""""""
input UpdateOneItemFactSheetInput {
  _id: MongoID
  descriptionJson: JSONObject
  logoPicture: String
  pictureUrl: String
}

""""""
input UpdateOneItemGuardrailInformationsInput {
  _id: MongoID
  meshes: [UpdateOneItemGuardrailInformationsMeshesInput]
}

""""""
input UpdateOneItemGuardrailInformationsMeshesDimensionsInput {
  height: Float
  length: Float
  thickness: Float
}

""""""
input UpdateOneItemGuardrailInformationsMeshesInput {
  _id: MongoID
  dimensions: UpdateOneItemGuardrailInformationsMeshesDimensionsInput
  materialId: MongoID
  meshId: MongoID
  options: UpdateOneItemGuardrailInformationsMeshesOptionsInput
  placing: UpdateOneItemGuardrailInformationsMeshesPlacingInput
  surface: UpdateOneItemGuardrailInformationsMeshesSurfaceInput
  type: EnumItemGuardrailInformationsMeshesType
}

""""""
input UpdateOneItemGuardrailInformationsMeshesOptionsInput {
  closeBottom: Boolean
  closeTop: Boolean
  shape: EnumItemGuardrailInformationsMeshesOptionsShape
}

""""""
input UpdateOneItemGuardrailInformationsMeshesPlacingInput {
  elevation: Float
  endContraction: Float
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  placeEndPillarsDiagonally: Boolean
}

""""""
input UpdateOneItemGuardrailInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
}

""""""
input UpdateOneItemInput {
  articleCode: String
  brandId: MongoID
  buildingWingInfos: String
  canBeCutAlongHeight: Boolean
  canBeCutAlongLength: Boolean
  canBeCutAlongWidth: Boolean
  canBeDroppedOnZones: [EnumItemCanBeDroppedOnZones!]
  categoriesIds: [MongoID!]
  compositeInfos: String
  consideredAsDroppableZones: [EnumItemConsideredAsDroppableZones!]
  createdAt: Date
  createdById: MongoID
  customisationByItemsGroupId: MongoID
  customisationCoverPlanes: [UpdateOneItemCustomisationCoverPlanesInput!]
  customisationMaterials: [UpdateOneItemCustomisationMaterialsInput!]
  customisationSubObjects: [UpdateOneItemCustomisationSubObjectsInput!]
  customisationSymbolicRepresentation: UpdateOneItemCustomisationSymbolicRepresentationInput
  deleted: Boolean
  ean: String
  factSheet: UpdateOneItemFactSheetInput
  guardrailInformations: UpdateOneItemGuardrailInformationsInput
  metadata: [UpdateOneItemMetadataInput!]
  minimumPricedDimensions: UpdateOneItemMinimumPricedDimensionsInput
  modelUrl: String
  name: String
  outputAssets: UpdateOneItemOutputAssetsInput
  physicalHeight: String
  physicalLength: String
  physicalWidth: String
  pillarInformations: UpdateOneItemPillarInformationsInput
  priceCoefExclusion: Boolean
  priceGeneration: EnumItemPriceGeneration
  priceUnit: EnumItemPriceUnit
  publicNameTranslations: Translations
  roofInformations: UpdateOneItemRoofInformationsInput
  scrapperTag: String
  slug: String
  stairsInformations: UpdateOneItemStairsInformationsInput
  tags: [String!]
  thumbnailUrl: String
  tooltip3DTranslations: Translations
  type: EnumItemType
  updatedAt: Date
  updatedById: MongoID
  vegetationInformations: UpdateOneItemVegetationInformationsInput
  wallInformations: UpdateOneItemWallInformationsInput
}

""""""
input UpdateOneItemMetadataInput {
  _id: MongoID
  key: String
  value: String
}

""""""
input UpdateOneItemMinimumPricedDimensionsInput {
  _id: MongoID
  depth: String
  width: String
}

""""""
input UpdateOneItemOutputAssetsCoatingVariantsAlbedoInput {
  _id: MongoID
  name: String
  type: String
  url: String!
}

""""""
input UpdateOneItemOutputAssetsCoatingVariantsInput {
  _id: MongoID
  albedo: UpdateOneItemOutputAssetsCoatingVariantsAlbedoInput
  metallic: UpdateOneItemOutputAssetsCoatingVariantsAlbedoInput
  name: String
  normal: UpdateOneItemOutputAssetsCoatingVariantsAlbedoInput
  smoothness: UpdateOneItemOutputAssetsCoatingVariantsAlbedoInput
}

""""""
input UpdateOneItemOutputAssetsInput {
  _id: MongoID
  coatingVariants: [UpdateOneItemOutputAssetsCoatingVariantsInput]
}

type UpdateOneItemPayload {
  """Updated document"""
  record: Item

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneItemPillarInformationsInput {
  _id: MongoID
  cylinderSides: Float
  materials: [UpdateOneItemPillarInformationsMaterialsInput]
  models: [UpdateOneItemPillarInformationsModelsInput]
  necking: UpdateOneItemPillarInformationsNeckingInput
}

""""""
input UpdateOneItemPillarInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemPillarInformationsMaterialsType
}

""""""
input UpdateOneItemPillarInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemPillarInformationsModelsType
  width: Float
}

""""""
input UpdateOneItemPillarInformationsNeckingCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateOneItemPillarInformationsNeckingInput {
  crossSection: UpdateOneItemPillarInformationsNeckingCrossSectionInput
  distanceToTop: Float
}

""""""
input UpdateOneItemRoofInformationsCoveringInput {
  included: Boolean
  ridgeTiles: UpdateOneItemRoofInformationsCoveringRidgeTilesInput
  sealingThickness: Float
  spaceBetweenSealingAndTiles: Float
  tilesThickness: Float
}

""""""
input UpdateOneItemRoofInformationsCoveringRidgeTilesInput {
  innerRadius: Float
  length: Float
  radius: Float
}

""""""
input UpdateOneItemRoofInformationsEavesStyleInput {
  type: EnumItemRoofInformationsEavesStyleType
}

""""""
input UpdateOneItemRoofInformationsFlatRoofBorderDimensionsInput {
  height: Float
  width: Float
}

""""""
input UpdateOneItemRoofInformationsFlatRoofInput {
  borderDimensions: UpdateOneItemRoofInformationsFlatRoofBorderDimensionsInput
  gravelThickness: Float
  included: Boolean
}

""""""
input UpdateOneItemRoofInformationsFramingInput {
  included: Boolean
  pieces: [UpdateOneItemRoofInformationsFramingPiecesInput]
  type: EnumItemRoofInformationsFramingType
}

""""""
input UpdateOneItemRoofInformationsFramingPiecesEnd_coordinateInput {
  x: Float
  y: Float
}

""""""
input UpdateOneItemRoofInformationsFramingPiecesInput {
  _id: MongoID
  end_coordinate: UpdateOneItemRoofInformationsFramingPiecesEnd_coordinateInput
  name: String
  start_coordinate: UpdateOneItemRoofInformationsFramingPiecesStart_coordinateInput
  type: EnumItemRoofInformationsFramingPiecesType
}

""""""
input UpdateOneItemRoofInformationsFramingPiecesStart_coordinateInput {
  x: Float
  y: Float
}

""""""
input UpdateOneItemRoofInformationsGutterInput {
  included: Boolean
  innerRadius: Float
  radius: Float
}

""""""
input UpdateOneItemRoofInformationsInput {
  _id: MongoID
  covering: UpdateOneItemRoofInformationsCoveringInput
  eavesStyle: UpdateOneItemRoofInformationsEavesStyleInput
  flatRoof: UpdateOneItemRoofInformationsFlatRoofInput
  framing: UpdateOneItemRoofInformationsFramingInput
  gutter: UpdateOneItemRoofInformationsGutterInput
  materials: [UpdateOneItemRoofInformationsMaterialsInput]
  models: [UpdateOneItemRoofInformationsModelsInput]
  overhang: UpdateOneItemRoofInformationsOverhangInput
  purlins: UpdateOneItemRoofInformationsPurlinsInput
  rafters: UpdateOneItemRoofInformationsRaftersInput
  ridgeBoard: UpdateOneItemRoofInformationsRidgeBoardInput
  solarPanels: UpdateOneItemRoofInformationsSolarPanelsInput
  topPlate: UpdateOneItemRoofInformationsTopPlateInput
}

""""""
input UpdateOneItemRoofInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemRoofInformationsMaterialsType
}

""""""
input UpdateOneItemRoofInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemRoofInformationsModelsType
  width: Float
}

""""""
input UpdateOneItemRoofInformationsOverhangInput {
  bargeboard: Float
  bargeboardPurlins: Float
  bargeboardRafters: Float
  eave: Float
  included: Boolean
}

""""""
input UpdateOneItemRoofInformationsPurlinsBottomInput {
  height: Float
  width: Float
}

""""""
input UpdateOneItemRoofInformationsPurlinsInput {
  bottom: UpdateOneItemRoofInformationsPurlinsBottomInput
  included: Boolean
  intermediate: UpdateOneItemRoofInformationsPurlinsIntermediateInput
  ridge: UpdateOneItemRoofInformationsPurlinsRidgeInput
}

""""""
input UpdateOneItemRoofInformationsPurlinsIntermediateInput {
  height: Float
  width: Float
}

""""""
input UpdateOneItemRoofInformationsPurlinsRidgeInput {
  height: Float
  width: Float
}

""""""
input UpdateOneItemRoofInformationsRaftersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateOneItemRoofInformationsRaftersInput {
  crossSection: UpdateOneItemRoofInformationsRaftersCrossSectionInput
  included: Boolean
  typicalDistance: Float
}

""""""
input UpdateOneItemRoofInformationsRidgeBoardCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateOneItemRoofInformationsRidgeBoardInput {
  crossSection: UpdateOneItemRoofInformationsRidgeBoardCrossSectionInput
  included: Boolean
}

""""""
input UpdateOneItemRoofInformationsSolarPanelsFrameInput {
  thickness: Float
  width: Float
}

""""""
input UpdateOneItemRoofInformationsSolarPanelsInput {
  distanceToRoof: Float
  frame: UpdateOneItemRoofInformationsSolarPanelsFrameInput
  height: Float
  included: Boolean
  thickness: Float
  width: Float
}

""""""
input UpdateOneItemRoofInformationsTopPlateCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateOneItemRoofInformationsTopPlateInput {
  crossSection: UpdateOneItemRoofInformationsTopPlateCrossSectionInput
  included: Boolean
}

""""""
input UpdateOneItemStairsInformationsInput {
  _id: MongoID
  landing: UpdateOneItemStairsInformationsLandingInput
  materials: [UpdateOneItemStairsInformationsMaterialsInput]
  models: [UpdateOneItemStairsInformationsModelsInput]
  railing: UpdateOneItemStairsInformationsRailingInput
  steps: UpdateOneItemStairsInformationsStepsInput
  stringers: UpdateOneItemStairsInformationsStringersInput
}

""""""
input UpdateOneItemStairsInformationsLandingInput {
  height: Float
}

""""""
input UpdateOneItemStairsInformationsMaterialsInput {
  _id: MongoID
  materialId: MongoID
  type: EnumItemStairsInformationsMaterialsType
}

""""""
input UpdateOneItemStairsInformationsModelsInput {
  _id: MongoID
  height: Float
  length: Float
  modelId: MongoID
  type: EnumItemStairsInformationsModelsType
  width: Float
}

""""""
input UpdateOneItemStairsInformationsRailingBalustersInput {
  radius: Float
  typicalDistance: Float
}

""""""
input UpdateOneItemStairsInformationsRailingHandrailCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateOneItemStairsInformationsRailingHandrailInput {
  crossSection: UpdateOneItemStairsInformationsRailingHandrailCrossSectionInput
  elevation: Float
}

""""""
input UpdateOneItemStairsInformationsRailingInput {
  balusters: UpdateOneItemStairsInformationsRailingBalustersInput
  handrail: UpdateOneItemStairsInformationsRailingHandrailInput
  posts: UpdateOneItemStairsInformationsRailingPostsInput
}

""""""
input UpdateOneItemStairsInformationsRailingPostsCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateOneItemStairsInformationsRailingPostsInput {
  crossSection: UpdateOneItemStairsInformationsRailingPostsCrossSectionInput
}

""""""
input UpdateOneItemStairsInformationsStepsInput {
  risers: UpdateOneItemStairsInformationsStepsRisersInput
  treats: UpdateOneItemStairsInformationsStepsTreatsInput
}

""""""
input UpdateOneItemStairsInformationsStepsRisersInput {
  height: Float
  thickness: Float
}

""""""
input UpdateOneItemStairsInformationsStepsTreatsInput {
  height: Float
  nose: Float
}

""""""
input UpdateOneItemStairsInformationsStringersCrossSectionInput {
  height: Float
  width: Float
}

""""""
input UpdateOneItemStairsInformationsStringersInput {
  crossSection: UpdateOneItemStairsInformationsStringersCrossSectionInput
  overTreat: Float
}

""""""
input UpdateOneItemVegetationInformationsInput {
  _id: MongoID
  canBeSelected: Boolean
}

""""""
input UpdateOneItemWallInformationsApplicationInput {
  bothSides: Boolean
  exteriorFacesExteriorWalls: Boolean
  interiorFacesExteriorWalls: Boolean
  interiorWalls: Boolean
  overRegularWall: Boolean
}

""""""
input UpdateOneItemWallInformationsInput {
  _id: MongoID
  application: UpdateOneItemWallInformationsApplicationInput
  class: EnumItemWallInformationsClass
  meshes: [UpdateOneItemWallInformationsMeshesInput]
}

""""""
input UpdateOneItemWallInformationsMeshesDimensionsInput {
  length: Float
  thickness: Float
}

""""""
input UpdateOneItemWallInformationsMeshesDisplayInput {
  autoCut: Boolean
  whenWallsHigh: Boolean
  whenWallsLow: Boolean
}

""""""
input UpdateOneItemWallInformationsMeshesInput {
  _id: MongoID
  buildingMaterial: EnumItemWallInformationsMeshesBuildingMaterial
  dimensions: UpdateOneItemWallInformationsMeshesDimensionsInput
  display: UpdateOneItemWallInformationsMeshesDisplayInput
  materialId: MongoID
  meshId: MongoID
  name: String
  options: UpdateOneItemWallInformationsMeshesOptionsInput
  overlapPriority: Float
  placing: UpdateOneItemWallInformationsMeshesPlacingInput
  segmentTypes: UpdateOneItemWallInformationsMeshesSegmentTypesInput
  surface: UpdateOneItemWallInformationsMeshesSurfaceInput
  type: EnumItemWallInformationsMeshesType
}

""""""
input UpdateOneItemWallInformationsMeshesOptionsInput {
  closeBack: Boolean
  closeBottom: Boolean
  closeFront: Boolean
  closeSides: Boolean
  closeTop: Boolean
  hidden: Boolean
  nextToDoorsAndWindows: Boolean
  paintable: Boolean
  shape: EnumItemWallInformationsMeshesOptionsShape
  skewOnCorners: Boolean
}

""""""
input UpdateOneItemWallInformationsMeshesPlacingBottomElevationInput {
  _id: MongoID
  elevation: Float
  reference: EnumItemWallInformationsMeshesPlacingBottomElevationReference
}

""""""
input UpdateOneItemWallInformationsMeshesPlacingInput {
  beamDirection: EnumItemWallInformationsMeshesPlacingBeamDirection
  bottomElevation: UpdateOneItemWallInformationsMeshesPlacingBottomElevationInput
  depthOffset: Float
  doorPostOffset: Float
  endContraction: Float
  endDepth: UpdateOneItemWallInformationsMeshesPlacingStartDepthInput
  gap: Float
  idealDistance: Float
  idealGapDistance: Float
  moveVerticesAbove: Float
  pivotIsOnTop: Boolean
  placeEndPillarsDiagonally: Boolean
  repetitionFilter: EnumItemWallInformationsMeshesPlacingRepetitionFilter
  startDepth: UpdateOneItemWallInformationsMeshesPlacingStartDepthInput
  stretchVertically: Boolean
  topElevation: UpdateOneItemWallInformationsMeshesPlacingBottomElevationInput
}

""""""
input UpdateOneItemWallInformationsMeshesPlacingStartDepthInput {
  _id: MongoID
  depth: Float
  plusOnTop: Float
  reference: EnumItemWallInformationsMeshesPlacingStartDepthReference
}

""""""
input UpdateOneItemWallInformationsMeshesSegmentTypesInput {
  doors: Boolean
  walls: Boolean
  windows: Boolean
}

""""""
input UpdateOneItemWallInformationsMeshesSurfaceInput {
  clampU: Boolean
  clampV: Boolean
  stretchU: Boolean
  stretchV: Boolean
  swapUV: Boolean
}

""""""
input UpdateOneItemsGroupInput {
  brandId: MongoID
  choiceIsMandatory: Boolean
  generated: Boolean
  itemsIds: [MongoID!]
  name: String
  option: UpdateOneItemsGroupOptionInput
  publicNameTranslations: Translations
  shouldBeOpenInGUI: Boolean
  thumbnailPictureName: String
  type: EnumItemsGroupType
}

""""""
input UpdateOneItemsGroupOptionInput {
  _id: MongoID
  baseItemId: MongoID
  choiceIsMandatory: Boolean
  disableDefaultChoice: Boolean
  positions: [UpdateOneItemsGroupOptionPositionsInput!]
}

""""""
input UpdateOneItemsGroupOptionPositionsInput {
  _id: MongoID
  margins: UpdateOneItemsGroupOptionPositionsMarginsInput
  placement: EnumItemsGroupOptionPositionsPlacement
  rotation: EnumItemsGroupOptionPositionsRotation
}

""""""
input UpdateOneItemsGroupOptionPositionsMarginsInput {
  x: Float
  y: Float
  z: Float
}

type UpdateOneItemsGroupPayload {
  """Updated document"""
  record: ItemsGroup

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOnePaletteColorsInput {
  _id: MongoID
  a: Float
  b: Float
  code: String
  g: Float
  metallic: Float
  nameTranslations: Translations
  r: Float
  roughness: Float
}

""""""
input UpdateOnePaletteInput {
  brandId: MongoID
  colors: [UpdateOnePaletteColorsInput]
  name: String
  type: EnumPaletteType
}

type UpdateOnePalettePayload {
  """Updated document"""
  record: Palette

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOnePictureInput {
  brandId: MongoID
  name: String
  size: Float
  url: String
}

type UpdateOnePicturePayload {
  """Updated document"""
  record: Picture

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOnePipelineJobInput {
  completedDate: Date
  settings: UpdateOnePipelineJobSettingsInput
  startDate: Date
  state: EnumPipelineJobState
  submitDate: Date
  type: EnumPipelineJobType
}

type UpdateOnePipelineJobPayload {
  """Updated document"""
  record: PipelineJob

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOnePipelineJobSettingsConvertPBRMaterialToAssetBundleInput {
  _id: MongoID
  assetUrl: String
  itemId: MongoID
}

""""""
input UpdateOnePipelineJobSettingsInput {
  _id: MongoID
  convertPBRMaterialToAssetBundle: UpdateOnePipelineJobSettingsConvertPBRMaterialToAssetBundleInput
}

""""""
input UpdateOnePlannedMaintenanceInput {
  durationHours: Float
  reasonTranslations: Translations
  startDate: Date
}

type UpdateOnePlannedMaintenancePayload {
  """Updated document"""
  record: PlannedMaintenance

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOnePriceTableInput {
  brandId: MongoID
  currencyName: String
  displayEan: Boolean
  globalDiscount: Float
  moniker: String
  multiplyingCoefficient: Float
  name: String
  prices: [UpdateOnePriceTablePricesInput]
  symbol: String
  vatRate: Float
}

type UpdateOnePriceTablePayload {
  """Updated document"""
  record: PriceTable

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOnePriceTablePricesInput {
  _id: MongoID
  articleIdentifier: String
  ean: String
  itemsIds: [MongoID]
  price: Float
  sourceItemId: MongoID
}

""""""
input UpdateOneProductScanInput {
  creationDate: Date
  metallic: Float
  notes: String
  productName: String
  reference: String
  scans: [UpdateOneProductScanScansInput]
  size: UpdateOneProductScanSizeInput
  state: EnumProductScanState
  thumbnail: UpdateOneProductScanScansInputImagesInput
}

type UpdateOneProductScanPayload {
  """Updated document"""
  record: ProductScan

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneProductScanScansInput {
  _id: MongoID
  generatedImages: [UpdateOneProductScanScansInputImagesInput]
  inputImages: [UpdateOneProductScanScansInputImagesInput]
  name: String
  type: EnumProductScanScansType
}

""""""
input UpdateOneProductScanScansInputImagesInput {
  _id: MongoID
  format: String!
  name: String!
  url: String!
}

""""""
input UpdateOneProductScanSizeInput {
  height: String
  length: String
  width: String
}

""""""
input UpdateOneSalesRecordInput {
  finalCustomerMetadata: Metadata
  metadata: Metadata
}

type UpdateOneSalesRecordPayload {
  """Updated document"""
  record: SalesRecord

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneSaveFolderInput {
  brandId: MongoID
  createdAt: Date
  name: String
  parentId: MongoID
  slug: String
  updatedAt: Date
}

type UpdateOneSaveFolderPayload {
  """Updated document"""
  record: SaveFolder

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneSaveInput {
  additionalInfo: JSON
  apartmentUnitTypeId: MongoID
  brandId: MongoID
  chosenStylePresetId: MongoID
  createdFromAP: MongoID
  customerId: MongoID
  data: String
  dataFormatVersion: Int
  dataUrl: String
  description: String
  isReadonly: Boolean
  isTemplate: Boolean
  metadata: Metadata
  moduleKitchenCustomData: String
  name: String
  parent: MongoID
  quantitySurveyJSON: String
  saveFolderId: MongoID
  storageBytesUsage: Float
  stylePresetGroupId: MongoID
  tags: [String]
  thumbnailUrl: String
  tunnelState: JSON
  type: EnumSaveType
  visitViewpoints: [UpdateOneSaveVisitViewpointsInput!]
}

type UpdateOneSavePayload {
  """Updated document"""
  record: Save

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneSaveVisitViewpointsInput {
  _id: MongoID
  orientation: UpdateOneSaveVisitViewpointsOrientationInput
  position: UpdateOneSaveVisitViewpointsPositionInput
}

""""""
input UpdateOneSaveVisitViewpointsOrientationInput {
  x: Float
  y: Float
  z: Float
}

""""""
input UpdateOneSaveVisitViewpointsPositionInput {
  x: Float
  y: Float
  z: Float
}

""""""
input UpdateOneSavesGroupInput {
  brandId: MongoID
  name: String
  publicNameTranslations: Translations
  savesIds: [MongoID]
  thumbnailPictureName: String
  type: EnumSavesGroupType
}

type UpdateOneSavesGroupPayload {
  """Updated document"""
  record: SavesGroup

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneStylePresetCustomisationPresetsInput {
  _id: MongoID
  chosenItemId: MongoID
  customisationNameId: String
  filterTag: String
  rotationCondition: EnumStylePresetCustomisationPresetsRotationCondition
}

""""""
input UpdateOneStylePresetGroupInput {
  brandId: MongoID
  name: String
  stylePresetIds: [MongoID]
}

type UpdateOneStylePresetGroupPayload {
  """Updated document"""
  record: StylePresetGroup

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneStylePresetInput {
  brandId: MongoID
  createdAt: Date
  customisationPresets: [UpdateOneStylePresetCustomisationPresetsInput]
  name: String
  publicNameTranslations: Translations
  updatedAt: Date
}

type UpdateOneStylePresetPayload {
  """Updated document"""
  record: StylePreset

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneTutorialInput {
  brandId: MongoID
  displayOnlyOnce: Boolean
  name: String
  points: [UpdateOneTutorialPointInput!]
}

type UpdateOneTutorialPayload {
  """Updated document"""
  record: Tutorial

  """Document ID"""
  recordId: MongoID
}

""""""
input UpdateOneTutorialPointInput {
  _id: MongoID
  illustration: String
  target: EnumTutorialPointTarget
  textTranslations: Translations
  titleTranslations: Translations
}

""""""
input UpdateOneUserInput {
  createdAt: Date
  createdById: MongoID
  email: String
  favoriteItemsIds: [MongoID!]
  favoriteSavesIds: [MongoID!]
  name: String
  roles: [String!]
  updatedAt: Date
}

type UpdateOneUserPayload {
  """Updated document"""
  record: User

  """Document ID"""
  recordId: MongoID
}

type User {
  _id: MongoID!
  brands(
    """Filter by fields"""
    filter: FilterFindManyBrandInput
    limit: Int = 1000
    skip: Int
    sort: SortFindManyBrandInput
  ): [Brand!]!
  createdAt: Date
  createdBy: User
  createdById: MongoID
  email: String!
  favoriteItemsIds: [MongoID!]!
  favoriteSaves(
    """Filter by fields"""
    filter: FilterFindManySaveInput
    isTemplate: Boolean!
    limit: Int = 1000
    skip: Int
    sort: [SortFindManySaveInput!]
  ): [Save!]!
  favoriteSavesIds: [MongoID!]!
  name: String!
  roles: [String!]!
  saves(isTemplate: Boolean!, limit: Int = 1000, skip: Int, sort: [SortFindManySaveInput!]): [Save!]!
  updatedAt: Date
}

type UserAccountLogin {
  token: String!
  user: User!
}

type UserAccountLoginInfo {
  """
  Whether the user can log in using a password (aka. has a password defined). Indeed, some users may be created and eventually logged in by their brands, so they don't create their account themselves and therefore do not have a password defined. This can be detected by using this property. A password reset is possible for users that do not have a password defined.
  """
  canLoginWithPassword: Boolean!

  """The user's name."""
  name: String!
}

type UserActiveInferenceOutput {
  isActive: Boolean!
}

input UserActiveInferenceParams {
  from: Date
  to: Date
  userId: String!
}

type UserActivityDurationByDay {
  app: String!
  date: Date!
  totalSessionsDuration: Int!
}

type UserActivityInferenceOutput {
  durationByDay: [UserActivityDurationByDay!]!
}

input UserActivityInferenceParams {
  apps: [String!]
  from: Date
  to: Date
  userId: String
}

"""A connection to a list of items."""
type UserConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  edges: [UserEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: User!
}

"""List of items with pagination."""
type UserPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [User!]!

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type UserSessionsCountByApp {
  app: String!
  sessionsCount: Int!
}

type UserSessionsCountInferenceOutput {
  sessionsCountByApp: [UserSessionsCountByApp!]!
  totalSessionsCount: Int!
}

input UserSessionsCountInferenceParams {
  apps: [String!]
  from: Date
  to: Date
  userId: String
}

type customisationCountertop {
  _id: MongoID
  associatedItem: MongoID
  mode: EnumItemCustomisationCoverPlanesMode
}